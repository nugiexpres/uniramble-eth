type BasicCaveatEnforcer_FunctionAllowed {
  id: ID!
  delegationHash: String!
  functionSelector: String!
  allowed: Boolean!
}

type BasicCaveatEnforcer_GameActionLimitSet {
  id: ID!
  delegationHash: String!
  maxRolls: BigInt!
  maxBuys: BigInt!
  maxRails: BigInt!
  maxFaucets: BigInt!
  maxCooks: BigInt!
  validUntil: BigInt!
}

type BasicCaveatEnforcer_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type BasicCaveatEnforcer_RateLimitSet {
  id: ID!
  delegationHash: String!
  maxCallsPerHour: BigInt!
}

type BasicCaveatEnforcer_SpendingLimitSet {
  id: ID!
  delegationHash: String!
  token: String!
  maxAmount: BigInt!
  validUntil: BigInt!
}

type BasicCaveatEnforcer_TargetAddressesSet {
  id: ID!
  delegationHash: String!
  targets: [String!]!
}

type BasicCaveatEnforcer_TargetAllowed {
  id: ID!
  delegationHash: String!
  target: String!
}

type BasicCaveatEnforcer_TimeLimitSet {
  id: ID!
  delegationHash: String!
  validUntil: BigInt!
}

type BreadToken_Approval {
  id: ID!
  owner: String!
  spender: String!
  value: BigInt!
}

type BreadToken_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type BreadToken_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt!
}

type CaveatEnforcerHub_DefaultEnforcerSet {
  id: ID!
  enforcerType: String!
  enforcer: String!
}

type CaveatEnforcerHub_EnforcerAdded {
  id: ID!
  delegationHash: String!
  enforcer: String!
}

type CaveatEnforcerHub_EnforcerAfterHookFailed {
  id: ID!
  enforcer: String!
  delegationHash: String!
  reason: String!
}

type CaveatEnforcerHub_EnforcerEnabled {
  id: ID!
  enforcer: String!
  enabled: Boolean!
}

type CaveatEnforcerHub_EnforcerRemoved {
  id: ID!
  delegationHash: String!
  enforcer: String!
}

type CaveatEnforcerHub_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type ERC6551Account_NFTReceived {
  id: ID!
  operator: String!
  from: String!
  tokenId: BigInt!
  data: String!
}

type ERC6551Account_Withdraw {
  id: ID!
  owner: String!
  amount: BigInt!
}

type ERC6551Registry_AccountCreated {
  id: ID!
  account: String!
  implementation: String!
  chainId: BigInt!
  tokenContract: String!
  tokenId: BigInt!
  salt: BigInt!
}

type FaucetMon_BalanceFunded {
  id: ID!
  funder: String!
  amount: BigInt!
}

type FaucetMon_BalanceWithdrawn {
  id: ID!
  owner: String!
  amount: BigInt!
}

type FaucetMon_FaucetUsed {
  id: ID!
  recipient: String!
  amount: BigInt!
}

type FinancialCaveatEnforcer_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type FinancialCaveatEnforcer_SpendingLimitSet {
  id: ID!
  delegationHash: String!
  token: String!
  maxAmount: BigInt!
  validUntil: BigInt!
  periodLength: BigInt!
}

type FinancialCaveatEnforcer_TimeLimitSet {
  id: ID!
  delegationHash: String!
  validUntil: BigInt!
}

type FinancialCaveatEnforcer_TokenSpent {
  id: ID!
  delegationHash: String!
  token: String!
  amount: BigInt!
}

type FinancialCaveatEnforcer_TokenWhitelistSet {
  id: ID!
  delegationHash: String!
  tokens: [String!]!
}

type FinancialCaveatEnforcer_TransferLimitSet {
  id: ID!
  delegationHash: String!
  token: String!
  maxTransferAmount: BigInt!
  dailyLimit: BigInt!
}

type FoodNFT_Approval {
  id: ID!
  owner: String!
  approved: String!
  tokenId: BigInt!
}

type FoodNFT_ApprovalForAll {
  id: ID!
  owner: String!
  operator: String!
  approved: Boolean!
}

type FoodNFT_BatchMetadataUpdate {
  id: ID!
  _fromTokenId: BigInt!
  _toTokenId: BigInt!
}

type FoodNFT_FoodBurned {
  id: ID!
  tokenId: BigInt!
  owner: String!
  burner: String!
  timestamp: BigInt!
}

type FoodNFT_MetadataUpdate {
  id: ID!
  _tokenId: BigInt!
}

type FoodNFT_MintPriceUpdated {
  id: ID!
  oldPrice: BigInt!
  newPrice: BigInt!
}

type FoodNFT_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type FoodNFT_Transfer {
  id: ID!
  from: String!
  to: String!
  tokenId: BigInt!
}

type FoodScramble_FaucetAmountUpdated {
  id: ID!
  oldAmount: BigInt!
  newAmount: BigInt!
}

type FoodScramble_FaucetCooldownUpdated {
  id: ID!
  oldCooldown: BigInt!
  newCooldown: BigInt!
}

type FoodScramble_HamburgerMinted {
  id: ID!
  player: String!
  tokenId: BigInt!
}

type FoodScramble_IngredientPurchased {
  id: ID!
  player: String!
  ingredientType: BigInt!
  position: BigInt!
}

type FoodScramble_PlayerCreated {
  id: ID!
  tba: String!
  gridIndex: BigInt!
}

type FoodScramble_PlayerMoved {
  id: ID!
  player: String!
  newPosition: BigInt!
  roll: BigInt!
}

type FoodScramble_RailTraveled {
  id: ID!
  player: String!
  fromPosition: BigInt!
  toPosition: BigInt!
}

type FoodScramble_TokenBoundAccountCreated {
  id: ID!
  eoa: String!
  tba: String!
  startPosition: BigInt!
}

type GameCaveatEnforcer_FunctionAllowed {
  id: ID!
  delegationHash: String!
  functionSelector: String!
  allowed: Boolean!
}

type GameCaveatEnforcer_GameActionAllowed {
  id: ID!
  delegationHash: String!
  gameAction: String!
  allowed: Boolean!
}

type GameCaveatEnforcer_GameActionLimitSet {
  id: ID!
  delegationHash: String!
  maxRolls: BigInt!
  maxBuys: BigInt!
  maxRails: BigInt!
  maxFaucets: BigInt!
  maxCooks: BigInt!
  validUntil: BigInt!
}

type GameCaveatEnforcer_GameStateSet {
  id: ID!
  delegationHash: String!
  isActive: Boolean!
  maxConsecutiveActions: BigInt!
}

type GameCaveatEnforcer_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type GameCaveatEnforcer_RateLimitSet {
  id: ID!
  delegationHash: String!
  maxCallsPerHour: BigInt!
}

type GameCaveatEnforcer_TargetAddressesSet {
  id: ID!
  delegationHash: String!
  targets: [String!]!
}

type LettuceToken_Approval {
  id: ID!
  owner: String!
  spender: String!
  value: BigInt!
}

type LettuceToken_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type LettuceToken_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt!
}

type MeatToken_Approval {
  id: ID!
  owner: String!
  spender: String!
  value: BigInt!
}

type MeatToken_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type MeatToken_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt!
}

type PaymentGateway_ERC20PaymentReceived {
  id: ID!
  payer: String!
  token: String!
  amount: BigInt!
  metadata: String!
}

type PaymentGateway_ERC20Withdrawn {
  id: ID!
  token: String!
  receiver: String!
  amount: BigInt!
}

type PaymentGateway_NativePaymentReceived {
  id: ID!
  payer: String!
  amount: BigInt!
  metadata: String!
}

type PaymentGateway_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type PaymentGateway_Withdrawn {
  id: ID!
  receiver: String!
  amount: BigInt!
}

type RewardPool_DistributorUpdated {
  id: ID!
  distributor: String!
  authorized: Boolean!
}

type RewardPool_FundsDeposited {
  id: ID!
  from: String!
  amount: BigInt!
}

type RewardPool_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type RewardPool_RewardDistributed {
  id: ID!
  to: String!
  amount: BigInt!
  distributor: String!
}

type SpiceToken_Approval {
  id: ID!
  owner: String!
  spender: String!
  value: BigInt!
}

type SpiceToken_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt!
}

type TomatoToken_Approval {
  id: ID!
  owner: String!
  spender: String!
  value: BigInt!
}

type TomatoToken_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type TomatoToken_Transfer {
  id: ID!
  from: String!
  to: String!
  value: BigInt!
}

