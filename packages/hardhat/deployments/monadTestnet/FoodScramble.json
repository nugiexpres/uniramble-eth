{
  "address": "0x6888a19847722314417F8fE1Bb3E758448888ac1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_breadAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_meatAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lettuceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tomatoAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chefNFTAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hamburgerAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_faucetMonAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_paymentGatewayAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "FaucetAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCooldown",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCooldown",
          "type": "uint256"
        }
      ],
      "name": "FaucetCooldownUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "HamburgerMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ingredientType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "IngredientPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tba",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gridIndex",
          "type": "uint256"
        }
      ],
      "name": "PlayerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPosition",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roll",
          "type": "uint256"
        }
      ],
      "name": "PlayerMoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromPosition",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toPosition",
          "type": "uint256"
        }
      ],
      "name": "RailTraveled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "eoa",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tba",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPosition",
          "type": "uint256"
        }
      ],
      "name": "TokenBoundAccountCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "accountReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bread",
      "outputs": [
        {
          "internalType": "contract BreadToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnOldIngredients",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyIngredient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "canBuy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "canBuyAtPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chefNFT",
      "outputs": [
        {
          "internalType": "contract ChefNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_initData",
          "type": "bytes"
        }
      ],
      "name": "createTokenBoundAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "faucetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "faucetCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "faucetMon",
      "outputs": [
        {
          "internalType": "contract FaucetMon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "faucetUsageCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "faucets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFaucetAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFaucetCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGrid",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "typeGrid",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "ingredientType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfPlayers",
              "type": "uint256"
            }
          ],
          "internalType": "struct FoodScramble.Box[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "position",
          "type": "uint256"
        }
      ],
      "name": "getIngredientTypeAtPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getMyFoods",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "getRandomRollForUI",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTbaBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTbaTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "grid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "typeGrid",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ingredientType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfPlayers",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hamburger",
      "outputs": [
        {
          "internalType": "contract FoodNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum FoodScramble.IngredientType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "inventory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPlayerCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastFaucetUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastMintedSpecialBox",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lettuce",
      "outputs": [
        {
          "internalType": "contract LettuceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "meat",
      "outputs": [
        {
          "internalType": "contract MeatToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFoodNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "movePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentGateway",
      "outputs": [
        {
          "internalType": "contract IPaymentGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "player",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ERC6551Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "resetPlayerProgress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rollCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        }
      ],
      "name": "setFaucetAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCooldown",
          "type": "uint256"
        }
      ],
      "name": "setFaucetCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tba",
          "type": "address"
        }
      ],
      "name": "setTBA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setUsername",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalRolls",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ingredientsCollected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "foodsMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastActive",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasSpecialAccess",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tbaList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tomato",
      "outputs": [
        {
          "internalType": "contract TomatoToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "travelHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "travelRail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useFaucetMon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usernames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f16f6edc2f300616fc8c173909993ca14011d16b59ba1e27adb9686d4eb1a3c",
  "receipt": {
    "to": null,
    "from": "0x9bF68A0f0be9A9B6dCeb4D5675745c2f7cFb9483",
    "contractAddress": "0x6888a19847722314417F8fE1Bb3E758448888ac1",
    "transactionIndex": 6,
    "gasUsed": "4263897",
    "logsBloom": "0x
    "blockHash": "0x7bb0ec8dc55cf903d855429354dacb23f1483475c81acc6ccd0d7900f5821e97",
    "transactionHash": "0x0f16f6edc2f300616fc8c173909993ca14011d16b59ba1e27adb9686d4eb1a3c",
    "logs": [],
    "blockNumber": 44314806,
    "cumulativeGasUsed": "4643005",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9bF68A0f0be9A9B6dCeb4D5675745c2f7cFb9483",
    "0x10394aBA8b053E2813e153cd7899E70FF2D4C06C",
    "0x7fB4937115fBf4d6549073E06F69762C7Ce5AD3d",
    "0x60fbcbA71083EEbB4E3C1B7175d79D56b73Ba5de",
    "0x7a1D4c76d170D388f7e0F0f5ca980526a6B20737",
    "0xE4aE59B941C6d2881d28BD03f10Da57554FCC390",
    "0x386846bE80165fEAEEcb18Ef4d40193583CccA62",
    "0xb172F7B2B9cB7C33585C16E72b75b4830104913C",
    "0xD861c6d71DFaf9F4013a50a9b177C083e90BD006",
    "0x10ab736762ADFd7E3D1C8932c5d3313a862E0548"
  ],
  "numDeployments": 2,
  "solcInputHash": "f9062ffe15c72141f9324d6b24c5b125",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_breadAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_meatAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lettuceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tomatoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chefNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hamburgerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_faucetMonAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_paymentGatewayAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"FaucetAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCooldown\",\"type\":\"uint256\"}],\"name\":\"FaucetCooldownUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"HamburgerMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ingredientType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"IngredientPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gridIndex\",\"type\":\"uint256\"}],\"name\":\"PlayerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roll\",\"type\":\"uint256\"}],\"name\":\"PlayerMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromPosition\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPosition\",\"type\":\"uint256\"}],\"name\":\"RailTraveled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eoa\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPosition\",\"type\":\"uint256\"}],\"name\":\"TokenBoundAccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"accountReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bread\",\"outputs\":[{\"internalType\":\"contract BreadToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnOldIngredients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIngredient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"canBuyAtPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chefNFT\",\"outputs\":[{\"internalType\":\"contract ChefNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_initData\",\"type\":\"bytes\"}],\"name\":\"createTokenBoundAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucetCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucetMon\",\"outputs\":[{\"internalType\":\"contract FaucetMon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"faucetUsageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFaucetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFaucetCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGrid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeGrid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ingredientType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPlayers\",\"type\":\"uint256\"}],\"internalType\":\"struct FoodScramble.Box[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getIngredientTypeAtPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getMyFoods\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getRandomRollForUI\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTbaBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTbaTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeGrid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ingredientType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPlayers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hamburger\",\"outputs\":[{\"internalType\":\"contract FoodNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum FoodScramble.IngredientType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPlayerCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFaucetUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMintedSpecialBox\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lettuce\",\"outputs\":[{\"internalType\":\"contract LettuceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"meat\",\"outputs\":[{\"internalType\":\"contract MeatToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFoodNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"movePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentGateway\",\"outputs\":[{\"internalType\":\"contract IPaymentGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"player\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ERC6551Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"resetPlayerProgress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rollCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setFaucetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCooldown\",\"type\":\"uint256\"}],\"name\":\"setFaucetCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"}],\"name\":\"setTBA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setUsername\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRolls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ingredientsCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foodsMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActive\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasSpecialAccess\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tbaList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tomato\",\"outputs\":[{\"internalType\":\"contract TomatoToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"travelHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"travelRail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useFaucetMon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usernames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTbaBalance(address)\":{\"notice\":\"Baca saldo native token (ETH/MON) milik TBA user\"},\"getTbaTokenBalance(address,address)\":{\"notice\":\"Baca saldo ERC20 milik TBA user\"},\"setFaucetAmount(uint256)\":{\"notice\":\"Owner bisa set biaya payment amount manual\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FoodScramble.sol\":\"FoodScramble\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BreadToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BreadToken is ERC20, Ownable {\\n    address public gameContract;\\n\\n    constructor() ERC20(\\\"Bread\\\", \\\"BT\\\") Ownable(msg.sender) {}\\n\\n    function setGameContract(address _gameContract) external onlyOwner {\\n        gameContract = _gameContract;\\n    }\\n\\n    /// @notice Mint token Bread\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == gameContract, \\\"Only game contract can mint\\\");\\n\\n        // mint token ke user\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x112d234e03bb9d4dedabade08253d8402940fb08d2326b2d1ab160ea870a867b\",\"license\":\"MIT\"},\"contracts/ChefNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ChefNFT is ERC721URIStorage, Ownable {\\n    uint256 private _tokenIds;\\n\\n    mapping(address => uint256[]) public myChefNFTs;\\n    mapping(address => bool) public chefMinted;\\n\\n    address public paymentGateway;\\n    address public gameContract;\\n    uint256 public mintPrice = 1 ether;\\n\\n    event MintPriceUpdated(uint256 oldPrice, uint256 newPrice);\\n    event ChefMinted(address indexed to, uint256 indexed tokenId, string tokenURI);\\n\\n    constructor(address _paymentGateway) ERC721(\\\"Chef NFT\\\", \\\"CHEF\\\") Ownable(msg.sender) {\\n        paymentGateway = _paymentGateway;\\n    }\\n\\n    function mintChef(address _to, string memory _tokenURI_) public payable returns (uint256) {\\n        require(msg.value == mintPrice, \\\"Mint price not met\\\");\\n\\n        // Process the payment\\n        (bool success, ) = address(paymentGateway).call{ value: msg.value }(\\n            abi.encodeWithSignature(\\\"processPayment()\\\")\\n        );\\n        require(success, \\\"Payment to PaymentGateway failed\\\");\\n\\n        uint256 newItemId = _tokenIds;\\n        _mint(_to, newItemId);\\n        _setTokenURI(newItemId, _tokenURI_);\\n\\n        _tokenIds++;\\n        myChefNFTs[_to].push(newItemId);\\n        chefMinted[_to] = true;\\n\\n        emit ChefMinted(_to, newItemId, _tokenURI_);\\n        return newItemId;\\n    }\\n\\n    function isChefMinted(address user) external view returns (bool) {\\n        return chefMinted[user];\\n    }\\n\\n    function getMyChefNFTs(address _owner) public view returns (uint256[] memory) {\\n        return myChefNFTs[_owner];\\n    }\\n\\n    function setMintPrice(uint256 _newPrice) external onlyOwner {\\n        uint256 oldPrice = mintPrice;\\n        mintPrice = _newPrice;\\n        emit MintPriceUpdated(oldPrice, _newPrice);\\n    }\\n\\n    function setPaymentGateway(address _paymentGateway) external onlyOwner {\\n        paymentGateway = _paymentGateway;\\n    }\\n}\\n\",\"keccak256\":\"0x714e5d19646ea569fa19ca4b0a6dd1d74e823abab0d100eeac4c1a301827fa16\",\"license\":\"MIT\"},\"contracts/ERC6551AccountProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract ERC6551AccountProxy {\\n    // Gunakan slot standar EIP-1967 untuk implementasi proxy\\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    constructor(address implementation, bytes memory initData) payable {\\n        require(implementation != address(0), \\\"Zero implementation\\\");\\n\\n        // Simpan alamat implementasi di storage slot\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        assembly {\\n            sstore(slot, implementation)\\n        }\\n\\n        // delegatecall ke implementasi\\n        if (initData.length > 0) {\\n            (bool success, ) = implementation.delegatecall(initData);\\n            require(success, \\\"Initialization failed\\\");\\n        }\\n    }\\n\\n    fallback() external payable {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        assembly {\\n            let impl := sload(slot)\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x42171c609eb8254dcc84016427b08aa616e6b04e3d02e0eb5a9038e633d7030c\",\"license\":\"MIT\"},\"contracts/ERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"./ERC6551AccountProxy.sol\\\";\\n\\ncontract ERC6551Registry {\\n    error InitializationFailed();\\n\\n    event AccountCreated(\\n        address indexed account,\\n        address indexed implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    );\\n\\n    // Track created accounts to avoid duplicates\\n    mapping(address => bool) public createdAccounts;\\n    mapping(bytes32 => bool) public usedCombinations;\\n\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt,\\n        bytes calldata initData\\n    ) external returns (address) {\\n        bytes memory proxyCode = abi.encodePacked(\\n            type(ERC6551AccountProxy).creationCode,\\n            abi.encode(implementation, initData)\\n        );\\n\\n        bytes32 combinationHash = keccak256(abi.encode(implementation, chainId, tokenContract, tokenId, salt));\\n        require(!usedCombinations[combinationHash], \\\"Combination already used\\\");\\n\\n        address computed = Create2.computeAddress(bytes32(salt), keccak256(proxyCode));\\n        require(!createdAccounts[computed], \\\"Account already exists\\\");\\n\\n        address deployed = Create2.deploy(0, bytes32(salt), proxyCode);\\n\\n        usedCombinations[combinationHash] = true;\\n        createdAccounts[deployed] = true;\\n\\n        emit AccountCreated(deployed, implementation, chainId, tokenContract, tokenId, salt);\\n\\n        return deployed;\\n    }\\n\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address) {\\n        bytes memory initData = abi.encode(chainId, tokenContract, tokenId);\\n        bytes memory proxyCode = abi.encodePacked(\\n            type(ERC6551AccountProxy).creationCode,\\n            abi.encode(implementation, initData)\\n        );\\n\\n        return Create2.computeAddress(bytes32(salt), keccak256(proxyCode));\\n    }\\n}\\n\",\"keccak256\":\"0xba2e09b3946ee4082bb07e1175a2d3ab5e69000e3a6769b8d34eb41bf802527f\",\"license\":\"MIT\"},\"contracts/FaucetMon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ncontract FaucetMon {\\n    address public owner;\\n    address public allowedCaller;\\n\\n    event BalanceFunded(address indexed funder, uint256 amount);\\n    event BalanceWithdrawn(address indexed owner, uint256 amount);\\n    event FaucetUsed(address indexed recipient, uint256 amount);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not the contract owner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function setAllowedCaller(address _caller) external onlyOwner {\\n        allowedCaller = _caller;\\n    }\\n\\n    function faucet(address to, uint256 amount) external {\\n        require(msg.sender == allowedCaller, \\\"Caller not set\\\");\\n        require(address(this).balance >= amount, \\\"Not enough balance\\\");\\n        payable(to).transfer(amount);\\n        emit FaucetUsed(to, amount);\\n    }\\n\\n    // Function to fund the faucet balance\\n    function fundFaucet() external payable {\\n        require(msg.value > 0, \\\"Must send native token to fund the faucet\\\");\\n        emit BalanceFunded(msg.sender, msg.value);\\n    }\\n\\n    // Function to withdraw the faucet balance (only owner)\\n    function withdrawBalance(uint256 amount) external onlyOwner {\\n        require(address(this).balance >= amount, \\\"Insufficient balance in the faucet\\\");\\n        payable(owner).transfer(amount);\\n        emit BalanceWithdrawn(owner, amount);\\n    }\\n\\n    // Allow the contract to receive Ether\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x7600cd284fa56438b2f5f43a9a5b711481fef4dfc0d5945c097cb4c9f99187ab\",\"license\":\"MIT\"},\"contracts/FoodNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FoodNFT is ERC721URIStorage, Ownable {\\n    uint256 private _tokenIds;\\n\\n    mapping(address => uint256[]) public myFoods;\\n\\n    address public gameContract;\\n\\n    event FoodBurned(uint256 indexed tokenId, address indexed owner, address indexed burner, uint256 timestamp);\\n    event FoodMinted(address indexed to, uint256 indexed tokenId, string tokenURI);\\n\\n    constructor() ERC721(\\\"Hamburger\\\", \\\"HAM\\\") Ownable(msg.sender) {\\n    \\n    }\\n\\n    function mintFood(address _to, string memory _tokenURI_) public returns (uint256) {\\n        require(msg.sender == gameContract, \\\"Only game contract can mint\\\");\\n\\n        uint256 newItemId = _tokenIds;\\n        _mint(_to, newItemId);\\n        _setTokenURI(newItemId, _tokenURI_);\\n\\n        _tokenIds++;\\n        myFoods[_to].push(newItemId);\\n        \\n        emit FoodMinted(_to, newItemId, _tokenURI_);\\n        return newItemId;\\n    }\\n\\n    function burnFood(uint256 tokenId) external {\\n        require(\\n            ownerOf(tokenId) == msg.sender ||\\n                getApproved(tokenId) == msg.sender ||\\n                isApprovedForAll(ownerOf(tokenId), msg.sender),\\n            \\\"Not owner nor approved\\\"\\n        );\\n\\n        address owner = ownerOf(tokenId);\\n\\n        emit FoodBurned(tokenId, owner, msg.sender, block.timestamp);\\n\\n        _burn(tokenId);\\n\\n        uint256[] storage foods = myFoods[owner];\\n        for (uint256 i = 0; i < foods.length; i++) {\\n            if (foods[i] == tokenId) {\\n                foods[i] = foods[foods.length - 1];\\n                foods.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function burnFoodBatch(address _owner, uint256[] calldata tokenIds) external {\\n        require(tokenIds.length > 0, \\\"No tokenIds provided\\\");\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            require(\\n                ownerOf(tokenId) == msg.sender ||\\n                    getApproved(tokenId) == msg.sender ||\\n                    isApprovedForAll(ownerOf(tokenId), msg.sender),\\n                \\\"Not owner nor approved\\\"\\n            );\\n\\n            require(ownerOf(tokenId) == _owner, \\\"Not token owner\\\");\\n\\n            emit FoodBurned(tokenId, _owner, msg.sender, block.timestamp);\\n\\n            _burn(tokenId);\\n\\n            uint256[] storage foods = myFoods[_owner];\\n            for (uint256 j = 0; j < foods.length; j++) {\\n                if (foods[j] == tokenId) {\\n                    foods[j] = foods[foods.length - 1];\\n                    foods.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getMyFoods(address _owner) public view returns (uint256[] memory) {\\n        return myFoods[_owner];\\n    }\\n\\n    function setGameContract(address _gameContract) external onlyOwner {\\n        gameContract = _gameContract;\\n    }\\n}\\n\",\"keccak256\":\"0x886bdb4714d59320660ba4787435c821eefaf6ce098e2232f66ec2f881a6c078\",\"license\":\"MIT\"},\"contracts/FoodScramble.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"./ERC6551Registry.sol\\\";\\nimport \\\"./BreadToken.sol\\\";\\nimport \\\"./MeatToken.sol\\\";\\nimport \\\"./LettuceToken.sol\\\";\\nimport \\\"./TomatoToken.sol\\\";\\nimport \\\"./ChefNFT.sol\\\";\\nimport \\\"./FoodNFT.sol\\\";\\nimport \\\"./FaucetMon.sol\\\";\\nimport \\\"./interfaces/IPaymentGateway.sol\\\";\\n\\ncontract FoodScramble {\\n    ERC6551Registry public registry;\\n    BreadToken public bread;\\n    MeatToken public meat;\\n    LettuceToken public lettuce;\\n    TomatoToken public tomato;\\n    ChefNFT public chefNFT;\\n    FoodNFT public hamburger;\\n    FaucetMon public faucetMon;\\n    IPaymentGateway public paymentGateway;\\n\\n    address public immutable owner;\\n\\n    Box[] public grid;\\n    mapping(address => address) public tbaList;\\n    mapping(address => uint256) public player;\\n    mapping(address => bool) public canBuy;\\n    mapping(address => uint256) public rollCount;\\n    mapping(address => uint256) public faucetUsageCount;\\n    mapping(address => uint256) public lastFaucetUsage;\\n    mapping(address => uint256) public lastMintedSpecialBox;\\n    mapping(address => PlayerStats) public stats;\\n    mapping(address => mapping(IngredientType => uint256)) public inventory;\\n    mapping(address => string) public usernames;\\n    mapping(string => address) public nameToAddress;\\n    mapping(address => uint256[]) public travelHistory;\\n    mapping(address => bool) public isPlayerCreated;\\n\\n    struct Box {\\n        uint256 id;\\n        string typeGrid;\\n        uint256 ingredientType;\\n        uint256 numberOfPlayers;\\n    }\\n\\n    struct PlayerStats {\\n        uint256 totalRolls;\\n        uint256 ingredientsCollected;\\n        uint256 foodsMinted;\\n        uint256 lastActive;\\n        bool hasSpecialAccess;\\n    }\\n\\n    enum IngredientType {\\n        Bread,\\n        Meat,\\n        Lettuce,\\n        Tomato\\n    }\\n\\n    event PlayerMoved(address indexed player, uint256 newPosition, uint256 roll);\\n    event PlayerCreated(address indexed tba, uint256 gridIndex);\\n    event TokenBoundAccountCreated(address indexed eoa, address indexed tba, uint256 startPosition);\\n    event IngredientPurchased(address indexed player, uint256 ingredientType, uint256 position);\\n    event RailTraveled(address indexed player, uint256 fromPosition, uint256 toPosition);\\n    event HamburgerMinted(address indexed player, uint256 tokenId);\\n    event FaucetAmountUpdated(uint256 oldAmount, uint256 newAmount);\\n    event FaucetCooldownUpdated(uint256 oldCooldown, uint256 newCooldown);\\n\\n    uint256 public faucetAmount;\\n    uint256 public faucetCooldown;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not owner\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _owner,\\n        address _registryAddress,\\n        address _breadAddress,\\n        address _meatAddress,\\n        address _lettuceAddress,\\n        address _tomatoAddress,\\n        address _chefNFTAddress,\\n        address _hamburgerAddress,\\n        address payable _faucetMonAddress,\\n        address payable _paymentGatewayAddress\\n    ) {\\n        owner = _owner;\\n        registry = ERC6551Registry(_registryAddress);\\n        bread = BreadToken(_breadAddress);\\n        meat = MeatToken(_meatAddress);\\n        lettuce = LettuceToken(_lettuceAddress);\\n        tomato = TomatoToken(_tomatoAddress);\\n        chefNFT = ChefNFT(_chefNFTAddress);\\n        hamburger = FoodNFT(_hamburgerAddress);\\n        faucetMon = FaucetMon(payable(_faucetMonAddress));\\n        paymentGateway = IPaymentGateway(payable(_paymentGatewayAddress));\\n\\n        string[] memory gridTypes = new string[](20);\\n        uint256[] memory ingredientTypes = new uint256[](20);\\n\\n        gridTypes[0] = \\\"Stove\\\";\\n        ingredientTypes[0] = 99;\\n\\n        for (uint256 id = 1; id < 5; id++) {\\n            gridTypes[id] = \\\"Bread\\\";\\n            ingredientTypes[id] = 0;\\n        }\\n\\n        gridTypes[5] = \\\"Rail\\\";\\n        ingredientTypes[5] = 98;\\n\\n        for (uint256 id = 6; id < 10; id++) {\\n            gridTypes[id] = \\\"Meat\\\";\\n            ingredientTypes[id] = 1;\\n        }\\n\\n        gridTypes[10] = \\\"Stove\\\";\\n        ingredientTypes[10] = 99;\\n\\n        for (uint256 id = 11; id < 15; id++) {\\n            gridTypes[id] = \\\"Lettuce\\\";\\n            ingredientTypes[id] = 2;\\n        }\\n\\n        gridTypes[15] = \\\"Rail\\\";\\n        ingredientTypes[15] = 98;\\n\\n        for (uint256 id = 16; id < 20; id++) {\\n            gridTypes[id] = \\\"Tomato\\\";\\n            ingredientTypes[id] = 3;\\n        }\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            grid.push(Box(i, gridTypes[i], ingredientTypes[i], 0));\\n        }\\n    }\\n\\n    function getGrid() public view returns (Box[] memory) {\\n        return grid;\\n    }\\n\\n    function getMyFoods(address _owner) public view returns (uint256[] memory) {\\n        address tba = tbaList[_owner];\\n        return hamburger.getMyFoods(tba);\\n    }\\n\\n\\n    function createPlayer(address tba) internal {\\n        require(!isPlayerCreated[tba], \\\"Already registered\\\");\\n\\n        for (uint256 i = 0; i < grid.length; i++) {\\n            if (keccak256(abi.encodePacked(grid[i].typeGrid)) == keccak256(abi.encodePacked(\\\"Stove\\\"))) {\\n                player[tba] = i;\\n                grid[i].numberOfPlayers += 1;\\n                isPlayerCreated[tba] = true;\\n\\n                emit PlayerCreated(tba, i);\\n                return;\\n            }\\n        }\\n\\n        revert(\\\"No Stove grid found\\\");\\n    }\\n\\n    function createTokenBoundAccount(\\n        address _implementation,\\n        uint256 _chainId,\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        uint256 _salt,\\n        bytes calldata _initData\\n    ) external {\\n        // Validate token contract is ChefNFT\\n        require(_tokenContract == address(chefNFT), \\\"Must use ChefNFT contract\\\");\\n        \\n        // Check if ChefNFT exists and get owner\\n        address tokenOwner;\\n        try chefNFT.ownerOf(_tokenId) returns (address nftOwner) {\\n            tokenOwner = nftOwner;\\n        } catch {\\n            revert(\\\"ChefNFT does not exist\\\");\\n        }\\n        \\n        // Validate token owner is not zero address\\n        require(tokenOwner != address(0), \\\"Invalid ChefNFT owner\\\");\\n        \\n        // Check if user already has a TBA\\n        require(tbaList[msg.sender] == address(0), \\\"TBA already exists for this user\\\");\\n\\n        address newTBA = registry.createAccount(_implementation, _chainId, _tokenContract, _tokenId, _salt, _initData);\\n        tbaList[msg.sender] = newTBA;\\n\\n        createPlayer(newTBA);\\n        emit TokenBoundAccountCreated(msg.sender, newTBA, player[newTBA]);\\n    }\\n\\n    function movePlayer() external {\\n        address tba = tbaList[msg.sender];\\n        require(tba != address(0), \\\"TBA not found\\\");\\n\\n        uint256 nonce = rollCount[tba];\\n        uint8 roll = getRandomRoll(tba, nonce);\\n        rollCount[tba] = nonce + 1;\\n\\n        uint256 currentPos = player[tba];\\n        require(grid[currentPos].numberOfPlayers > 0, \\\"Invalid player count\\\");\\n        grid[currentPos].numberOfPlayers -= 1;\\n\\n        uint256 nextPos = currentPos + roll;\\n        if (nextPos >= 20) {\\n            nextPos = 0;\\n            grid[0].numberOfPlayers += 1;\\n        } else {\\n            grid[nextPos].numberOfPlayers += 1;\\n        }\\n\\n        player[tba] = nextPos;\\n\\n        if (grid[nextPos].ingredientType <= 3) {\\n            canBuy[tba] = true;\\n        }\\n\\n        emit PlayerMoved(tba, nextPos, roll);\\n    }\\n\\n    // Internal RNG function\\n    function getRandomRoll(address playerAddr, uint256 nonce) internal view returns (uint8) {\\n        bytes32 hash = keccak256(abi.encodePacked(blockhash(block.number - 1), playerAddr, nonce));\\n        return uint8(uint256(hash) % 6) + 1; // 1-6\\n    }\\n\\n    // Public function to get random roll for UI\\n    function getRandomRollForUI(address playerAddr, uint256 nonce) external view returns (uint8) {\\n        return getRandomRoll(playerAddr, nonce);\\n    }\\n\\n    /// @notice Owner bisa set biaya payment amount manual\\n    function setFaucetAmount(uint256 _newAmount) external onlyOwner {\\n        uint256 oldAmount = faucetAmount;\\n        faucetAmount = _newAmount;\\n        emit FaucetAmountUpdated(oldAmount, faucetAmount);\\n    }\\n\\n    function setFaucetCooldown(uint256 _newCooldown) external onlyOwner {\\n        uint256 oldCooldown = faucetCooldown;\\n        faucetCooldown = _newCooldown;\\n        emit FaucetCooldownUpdated(oldCooldown, faucetCooldown);\\n    }\\n\\n    function getFaucetAmount() external view returns (uint256) {\\n        return faucetAmount;\\n    }\\n\\n    function getFaucetCooldown() external view returns (uint256) {\\n        return faucetCooldown;\\n    }\\n\\n    /// @notice Baca saldo native token (ETH/MON) milik TBA user\\n    function getTbaBalance(address user) external view returns (uint256) {\\n        address tba = tbaList[user];\\n        require(tba != address(0), \\\"User has no TBA\\\");\\n        return tba.balance;\\n    }\\n\\n    /// @notice Baca saldo ERC20 milik TBA user\\n    function getTbaTokenBalance(address user, address token) external view returns (uint256) {\\n        address tba = tbaList[user];\\n        require(tba != address(0), \\\"User has no TBA\\\");\\n        return IERC20(token).balanceOf(tba);\\n    }\\n\\n    function buyIngredient() public {\\n        address tba = tbaList[msg.sender];\\n        require(tba != address(0), \\\"TBA not found\\\");\\n        require(canBuy[tba], \\\"already brought ingredient\\\");\\n\\n        uint256 currentPosition = player[tba];\\n        Box memory currentSpot = grid[currentPosition];\\n        require(currentSpot.ingredientType <= 3, \\\"Not an ingredient grid\\\");\\n\\n        // For gasless transactions, we don't process payment since Smart Account handles gas\\n        if (currentSpot.ingredientType == 0) bread.mint(tba, 1 * 10 ** 18);\\n        else if (currentSpot.ingredientType == 1) meat.mint(tba, 1 * 10 ** 18);\\n        else if (currentSpot.ingredientType == 2) lettuce.mint(tba, 1 * 10 ** 18);\\n        else if (currentSpot.ingredientType == 3) tomato.mint(tba, 1 * 10 ** 18);\\n\\n        canBuy[tba] = false;\\n\\n        // Update stats\\n        stats[tba].ingredientsCollected += 1;\\n        stats[tba].lastActive = block.timestamp;\\n\\n        emit IngredientPurchased(tba, currentSpot.ingredientType, currentPosition);\\n    }\\n\\n    function travelRail() public {\\n        address tba = tbaList[msg.sender];\\n        Box memory currentSpot = grid[player[tba]];\\n        require(currentSpot.ingredientType == 98, \\\"Go to Rail Grid\\\");\\n\\n        uint256 fromPosition = player[tba];\\n        uint256 toPosition;\\n\\n        grid[player[tba]].numberOfPlayers -= 1;\\n\\n        if (player[tba] == 5) {\\n            player[tba] = 15;\\n            toPosition = 15;\\n            grid[15].numberOfPlayers += 1;\\n        } else {\\n            player[tba] = 5;\\n            toPosition = 5;\\n            grid[5].numberOfPlayers += 1;\\n        }\\n\\n        emit RailTraveled(tba, fromPosition, toPosition);\\n    }\\n\\n    // Add helper function to check if position allows buying\\n    function canBuyAtPosition(uint256 position) public view returns (bool) {\\n        if (position >= grid.length) return false;\\n        return grid[position].ingredientType <= 3;\\n    }\\n\\n    // Add function to get ingredient type at position\\n    function getIngredientTypeAtPosition(uint256 position) public view returns (uint256) {\\n        require(position < grid.length, \\\"Invalid position\\\");\\n        return grid[position].ingredientType;\\n    }\\n\\n    function mintFoodNFT() public {\\n        address tba = tbaList[msg.sender];\\n        // require(bread.balanceOf[tba] > 0, \\\"You need more bread\\\");\\n        // require(meat.balanceOf[tba] > 0, \\\"You need more meat\\\");\\n        // require(lettuce.balanceOf[tba] > 0, \\\"You need more lettuce\\\");\\n        // require(tomato.balanceOf[tba] > 0, \\\"You need more tomato\\\");\\n\\n        bread.burn(tba, 1 * 10 ** 18);\\n        meat.burn(tba, 1 * 10 ** 18);\\n        lettuce.burn(tba, 1 * 10 ** 18);\\n        tomato.burn(tba, 1 * 10 ** 18);\\n\\n        uint256 tokenId = hamburger.mintFood(tba, \\\"hamburger\\\");\\n\\n        emit HamburgerMinted(tba, tokenId);\\n    }\\n\\n    function useFaucetMon() public {\\n        address tba = tbaList[msg.sender];\\n        uint256 playerPosition = player[tba];\\n        require(\\n            keccak256(abi.encodePacked(grid[playerPosition].typeGrid)) == keccak256(abi.encodePacked(\\\"Stove\\\")),\\n            \\\"must on stove to use faucet.\\\"\\n        );\\n\\n        uint256 currentTime = block.timestamp;\\n        require(currentTime >= lastFaucetUsage[msg.sender] + faucetCooldown, \\\"Faucet already used. Please wait.\\\");\\n\\n        lastFaucetUsage[msg.sender] = currentTime;\\n\\n        // Panggil kontrak FaucetMon untuk kirim ETH\\n        faucetMon.faucet(msg.sender, faucetAmount);\\n    }\\n\\n    // menyimpan TBA user\\n    function setTBA(address user, address tba) external {\\n        // validasi\\n        tbaList[user] = tba;\\n    }\\n\\n    function accountReady(address user) public view returns (bool) {\\n        return tbaList[user] != address(0);\\n    }\\n\\n    function logTravel(uint256 index) internal {\\n        travelHistory[msg.sender].push(index);\\n        stats[msg.sender].lastActive = block.timestamp;\\n    }\\n\\n    function setUsername(string calldata name) public {\\n        require(bytes(usernames[msg.sender]).length == 0, \\\"Username already set\\\");\\n        usernames[msg.sender] = name;\\n        nameToAddress[name] = msg.sender;\\n    }\\n\\n    function burnOldIngredients() public {\\n        address tba = tbaList[msg.sender];\\n        bread.burn(tba, 1 ether);\\n        meat.burn(tba, 1 ether);\\n        lettuce.burn(tba, 1 ether);\\n        tomato.burn(tba, 1 ether);\\n    }\\n\\n    function resetPlayerProgress(address playerAddr) public {\\n        require(msg.sender == owner, \\\"Only owner can reset\\\");\\n        delete stats[playerAddr];\\n        delete travelHistory[playerAddr];\\n\\n        // Determine the number of IngredientType values\\n        uint256 ingredientCount = uint256(IngredientType.Tomato) + 1;\\n\\n        for (uint256 i = 0; i < ingredientCount; i++) {\\n            inventory[playerAddr][IngredientType(i)] = 0;\\n        }\\n    }\\n\\n    // ================== onlyOwner ==================\\n    function faucets() public onlyOwner {\\n        address tba = tbaList[msg.sender];\\n\\n        // for testing\\n        bread.mint(tba, 1 * 10 ** 18);\\n        meat.mint(tba, 1 * 10 ** 18);\\n        lettuce.mint(tba, 1 * 10 ** 18);\\n        tomato.mint(tba, 1 * 10 ** 18);\\n    }\\n}\\n\",\"keccak256\":\"0x707539bf57a9762ca8986b9807f162df7be90928bdd10280f62807f931fec3ae\",\"license\":\"MIT\"},\"contracts/LettuceToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LettuceToken is ERC20, Ownable {\\n    address public gameContract;\\n\\n    constructor() ERC20(\\\"Lettuce\\\", \\\"LT\\\") Ownable(msg.sender) {}\\n\\n    function setGameContract(address _gameContract) external onlyOwner {\\n        gameContract = _gameContract;\\n    }\\n\\n    /// @notice Mint token Lettuce\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == gameContract, \\\"Only game contract can mint\\\");\\n\\n        // mint token ke user\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc5cd88044d7b1399f4f29702cdbfc66b860bbc88ef8a1c89a7726a9575d74c4c\",\"license\":\"MIT\"},\"contracts/MeatToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MeatToken is ERC20, Ownable {\\n    address public gameContract;\\n\\n    constructor() ERC20(\\\"Meat\\\", \\\"MT\\\") Ownable(msg.sender) {}\\n\\n    function setGameContract(address _gameContract) external onlyOwner {\\n        gameContract = _gameContract;\\n    }\\n\\n    /// @notice Mint token Meat\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == gameContract, \\\"Only game contract can mint\\\");\\n\\n        // mint token ke user\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3ce65e200a9ec361fa809deaac21efee75a267ca1a9f947e229560fbd63b2019\",\"license\":\"MIT\"},\"contracts/TomatoToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract TomatoToken is ERC20, Ownable {\\n    address public gameContract;\\n\\n    constructor() ERC20(\\\"Tomato\\\", \\\"TM\\\") Ownable(msg.sender) {}\\n\\n    function setGameContract(address _gameContract) external onlyOwner {\\n        gameContract = _gameContract;\\n    }\\n\\n    /// @notice Mint token Tomato\\n    function mint(address account, uint256 amount) external {\\n        require(msg.sender == gameContract, \\\"Only game contract can mint\\\");\\n\\n        // mint token ke user\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcde239a6b16c19df4b1b512353fb375cc30d52caeb7a7e0b3da0fe8605bb23ca\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IPaymentGateway {\\n    /**\\n     * @notice Terima pembayaran dari kontrak lain\\n     * @dev Harus dipanggil dengan msg.value > 0\\n     */\\n    function processPayment() external payable;\\n}\\n\",\"keccak256\":\"0x4cbe1de48a5bfee41b0174117d719b7a01d1f0f0a5db8a5a8ded2236f9c9ace1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620037a0380380620037a083398101604081905262000034916200057f565b6001600160a01b038a8116608052600080546001600160a01b03199081168c84161782556001805482168c85161790556002805482168b85161790556003805482168a851617905560048054821689851617905560058054821688851617905560068054821687851617905560078054821686851617905560088054909116928416929092179091556014604051908082528060200260200182016040528015620000f457816020015b6060815260200190600190039081620000de5790505b506040805160148082526102a082019092529192506000919060208201610280803683370190505090506040518060400160405280600581526020016453746f766560d81b815250826000815181106200015257620001526200067e565b60200260200101819052506063816000815181106200017557620001756200067e565b602090810291909101015260015b6005811015620001f65760405180604001604052806005815260200164109c99585960da1b815250838281518110620001c057620001c06200067e565b60200260200101819052506000828281518110620001e257620001e26200067e565b602090810291909101015260010162000183565b506040518060400160405280600481526020016314985a5b60e21b815250826005815181106200022a576200022a6200067e565b60200260200101819052506062816005815181106200024d576200024d6200067e565b602090810291909101015260065b600a811015620002cd57604051806040016040528060048152602001631359585d60e21b8152508382815181106200029757620002976200067e565b60200260200101819052506001828281518110620002b957620002b96200067e565b60209081029190910101526001016200025b565b506040518060400160405280600581526020016453746f766560d81b81525082600a815181106200030257620003026200067e565b6020026020010181905250606381600a815181106200032557620003256200067e565b6020908102919091010152600b5b600f811015620003a857604051806040016040528060078152602001664c65747475636560c81b8152508382815181106200037257620003726200067e565b602002602001018190525060028282815181106200039457620003946200067e565b602090810291909101015260010162000333565b506040518060400160405280600481526020016314985a5b60e21b81525082600f81518110620003dc57620003dc6200067e565b6020026020010181905250606281600f81518110620003ff57620003ff6200067e565b602090810291909101015260105b6014811015620004815760405180604001604052806006815260200165546f6d61746f60d01b8152508382815181106200044b576200044b6200067e565b602002602001018190525060038282815181106200046d576200046d6200067e565b60209081029190910101526001016200040d565b5060005b6014811015620005415760096040518060800160405280838152602001858481518110620004b757620004b76200067e565b60200260200101518152602001848481518110620004d957620004d96200067e565b60209081029190910181015182526000918101829052835460018181018655948352918190208351600490930201918255820151919290919082019062000521908262000725565b506040820151600282015560609091015160039091015560010162000485565b50505050505050505050505050620007f1565b6001600160a01b03811681146200056a57600080fd5b50565b80516200057a8162000554565b919050565b6000806000806000806000806000806101408b8d031215620005a057600080fd5b8a51620005ad8162000554565b60208c0151909a50620005c08162000554565b60408c0151909950620005d38162000554565b60608c0151909850620005e68162000554565b60808c0151909750620005f98162000554565b60a08c01519096506200060c8162000554565b60c08c01519095506200061f8162000554565b60e08c0151909450620006328162000554565b6101008c0151909350620006468162000554565b9150620006576101208c016200056d565b90509295989b9194979a5092959850565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680620006a957607f821691505b602082108103620006ca57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000720576000816000526020600020601f850160051c81016020861015620006fb5750805b601f850160051c820191505b818110156200071c5782815560010162000707565b5050505b505050565b81516001600160401b0381111562000741576200074162000668565b620007598162000752845462000694565b84620006d0565b602080601f831160018114620007915760008415620007785750858301515b600019600386901b1c1916600185901b1785556200071c565b600085815260208120601f198616915b82811015620007c257888601518255948401946001909101908401620007a1565b5085821015620007e15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051612f7762000829600039600081816105e501528181610d150152818161169101528181611aa50152611ee80152612f776000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063862942e111610182578063bc1cb46b116100e9578063d476f6d3116100a2578063ee91877c1161007c578063ee91877c1461075d578063f13e76cd1461077d578063ffce975614610790578063fff40ce1146107a357600080fd5b8063d476f6d3146106fa578063df7af9e01461071f578063ed59313a1461074a57600080fd5b8063bc1cb46b14610691578063bfffbe5b14610699578063c3ce559b146106ac578063ca2169d4146106cc578063cfa62473146106df578063cfc162bb146106f257600080fd5b80639c2814301161013b5780639c2814301461061a5780639d548b1314610623578063a1d27d7014610636578063a9e31a6e1461063e578063b111157414610651578063b89e8d0e1461067157600080fd5b8063862942e1146105485780638761bb8f1461055057806389fdfb6d146105635780638bcdcbf3146105765780638da5cb5b146105e0578063913592041461060757600080fd5b806351d2cc8f1161022657806374dc0947116101df57806374dc0947146104eb57806379ac7b86146104f35780637b103999146105065780637e36320b146105195780637e969f571461052257806381d2fd9c1461053557600080fd5b806351d2cc8f1461045f5780635284b1f414610482578063582121851461048c578063613ab3bd146104945780636ec6837d146104a757806374151ee2146104e357600080fd5b806336ece0711161027857806336ece071146103ba57806337afb228146103cd5780634410734b146103fb578063464ac9c1146104245780634c54e1b51461042c57806351cc82701461044c57600080fd5b806307faa7f5146102c05780630808f3eb146102f057806308d88aad146103235780630c4b524c14610357578063134000c014610377578063304fa5e11461038c575b600080fd5b6002546102d3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103136102fe366004612742565b600c6020526000908152604090205460ff1681565b60405190151581526020016102e7565b6102d36103313660046127a6565b80516020818301810180516014825292820191909301209152546001600160a01b031681565b61036a610365366004612742565b6107c6565b6040516102e7919061283b565b61037f610857565b6040516102e791906128c5565b61031361039a366004612742565b6001600160a01b039081166000908152600a602052604090205416151590565b6005546102d3906001600160a01b031681565b6103ed6103db366004612742565b600e6020526000908152604090205481565b6040519081526020016102e7565b6102d3610409366004612742565b600a602052600090815260409020546001600160a01b031681565b6018546103ed565b6103ed61043a366004612742565b600b6020526000908152604090205481565b6103ed61045a366004612952565b610966565b61047261046d36600461297e565b610997565b6040516102e79493929190612997565b61048a610a5b565b005b61048a610d0a565b6103ed6104a2366004612742565b610f19565b61048a6104b53660046129c3565b6001600160a01b039182166000908152600a6020526040902080546001600160a01b03191691909216179055565b61048a610f85565b61048a6113b4565b61048a610501366004612742565b611686565b6000546102d3906001600160a01b031681565b6103ed60185481565b61048a610530366004612a45565b6117c9565b61048a61054336600461297e565b611a9a565b61048a611b28565b61031361055e36600461297e565b611dc9565b6103ed6105713660046129c3565b611e0d565b6105b6610584366004612742565b601160205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a0016102e7565b6102d37f000000000000000000000000000000000000000000000000000000000000000081565b61048a61061536600461297e565b611edd565b6103ed60175481565b6006546102d3906001600160a01b031681565b61048a611f63565b6001546102d3906001600160a01b031681565b6103ed61065f366004612742565b600d6020526000908152604090205481565b6103ed61067f366004612742565b60106020526000908152604090205481565b6017546103ed565b6003546102d3906001600160a01b031681565b6103ed6106ba366004612742565b600f6020526000908152604090205481565b6008546102d3906001600160a01b031681565b6007546102d3906001600160a01b031681565b61048a612144565b61070d610708366004612952565b6122d6565b60405160ff90911681526020016102e7565b6103ed61072d366004612acb565b601260209081526000928352604080842090915290825290205481565b61048a610758366004612afd565b6122e2565b61077061076b366004612742565b6123a3565b6040516102e79190612b3f565b6103ed61078b36600461297e565b61243d565b6004546102d3906001600160a01b031681565b6103136107b1366004612742565b60166020526000908152604090205460ff1681565b6001600160a01b038181166000908152600a602052604090819020546006549151630312d49360e21b81529083166004820181905260609390921690630c4b524c90602401600060405180830381865afa158015610828573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108509190810190612b52565b9392505050565b60606009805480602002602001604051908101604052809291908181526020016000905b8282101561095d5783829060005260206000209060040201604051806080016040529081600082015481526020016001820180546108b890612bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546108e490612bf8565b80156109315780601f1061090657610100808354040283529160200191610931565b820191906000526020600020905b81548152906001019060200180831161091457829003601f168201915b50505050508152602001600282015481526020016003820154815250508152602001906001019061087b565b50505050905090565b6015602052816000526040600020818154811061098257600080fd5b90600052602060002001600091509150505481565b600981815481106109a757600080fd5b600091825260209091206004909102018054600182018054919350906109cc90612bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890612bf8565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b5050505050908060020154908060030154905084565b336000908152600a60205260409020546001600160a01b031680610ab65760405162461bcd60e51b815260206004820152600d60248201526c151090481b9bdd08199bdd5b99609a1b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600d602052604081205490610ada83836124b0565b9050610ae7826001612c48565b6001600160a01b0384166000908152600d6020908152604080832093909355600b9052908120546009805491929183908110610b2557610b25612c5b565b90600052602060002090600402016003015411610b7b5760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081c1b185e595c8818dbdd5b9d60621b6044820152606401610aad565b600160098281548110610b9057610b90612c5b565b90600052602060002090600402016003016000828254610bb09190612c71565b9091555060009050610bc560ff841683612c48565b905060148110610c14576000905060016009600081548110610be957610be9612c5b565b90600052602060002090600402016003016000828254610c099190612c48565b90915550610c4f9050565b600160098281548110610c2957610c29612c5b565b90600052602060002090600402016003016000828254610c499190612c48565b90915550505b6001600160a01b0385166000908152600b60205260409020819055600980546003919083908110610c8257610c82612c5b565b90600052602060002090600402016002015411610cbd576001600160a01b0385166000908152600c60205260409020805460ff191660011790555b6040805182815260ff851660208201526001600160a01b038716917f717c71b7226e13a6b97d602aded90ba7f6af22014b5c12d972f442a87cd2d50b910160405180910390a25050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d525760405162461bcd60e51b8152600401610aad90612c84565b336000908152600a6020526040908190205460015491516340c10f1960e01b81526001600160a01b0391821692909116906340c10f1990610da1908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015610dbb57600080fd5b505af1158015610dcf573d6000803e3d6000fd5b50506002546040516340c10f1960e01b81526001600160a01b0390911692506340c10f199150610e0d908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015610e2757600080fd5b505af1158015610e3b573d6000803e3d6000fd5b50506003546040516340c10f1960e01b81526001600160a01b0390911692506340c10f199150610e79908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015610e9357600080fd5b505af1158015610ea7573d6000803e3d6000fd5b5050600480546040516340c10f1960e01b81526001600160a01b0390911693506340c10f199250610ee4918591670de0b6b3a76400009101612ca7565b600060405180830381600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b5050505050565b6001600160a01b038082166000908152600a602052604081205490911680610f755760405162461bcd60e51b815260206004820152600f60248201526e5573657220686173206e6f2054424160881b6044820152606401610aad565b6001600160a01b03163192915050565b336000908152600a60205260409020546001600160a01b031680610fdb5760405162461bcd60e51b815260206004820152600d60248201526c151090481b9bdd08199bdd5b99609a1b6044820152606401610aad565b6001600160a01b0381166000908152600c602052604090205460ff166110435760405162461bcd60e51b815260206004820152601a60248201527f616c72656164792062726f7567687420696e6772656469656e740000000000006044820152606401610aad565b6001600160a01b0381166000908152600b6020526040812054600980549192918390811061107357611073612c5b565b9060005260206000209060040201604051806080016040529081600082015481526020016001820180546110a690612bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546110d290612bf8565b801561111f5780601f106110f45761010080835404028352916020019161111f565b820191906000526020600020905b81548152906001019060200180831161110257829003601f168201915b5050505050815260200160028201548152602001600382015481525050905060038160400151111561118c5760405162461bcd60e51b8152602060048201526016602482015275139bdd08185b881a5b99dc99591a595b9d0819dc9a5960521b6044820152606401610aad565b8060400151600003611209576001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111d2908690670de0b6b3a764000090600401612ca7565b600060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b5050505061130d565b806040015160010361124f576002546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111d2908690670de0b6b3a764000090600401612ca7565b8060400151600203611295576003546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111d2908690670de0b6b3a764000090600401612ca7565b806040015160030361130d57600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f19916112da918791670de0b6b3a76400009101612ca7565b600060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050505b6001600160a01b0383166000908152600c60209081526040808320805460ff1916905560119091528120600190810180549192909161134d908490612c48565b90915550506001600160a01b038316600081815260116020908152604091829020426003909101558382015182519081529081018590527fc454cc46861f35dc62864de3907f5a3b6f1a5d899112b62b263da327044477f0910160405180910390a2505050565b336000908152600a60209081526040808320546001600160a01b0316808452600b9092528220546009805492939290919081106113f3576113f3612c5b565b90600052602060002090600402016040518060800160405290816000820154815260200160018201805461142690612bf8565b80601f016020809104026020016040519081016040528092919081815260200182805461145290612bf8565b801561149f5780601f106114745761010080835404028352916020019161149f565b820191906000526020600020905b81548152906001019060200180831161148257829003601f168201915b5050505050815260200160028201548152602001600382015481525050905080604001516062146115045760405162461bcd60e51b815260206004820152600f60248201526e11dbc81d1bc814985a5b0811dc9a59608a1b6044820152606401610aad565b6001600160a01b0382166000908152600b602052604081205460098054919291600191908490811061153857611538612c5b565b906000526020600020906004020160030160008282546115589190612c71565b90915550506001600160a01b0384166000908152600b60205260409020546005036115df57506001600160a01b0383166000908152600b60205260409020600f908190556009805460019190839081106115b4576115b4612c5b565b906000526020600020906004020160030160008282546115d49190612c48565b9091555061163c9050565b506001600160a01b0383166000908152600b6020526040902060059081905560098054600191908390811061161657611616612c5b565b906000526020600020906004020160030160008282546116369190612c48565b90915550505b60408051838152602081018390526001600160a01b038616917f68bbed7339862df6a61f6f40ed9ac31fbdfcc556e276e3bd05649ed39a47e40f910160405180910390a250505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116f55760405162461bcd60e51b815260206004820152601460248201527313db9b1e481bdddb995c8818d85b881c995cd95d60621b6044820152606401610aad565b6001600160a01b0381166000908152601160209081526040808320838155600181018490556002810184905560038101849055600401805460ff1916905560159091528120611743916126f3565b600061175160036001612c48565b905060005b818110156117c4576001600160a01b03831660009081526012602052604081208183600381111561178957611789612cc0565b600381111561179a5761179a612cc0565b60038111156117ab576117ab612cc0565b8152602081019190915260400160002055600101611756565b505050565b6005546001600160a01b038681169116146118265760405162461bcd60e51b815260206004820152601960248201527f4d7573742075736520436865664e465420636f6e7472616374000000000000006044820152606401610aad565b6005546040516331a9108f60e11b8152600481018690526000916001600160a01b031690636352211e90602401602060405180830381865afa92505050801561188c575060408051601f3d908101601f1916820190925261188991810190612cd6565b60015b6118d15760405162461bcd60e51b815260206004820152601660248201527510da195993919508191bd95cc81b9bdd08195e1a5cdd60521b6044820152606401610aad565b90506001600160a01b0381166119215760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b21021b432b327232a1037bbb732b960591b6044820152606401610aad565b336000908152600a60205260409020546001600160a01b0316156119875760405162461bcd60e51b815260206004820181905260248201527f54424120616c72656164792065786973747320666f72207468697320757365726044820152606401610aad565b6000805460405163da7323b360e01b81526001600160a01b039091169063da7323b3906119c4908c908c908c908c908c908c908c90600401612cf3565b6020604051808303816000875af11580156119e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a079190612cd6565b336000908152600a6020526040902080546001600160a01b0319166001600160a01b0383161790559050611a3a8161251b565b6001600160a01b0381166000818152600b60205260409081902054905133917f9f8cecf4cfce26b777a90d819f810f91f1dd81d0a7e1a3fe6bb75922fcde41cf91611a8791815260200190565b60405180910390a3505050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ae25760405162461bcd60e51b8152600401610aad90612c84565b601780549082905560408051828152602081018490527fd5c900865c3981f605a346229a46710bb52560a90e461926816f770cb1b4549b91015b60405180910390a15050565b336000908152600a602052604090819020546001549151632770a7eb60e21b81526001600160a01b039182169290911690639dc29fac90611b77908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015611b9157600080fd5b505af1158015611ba5573d6000803e3d6000fd5b5050600254604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac9150611be3908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015611bfd57600080fd5b505af1158015611c11573d6000803e3d6000fd5b5050600354604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac9150611c4f908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015611c6957600080fd5b505af1158015611c7d573d6000803e3d6000fd5b505060048054604051632770a7eb60e21b81526001600160a01b039091169350639dc29fac9250611cba918591670de0b6b3a76400009101612ca7565b600060405180830381600087803b158015611cd457600080fd5b505af1158015611ce8573d6000803e3d6000fd5b505060065460408051636a436e8960e01b81526001600160a01b038681166004830152602482019290925260096044820152683430b6b13ab933b2b960b91b60648201526000945091169150636a436e89906084016020604051808303816000875af1158015611d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d809190612d57565b9050816001600160a01b03167fb9a2c905ecea5721a4f3f3b62973d7f758781e6b5affdfd5bb6a2a0cc28ba3d482604051611dbd91815260200190565b60405180910390a25050565b6009546000908210611ddd57506000919050565b600360098381548110611df257611df2612c5b565b90600052602060002090600402016002015411159050919050565b6001600160a01b038083166000908152600a602052604081205490911680611e695760405162461bcd60e51b815260206004820152600f60248201526e5573657220686173206e6f2054424160881b6044820152606401610aad565b6040516370a0823160e01b81526001600160a01b0382811660048301528416906370a0823190602401602060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190612d57565b9150505b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f255760405162461bcd60e51b8152600401610aad90612c84565b601880549082905560408051828152602081018490527f8ddcae6c900e31a96ffcf2f769ac65523cbe587b3a15d3586fec3a28fbc6b1389101611b1c565b336000908152600a60209081526040808320546001600160a01b0316808452600b8352928190205490519091611fa591016453746f766560d81b815260050190565b6040516020818303038152906040528051906020012060098281548110611fce57611fce612c5b565b9060005260206000209060040201600101604051602001611fef9190612d70565b60405160208183030381529060405280519060200120146120525760405162461bcd60e51b815260206004820152601c60248201527f6d757374206f6e2073746f766520746f20757365206661756365742e000000006044820152606401610aad565b601854336000908152600f6020526040902054429161207091612c48565b8110156120c95760405162461bcd60e51b815260206004820152602160248201527f46617563657420616c726561647920757365642e20506c6561736520776169746044820152601760f91b6064820152608401610aad565b336000818152600f6020526040908190208390556007546017549151633dab615960e11b81526001600160a01b0390911692637b56c2b29261210d92600401612ca7565b600060405180830381600087803b15801561212757600080fd5b505af115801561213b573d6000803e3d6000fd5b50505050505050565b336000908152600a602052604090819020546001549151632770a7eb60e21b81526001600160a01b039182169290911690639dc29fac90612193908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b1580156121ad57600080fd5b505af11580156121c1573d6000803e3d6000fd5b5050600254604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac91506121ff908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b15801561221957600080fd5b505af115801561222d573d6000803e3d6000fd5b5050600354604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac915061226b908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b15801561228557600080fd5b505af1158015612299573d6000803e3d6000fd5b505060048054604051632770a7eb60e21b81526001600160a01b039091169350639dc29fac9250610ee4918591670de0b6b3a76400009101612ca7565b600061085083836124b0565b33600090815260136020526040902080546122fc90612bf8565b1590506123425760405162461bcd60e51b8152602060048201526014602482015273155cd95c9b985b5948185b1c9958591e481cd95d60621b6044820152606401610aad565b33600090815260136020526040902061235c828483612e36565b503360148383604051612370929190612ef6565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b601360205260009081526040902080546123bc90612bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546123e890612bf8565b80156124355780601f1061240a57610100808354040283529160200191612435565b820191906000526020600020905b81548152906001019060200180831161241857829003601f168201915b505050505081565b60095460009082106124845760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103837b9b4ba34b7b760811b6044820152606401610aad565b6009828154811061249757612497612c5b565b9060005260206000209060040201600201549050919050565b6000806124be600143612c71565b60408051914060208301526bffffffffffffffffffffffff19606087901b16908201526054810184905260740160408051601f1981840301815291905280516020909101209050612510600682612f06565b611ed3906001612f28565b6001600160a01b03811660009081526016602052604090205460ff16156125795760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610aad565b60005b6009548110156126b4576040516453746f766560d81b602082015260250160405160208183030381529060405280519060200120600982815481106125c3576125c3612c5b565b90600052602060002090600402016001016040516020016125e49190612d70565b60405160208183030381529060405280519060200120036126ac576001600160a01b0382166000908152600b6020526040902081905560098054600191908390811061263257612632612c5b565b906000526020600020906004020160030160008282546126529190612c48565b90915550506001600160a01b03821660008181526016602052604090819020805460ff19166001179055517fb31ba5904c24da7a4eeed78a7e073540fbf64788e158b6f3f55fae6d475ced9590611dbd9084815260200190565b60010161257c565b5060405162461bcd60e51b8152602060048201526013602482015272139bc814dd1bdd994819dc9a5908199bdd5b99606a1b6044820152606401610aad565b50805460008255906000526020600020908101906127119190612714565b50565b5b808211156127295760008155600101612715565b5090565b6001600160a01b038116811461271157600080fd5b60006020828403121561275457600080fd5b81356108508161272d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561279e5761279e61275f565b604052919050565b600060208083850312156127b957600080fd5b823567ffffffffffffffff808211156127d157600080fd5b818501915085601f8301126127e557600080fd5b8135818111156127f7576127f761275f565b612809601f8201601f19168501612775565b9150808252868482850101111561281f57600080fd5b8084840185840137600090820190930192909252509392505050565b6020808252825182820181905260009190848201906040850190845b8181101561287357835183529284019291840191600101612857565b50909695505050505050565b6000815180845260005b818110156128a557602081850181015186830182015201612889565b506000602082860101526020601f19601f83011685010191505092915050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561294457603f19898403018552815160808151855288820151818a87015261291c8287018261287f565b838a0151878b01526060938401519390960192909252505093860193908601906001016128ee565b509098975050505050505050565b6000806040838503121561296557600080fd5b82356129708161272d565b946020939093013593505050565b60006020828403121561299057600080fd5b5035919050565b8481526080602082015260006129b0608083018661287f565b6040830194909452506060015292915050565b600080604083850312156129d657600080fd5b82356129e18161272d565b915060208301356129f18161272d565b809150509250929050565b60008083601f840112612a0e57600080fd5b50813567ffffffffffffffff811115612a2657600080fd5b602083019150836020828501011115612a3e57600080fd5b9250929050565b600080600080600080600060c0888a031215612a6057600080fd5b8735612a6b8161272d565b9650602088013595506040880135612a828161272d565b9450606088013593506080880135925060a088013567ffffffffffffffff811115612aac57600080fd5b612ab88a828b016129fc565b989b979a50959850939692959293505050565b60008060408385031215612ade57600080fd5b8235612ae98161272d565b91506020830135600481106129f157600080fd5b60008060208385031215612b1057600080fd5b823567ffffffffffffffff811115612b2757600080fd5b612b33858286016129fc565b90969095509350505050565b602081526000610850602083018461287f565b60006020808385031215612b6557600080fd5b825167ffffffffffffffff80821115612b7d57600080fd5b818501915085601f830112612b9157600080fd5b815181811115612ba357612ba361275f565b8060051b9150612bb4848301612775565b8181529183018401918481019088841115612bce57600080fd5b938501935b83851015612bec57845182529385019390850190612bd3565b98975050505050505050565b600181811c90821680612c0c57607f821691505b602082108103612c2c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611ed757611ed7612c32565b634e487b7160e01b600052603260045260246000fd5b81810381811115611ed757611ed7612c32565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215612ce857600080fd5b81516108508161272d565b6001600160a01b0388811682526020820188905286166040820152606081018590526080810184905260c060a0820181905281018290526000828460e0840137600060e0848401015260e0601f19601f850116830101905098975050505050505050565b600060208284031215612d6957600080fd5b5051919050565b6000808354612d7e81612bf8565b60018281168015612d965760018114612dab57612dda565b60ff1984168752821515830287019450612dda565b8760005260208060002060005b85811015612dd15781548a820152908401908201612db8565b50505082870194505b50929695505050505050565b601f8211156117c4576000816000526020600020601f850160051c81016020861015612e0f5750805b601f850160051c820191505b81811015612e2e57828155600101612e1b565b505050505050565b67ffffffffffffffff831115612e4e57612e4e61275f565b612e6283612e5c8354612bf8565b83612de6565b6000601f841160018114612e965760008515612e7e5750838201355b600019600387901b1c1916600186901b178355610f12565b600083815260209020601f19861690835b82811015612ec75786850135825560209485019460019092019101612ea7565b5086821015612ee45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b600082612f2357634e487b7160e01b600052601260045260246000fd5b500690565b60ff8181168382160190811115611ed757611ed7612c3256fea2646970667358221220515bcbf74b3990ae693ae0202f087356c81ca967869cd4e3bb9d53bf8c9bc21664736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063862942e111610182578063bc1cb46b116100e9578063d476f6d3116100a2578063ee91877c1161007c578063ee91877c1461075d578063f13e76cd1461077d578063ffce975614610790578063fff40ce1146107a357600080fd5b8063d476f6d3146106fa578063df7af9e01461071f578063ed59313a1461074a57600080fd5b8063bc1cb46b14610691578063bfffbe5b14610699578063c3ce559b146106ac578063ca2169d4146106cc578063cfa62473146106df578063cfc162bb146106f257600080fd5b80639c2814301161013b5780639c2814301461061a5780639d548b1314610623578063a1d27d7014610636578063a9e31a6e1461063e578063b111157414610651578063b89e8d0e1461067157600080fd5b8063862942e1146105485780638761bb8f1461055057806389fdfb6d146105635780638bcdcbf3146105765780638da5cb5b146105e0578063913592041461060757600080fd5b806351d2cc8f1161022657806374dc0947116101df57806374dc0947146104eb57806379ac7b86146104f35780637b103999146105065780637e36320b146105195780637e969f571461052257806381d2fd9c1461053557600080fd5b806351d2cc8f1461045f5780635284b1f414610482578063582121851461048c578063613ab3bd146104945780636ec6837d146104a757806374151ee2146104e357600080fd5b806336ece0711161027857806336ece071146103ba57806337afb228146103cd5780634410734b146103fb578063464ac9c1146104245780634c54e1b51461042c57806351cc82701461044c57600080fd5b806307faa7f5146102c05780630808f3eb146102f057806308d88aad146103235780630c4b524c14610357578063134000c014610377578063304fa5e11461038c575b600080fd5b6002546102d3906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103136102fe366004612742565b600c6020526000908152604090205460ff1681565b60405190151581526020016102e7565b6102d36103313660046127a6565b80516020818301810180516014825292820191909301209152546001600160a01b031681565b61036a610365366004612742565b6107c6565b6040516102e7919061283b565b61037f610857565b6040516102e791906128c5565b61031361039a366004612742565b6001600160a01b039081166000908152600a602052604090205416151590565b6005546102d3906001600160a01b031681565b6103ed6103db366004612742565b600e6020526000908152604090205481565b6040519081526020016102e7565b6102d3610409366004612742565b600a602052600090815260409020546001600160a01b031681565b6018546103ed565b6103ed61043a366004612742565b600b6020526000908152604090205481565b6103ed61045a366004612952565b610966565b61047261046d36600461297e565b610997565b6040516102e79493929190612997565b61048a610a5b565b005b61048a610d0a565b6103ed6104a2366004612742565b610f19565b61048a6104b53660046129c3565b6001600160a01b039182166000908152600a6020526040902080546001600160a01b03191691909216179055565b61048a610f85565b61048a6113b4565b61048a610501366004612742565b611686565b6000546102d3906001600160a01b031681565b6103ed60185481565b61048a610530366004612a45565b6117c9565b61048a61054336600461297e565b611a9a565b61048a611b28565b61031361055e36600461297e565b611dc9565b6103ed6105713660046129c3565b611e0d565b6105b6610584366004612742565b601160205260009081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a0016102e7565b6102d37f000000000000000000000000000000000000000000000000000000000000000081565b61048a61061536600461297e565b611edd565b6103ed60175481565b6006546102d3906001600160a01b031681565b61048a611f63565b6001546102d3906001600160a01b031681565b6103ed61065f366004612742565b600d6020526000908152604090205481565b6103ed61067f366004612742565b60106020526000908152604090205481565b6017546103ed565b6003546102d3906001600160a01b031681565b6103ed6106ba366004612742565b600f6020526000908152604090205481565b6008546102d3906001600160a01b031681565b6007546102d3906001600160a01b031681565b61048a612144565b61070d610708366004612952565b6122d6565b60405160ff90911681526020016102e7565b6103ed61072d366004612acb565b601260209081526000928352604080842090915290825290205481565b61048a610758366004612afd565b6122e2565b61077061076b366004612742565b6123a3565b6040516102e79190612b3f565b6103ed61078b36600461297e565b61243d565b6004546102d3906001600160a01b031681565b6103136107b1366004612742565b60166020526000908152604090205460ff1681565b6001600160a01b038181166000908152600a602052604090819020546006549151630312d49360e21b81529083166004820181905260609390921690630c4b524c90602401600060405180830381865afa158015610828573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108509190810190612b52565b9392505050565b60606009805480602002602001604051908101604052809291908181526020016000905b8282101561095d5783829060005260206000209060040201604051806080016040529081600082015481526020016001820180546108b890612bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546108e490612bf8565b80156109315780601f1061090657610100808354040283529160200191610931565b820191906000526020600020905b81548152906001019060200180831161091457829003601f168201915b50505050508152602001600282015481526020016003820154815250508152602001906001019061087b565b50505050905090565b6015602052816000526040600020818154811061098257600080fd5b90600052602060002001600091509150505481565b600981815481106109a757600080fd5b600091825260209091206004909102018054600182018054919350906109cc90612bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546109f890612bf8565b8015610a455780601f10610a1a57610100808354040283529160200191610a45565b820191906000526020600020905b815481529060010190602001808311610a2857829003601f168201915b5050505050908060020154908060030154905084565b336000908152600a60205260409020546001600160a01b031680610ab65760405162461bcd60e51b815260206004820152600d60248201526c151090481b9bdd08199bdd5b99609a1b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600d602052604081205490610ada83836124b0565b9050610ae7826001612c48565b6001600160a01b0384166000908152600d6020908152604080832093909355600b9052908120546009805491929183908110610b2557610b25612c5b565b90600052602060002090600402016003015411610b7b5760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081c1b185e595c8818dbdd5b9d60621b6044820152606401610aad565b600160098281548110610b9057610b90612c5b565b90600052602060002090600402016003016000828254610bb09190612c71565b9091555060009050610bc560ff841683612c48565b905060148110610c14576000905060016009600081548110610be957610be9612c5b565b90600052602060002090600402016003016000828254610c099190612c48565b90915550610c4f9050565b600160098281548110610c2957610c29612c5b565b90600052602060002090600402016003016000828254610c499190612c48565b90915550505b6001600160a01b0385166000908152600b60205260409020819055600980546003919083908110610c8257610c82612c5b565b90600052602060002090600402016002015411610cbd576001600160a01b0385166000908152600c60205260409020805460ff191660011790555b6040805182815260ff851660208201526001600160a01b038716917f717c71b7226e13a6b97d602aded90ba7f6af22014b5c12d972f442a87cd2d50b910160405180910390a25050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d525760405162461bcd60e51b8152600401610aad90612c84565b336000908152600a6020526040908190205460015491516340c10f1960e01b81526001600160a01b0391821692909116906340c10f1990610da1908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015610dbb57600080fd5b505af1158015610dcf573d6000803e3d6000fd5b50506002546040516340c10f1960e01b81526001600160a01b0390911692506340c10f199150610e0d908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015610e2757600080fd5b505af1158015610e3b573d6000803e3d6000fd5b50506003546040516340c10f1960e01b81526001600160a01b0390911692506340c10f199150610e79908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015610e9357600080fd5b505af1158015610ea7573d6000803e3d6000fd5b5050600480546040516340c10f1960e01b81526001600160a01b0390911693506340c10f199250610ee4918591670de0b6b3a76400009101612ca7565b600060405180830381600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b5050505050565b6001600160a01b038082166000908152600a602052604081205490911680610f755760405162461bcd60e51b815260206004820152600f60248201526e5573657220686173206e6f2054424160881b6044820152606401610aad565b6001600160a01b03163192915050565b336000908152600a60205260409020546001600160a01b031680610fdb5760405162461bcd60e51b815260206004820152600d60248201526c151090481b9bdd08199bdd5b99609a1b6044820152606401610aad565b6001600160a01b0381166000908152600c602052604090205460ff166110435760405162461bcd60e51b815260206004820152601a60248201527f616c72656164792062726f7567687420696e6772656469656e740000000000006044820152606401610aad565b6001600160a01b0381166000908152600b6020526040812054600980549192918390811061107357611073612c5b565b9060005260206000209060040201604051806080016040529081600082015481526020016001820180546110a690612bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546110d290612bf8565b801561111f5780601f106110f45761010080835404028352916020019161111f565b820191906000526020600020905b81548152906001019060200180831161110257829003601f168201915b5050505050815260200160028201548152602001600382015481525050905060038160400151111561118c5760405162461bcd60e51b8152602060048201526016602482015275139bdd08185b881a5b99dc99591a595b9d0819dc9a5960521b6044820152606401610aad565b8060400151600003611209576001546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111d2908690670de0b6b3a764000090600401612ca7565b600060405180830381600087803b1580156111ec57600080fd5b505af1158015611200573d6000803e3d6000fd5b5050505061130d565b806040015160010361124f576002546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111d2908690670de0b6b3a764000090600401612ca7565b8060400151600203611295576003546040516340c10f1960e01b81526001600160a01b03909116906340c10f19906111d2908690670de0b6b3a764000090600401612ca7565b806040015160030361130d57600480546040516340c10f1960e01b81526001600160a01b03909116916340c10f19916112da918791670de0b6b3a76400009101612ca7565b600060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050505b6001600160a01b0383166000908152600c60209081526040808320805460ff1916905560119091528120600190810180549192909161134d908490612c48565b90915550506001600160a01b038316600081815260116020908152604091829020426003909101558382015182519081529081018590527fc454cc46861f35dc62864de3907f5a3b6f1a5d899112b62b263da327044477f0910160405180910390a2505050565b336000908152600a60209081526040808320546001600160a01b0316808452600b9092528220546009805492939290919081106113f3576113f3612c5b565b90600052602060002090600402016040518060800160405290816000820154815260200160018201805461142690612bf8565b80601f016020809104026020016040519081016040528092919081815260200182805461145290612bf8565b801561149f5780601f106114745761010080835404028352916020019161149f565b820191906000526020600020905b81548152906001019060200180831161148257829003601f168201915b5050505050815260200160028201548152602001600382015481525050905080604001516062146115045760405162461bcd60e51b815260206004820152600f60248201526e11dbc81d1bc814985a5b0811dc9a59608a1b6044820152606401610aad565b6001600160a01b0382166000908152600b602052604081205460098054919291600191908490811061153857611538612c5b565b906000526020600020906004020160030160008282546115589190612c71565b90915550506001600160a01b0384166000908152600b60205260409020546005036115df57506001600160a01b0383166000908152600b60205260409020600f908190556009805460019190839081106115b4576115b4612c5b565b906000526020600020906004020160030160008282546115d49190612c48565b9091555061163c9050565b506001600160a01b0383166000908152600b6020526040902060059081905560098054600191908390811061161657611616612c5b565b906000526020600020906004020160030160008282546116369190612c48565b90915550505b60408051838152602081018390526001600160a01b038616917f68bbed7339862df6a61f6f40ed9ac31fbdfcc556e276e3bd05649ed39a47e40f910160405180910390a250505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116f55760405162461bcd60e51b815260206004820152601460248201527313db9b1e481bdddb995c8818d85b881c995cd95d60621b6044820152606401610aad565b6001600160a01b0381166000908152601160209081526040808320838155600181018490556002810184905560038101849055600401805460ff1916905560159091528120611743916126f3565b600061175160036001612c48565b905060005b818110156117c4576001600160a01b03831660009081526012602052604081208183600381111561178957611789612cc0565b600381111561179a5761179a612cc0565b60038111156117ab576117ab612cc0565b8152602081019190915260400160002055600101611756565b505050565b6005546001600160a01b038681169116146118265760405162461bcd60e51b815260206004820152601960248201527f4d7573742075736520436865664e465420636f6e7472616374000000000000006044820152606401610aad565b6005546040516331a9108f60e11b8152600481018690526000916001600160a01b031690636352211e90602401602060405180830381865afa92505050801561188c575060408051601f3d908101601f1916820190925261188991810190612cd6565b60015b6118d15760405162461bcd60e51b815260206004820152601660248201527510da195993919508191bd95cc81b9bdd08195e1a5cdd60521b6044820152606401610aad565b90506001600160a01b0381166119215760405162461bcd60e51b815260206004820152601560248201527424b73b30b634b21021b432b327232a1037bbb732b960591b6044820152606401610aad565b336000908152600a60205260409020546001600160a01b0316156119875760405162461bcd60e51b815260206004820181905260248201527f54424120616c72656164792065786973747320666f72207468697320757365726044820152606401610aad565b6000805460405163da7323b360e01b81526001600160a01b039091169063da7323b3906119c4908c908c908c908c908c908c908c90600401612cf3565b6020604051808303816000875af11580156119e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a079190612cd6565b336000908152600a6020526040902080546001600160a01b0319166001600160a01b0383161790559050611a3a8161251b565b6001600160a01b0381166000818152600b60205260409081902054905133917f9f8cecf4cfce26b777a90d819f810f91f1dd81d0a7e1a3fe6bb75922fcde41cf91611a8791815260200190565b60405180910390a3505050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ae25760405162461bcd60e51b8152600401610aad90612c84565b601780549082905560408051828152602081018490527fd5c900865c3981f605a346229a46710bb52560a90e461926816f770cb1b4549b91015b60405180910390a15050565b336000908152600a602052604090819020546001549151632770a7eb60e21b81526001600160a01b039182169290911690639dc29fac90611b77908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015611b9157600080fd5b505af1158015611ba5573d6000803e3d6000fd5b5050600254604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac9150611be3908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015611bfd57600080fd5b505af1158015611c11573d6000803e3d6000fd5b5050600354604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac9150611c4f908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b158015611c6957600080fd5b505af1158015611c7d573d6000803e3d6000fd5b505060048054604051632770a7eb60e21b81526001600160a01b039091169350639dc29fac9250611cba918591670de0b6b3a76400009101612ca7565b600060405180830381600087803b158015611cd457600080fd5b505af1158015611ce8573d6000803e3d6000fd5b505060065460408051636a436e8960e01b81526001600160a01b038681166004830152602482019290925260096044820152683430b6b13ab933b2b960b91b60648201526000945091169150636a436e89906084016020604051808303816000875af1158015611d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d809190612d57565b9050816001600160a01b03167fb9a2c905ecea5721a4f3f3b62973d7f758781e6b5affdfd5bb6a2a0cc28ba3d482604051611dbd91815260200190565b60405180910390a25050565b6009546000908210611ddd57506000919050565b600360098381548110611df257611df2612c5b565b90600052602060002090600402016002015411159050919050565b6001600160a01b038083166000908152600a602052604081205490911680611e695760405162461bcd60e51b815260206004820152600f60248201526e5573657220686173206e6f2054424160881b6044820152606401610aad565b6040516370a0823160e01b81526001600160a01b0382811660048301528416906370a0823190602401602060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190612d57565b9150505b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f255760405162461bcd60e51b8152600401610aad90612c84565b601880549082905560408051828152602081018490527f8ddcae6c900e31a96ffcf2f769ac65523cbe587b3a15d3586fec3a28fbc6b1389101611b1c565b336000908152600a60209081526040808320546001600160a01b0316808452600b8352928190205490519091611fa591016453746f766560d81b815260050190565b6040516020818303038152906040528051906020012060098281548110611fce57611fce612c5b565b9060005260206000209060040201600101604051602001611fef9190612d70565b60405160208183030381529060405280519060200120146120525760405162461bcd60e51b815260206004820152601c60248201527f6d757374206f6e2073746f766520746f20757365206661756365742e000000006044820152606401610aad565b601854336000908152600f6020526040902054429161207091612c48565b8110156120c95760405162461bcd60e51b815260206004820152602160248201527f46617563657420616c726561647920757365642e20506c6561736520776169746044820152601760f91b6064820152608401610aad565b336000818152600f6020526040908190208390556007546017549151633dab615960e11b81526001600160a01b0390911692637b56c2b29261210d92600401612ca7565b600060405180830381600087803b15801561212757600080fd5b505af115801561213b573d6000803e3d6000fd5b50505050505050565b336000908152600a602052604090819020546001549151632770a7eb60e21b81526001600160a01b039182169290911690639dc29fac90612193908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b1580156121ad57600080fd5b505af11580156121c1573d6000803e3d6000fd5b5050600254604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac91506121ff908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b15801561221957600080fd5b505af115801561222d573d6000803e3d6000fd5b5050600354604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac915061226b908490670de0b6b3a764000090600401612ca7565b600060405180830381600087803b15801561228557600080fd5b505af1158015612299573d6000803e3d6000fd5b505060048054604051632770a7eb60e21b81526001600160a01b039091169350639dc29fac9250610ee4918591670de0b6b3a76400009101612ca7565b600061085083836124b0565b33600090815260136020526040902080546122fc90612bf8565b1590506123425760405162461bcd60e51b8152602060048201526014602482015273155cd95c9b985b5948185b1c9958591e481cd95d60621b6044820152606401610aad565b33600090815260136020526040902061235c828483612e36565b503360148383604051612370929190612ef6565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b601360205260009081526040902080546123bc90612bf8565b80601f01602080910402602001604051908101604052809291908181526020018280546123e890612bf8565b80156124355780601f1061240a57610100808354040283529160200191612435565b820191906000526020600020905b81548152906001019060200180831161241857829003601f168201915b505050505081565b60095460009082106124845760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103837b9b4ba34b7b760811b6044820152606401610aad565b6009828154811061249757612497612c5b565b9060005260206000209060040201600201549050919050565b6000806124be600143612c71565b60408051914060208301526bffffffffffffffffffffffff19606087901b16908201526054810184905260740160408051601f1981840301815291905280516020909101209050612510600682612f06565b611ed3906001612f28565b6001600160a01b03811660009081526016602052604090205460ff16156125795760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610aad565b60005b6009548110156126b4576040516453746f766560d81b602082015260250160405160208183030381529060405280519060200120600982815481106125c3576125c3612c5b565b90600052602060002090600402016001016040516020016125e49190612d70565b60405160208183030381529060405280519060200120036126ac576001600160a01b0382166000908152600b6020526040902081905560098054600191908390811061263257612632612c5b565b906000526020600020906004020160030160008282546126529190612c48565b90915550506001600160a01b03821660008181526016602052604090819020805460ff19166001179055517fb31ba5904c24da7a4eeed78a7e073540fbf64788e158b6f3f55fae6d475ced9590611dbd9084815260200190565b60010161257c565b5060405162461bcd60e51b8152602060048201526013602482015272139bc814dd1bdd994819dc9a5908199bdd5b99606a1b6044820152606401610aad565b50805460008255906000526020600020908101906127119190612714565b50565b5b808211156127295760008155600101612715565b5090565b6001600160a01b038116811461271157600080fd5b60006020828403121561275457600080fd5b81356108508161272d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561279e5761279e61275f565b604052919050565b600060208083850312156127b957600080fd5b823567ffffffffffffffff808211156127d157600080fd5b818501915085601f8301126127e557600080fd5b8135818111156127f7576127f761275f565b612809601f8201601f19168501612775565b9150808252868482850101111561281f57600080fd5b8084840185840137600090820190930192909252509392505050565b6020808252825182820181905260009190848201906040850190845b8181101561287357835183529284019291840191600101612857565b50909695505050505050565b6000815180845260005b818110156128a557602081850181015186830182015201612889565b506000602082860101526020601f19601f83011685010191505092915050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561294457603f19898403018552815160808151855288820151818a87015261291c8287018261287f565b838a0151878b01526060938401519390960192909252505093860193908601906001016128ee565b509098975050505050505050565b6000806040838503121561296557600080fd5b82356129708161272d565b946020939093013593505050565b60006020828403121561299057600080fd5b5035919050565b8481526080602082015260006129b0608083018661287f565b6040830194909452506060015292915050565b600080604083850312156129d657600080fd5b82356129e18161272d565b915060208301356129f18161272d565b809150509250929050565b60008083601f840112612a0e57600080fd5b50813567ffffffffffffffff811115612a2657600080fd5b602083019150836020828501011115612a3e57600080fd5b9250929050565b600080600080600080600060c0888a031215612a6057600080fd5b8735612a6b8161272d565b9650602088013595506040880135612a828161272d565b9450606088013593506080880135925060a088013567ffffffffffffffff811115612aac57600080fd5b612ab88a828b016129fc565b989b979a50959850939692959293505050565b60008060408385031215612ade57600080fd5b8235612ae98161272d565b91506020830135600481106129f157600080fd5b60008060208385031215612b1057600080fd5b823567ffffffffffffffff811115612b2757600080fd5b612b33858286016129fc565b90969095509350505050565b602081526000610850602083018461287f565b60006020808385031215612b6557600080fd5b825167ffffffffffffffff80821115612b7d57600080fd5b818501915085601f830112612b9157600080fd5b815181811115612ba357612ba361275f565b8060051b9150612bb4848301612775565b8181529183018401918481019088841115612bce57600080fd5b938501935b83851015612bec57845182529385019390850190612bd3565b98975050505050505050565b600181811c90821680612c0c57607f821691505b602082108103612c2c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611ed757611ed7612c32565b634e487b7160e01b600052603260045260246000fd5b81810381811115611ed757611ed7612c32565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052602160045260246000fd5b600060208284031215612ce857600080fd5b81516108508161272d565b6001600160a01b0388811682526020820188905286166040820152606081018590526080810184905260c060a0820181905281018290526000828460e0840137600060e0848401015260e0601f19601f850116830101905098975050505050505050565b600060208284031215612d6957600080fd5b5051919050565b6000808354612d7e81612bf8565b60018281168015612d965760018114612dab57612dda565b60ff1984168752821515830287019450612dda565b8760005260208060002060005b85811015612dd15781548a820152908401908201612db8565b50505082870194505b50929695505050505050565b601f8211156117c4576000816000526020600020601f850160051c81016020861015612e0f5750805b601f850160051c820191505b81811015612e2e57828155600101612e1b565b505050505050565b67ffffffffffffffff831115612e4e57612e4e61275f565b612e6283612e5c8354612bf8565b83612de6565b6000601f841160018114612e965760008515612e7e5750838201355b600019600387901b1c1916600186901b178355610f12565b600083815260209020601f19861690835b82811015612ec75786850135825560209485019460019092019101612ea7565b5086821015612ee45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b600082612f2357634e487b7160e01b600052601260045260246000fd5b500690565b60ff8181168382160190811115611ed757611ed7612c3256fea2646970667358221220515bcbf74b3990ae693ae0202f087356c81ca967869cd4e3bb9d53bf8c9bc21664736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTbaBalance(address)": {
        "notice": "Baca saldo native token (ETH/MON) milik TBA user"
      },
      "getTbaTokenBalance(address,address)": {
        "notice": "Baca saldo ERC20 milik TBA user"
      },
      "setFaucetAmount(uint256)": {
        "notice": "Owner bisa set biaya payment amount manual"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4845,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC6551Registry)4330"
      },
      {
        "astId": 4848,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "bread",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(BreadToken)3886"
      },
      {
        "astId": 4851,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "meat",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(MeatToken)6609"
      },
      {
        "astId": 4854,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "lettuce",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LettuceToken)6539"
      },
      {
        "astId": 4857,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "tomato",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TomatoToken)6679"
      },
      {
        "astId": 4860,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "chefNFT",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ChefNFT)4080"
      },
      {
        "astId": 4863,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "hamburger",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(FoodNFT)4831"
      },
      {
        "astId": 4866,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "faucetMon",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(FaucetMon)4483"
      },
      {
        "astId": 4869,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "paymentGateway",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IPaymentGateway)6686"
      },
      {
        "astId": 4875,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "grid",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Box)4941_storage)dyn_storage"
      },
      {
        "astId": 4879,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "tbaList",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4883,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "player",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4887,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "canBuy",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4891,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "rollCount",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4895,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "faucetUsageCount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4899,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "lastFaucetUsage",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4903,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "lastMintedSpecialBox",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4908,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "stats",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(PlayerStats)4952_storage)"
      },
      {
        "astId": 4915,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "inventory",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_enum(IngredientType)4957,t_uint256))"
      },
      {
        "astId": 4919,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "usernames",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 4923,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "nameToAddress",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 4928,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "travelHistory",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4932,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "isPlayerCreated",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5015,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "faucetAmount",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 5017,
        "contract": "contracts/FoodScramble.sol:FoodScramble",
        "label": "faucetCooldown",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Box)4941_storage)dyn_storage": {
        "base": "t_struct(Box)4941_storage",
        "encoding": "dynamic_array",
        "label": "struct FoodScramble.Box[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BreadToken)3886": {
        "encoding": "inplace",
        "label": "contract BreadToken",
        "numberOfBytes": "20"
      },
      "t_contract(ChefNFT)4080": {
        "encoding": "inplace",
        "label": "contract ChefNFT",
        "numberOfBytes": "20"
      },
      "t_contract(ERC6551Registry)4330": {
        "encoding": "inplace",
        "label": "contract ERC6551Registry",
        "numberOfBytes": "20"
      },
      "t_contract(FaucetMon)4483": {
        "encoding": "inplace",
        "label": "contract FaucetMon",
        "numberOfBytes": "20"
      },
      "t_contract(FoodNFT)4831": {
        "encoding": "inplace",
        "label": "contract FoodNFT",
        "numberOfBytes": "20"
      },
      "t_contract(IPaymentGateway)6686": {
        "encoding": "inplace",
        "label": "contract IPaymentGateway",
        "numberOfBytes": "20"
      },
      "t_contract(LettuceToken)6539": {
        "encoding": "inplace",
        "label": "contract LettuceToken",
        "numberOfBytes": "20"
      },
      "t_contract(MeatToken)6609": {
        "encoding": "inplace",
        "label": "contract MeatToken",
        "numberOfBytes": "20"
      },
      "t_contract(TomatoToken)6679": {
        "encoding": "inplace",
        "label": "contract TomatoToken",
        "numberOfBytes": "20"
      },
      "t_enum(IngredientType)4957": {
        "encoding": "inplace",
        "label": "enum FoodScramble.IngredientType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_enum(IngredientType)4957,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum FoodScramble.IngredientType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(IngredientType)4957,t_uint256)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(PlayerStats)4952_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FoodScramble.PlayerStats)",
        "numberOfBytes": "32",
        "value": "t_struct(PlayerStats)4952_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(IngredientType)4957,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(IngredientType)4957",
        "label": "mapping(enum FoodScramble.IngredientType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Box)4941_storage": {
        "encoding": "inplace",
        "label": "struct FoodScramble.Box",
        "members": [
          {
            "astId": 4934,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4936,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "typeGrid",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4938,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "ingredientType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4940,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "numberOfPlayers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PlayerStats)4952_storage": {
        "encoding": "inplace",
        "label": "struct FoodScramble.PlayerStats",
        "members": [
          {
            "astId": 4943,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "totalRolls",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4945,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "ingredientsCollected",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4947,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "foodsMinted",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4949,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "lastActive",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4951,
            "contract": "contracts/FoodScramble.sol:FoodScramble",
            "label": "hasSpecialAccess",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}