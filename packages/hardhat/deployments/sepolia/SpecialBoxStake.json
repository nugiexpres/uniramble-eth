{
  "address": "0xe2d971375b8C126F49e3a4975A8C3c9f9DFF0A05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_specialBox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_foodScramble",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hamburger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentGateway",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tba",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SpecialBoxMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tba",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tba",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "StakeAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tba",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "StakeBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tba",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tba",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "UnstakeBatch",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HAMBURGERS_PER_SPECIAL_BOX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "foodScramble",
      "outputs": [
        {
          "internalType": "contract IFoodScramble",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tba",
          "type": "address"
        }
      ],
      "name": "getStakeableCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getTBA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hamburger",
      "outputs": [
        {
          "internalType": "contract IFoodNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintSpecialBoxNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentGateway",
      "outputs": [
        {
          "internalType": "contract IPaymentGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_foodScramble",
          "type": "address"
        }
      ],
      "name": "setFoodScramble",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_specialBox",
          "type": "address"
        }
      ],
      "name": "setSpecialBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tba",
          "type": "address"
        }
      ],
      "name": "setTBA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "specialBox",
      "outputs": [
        {
          "internalType": "contract ISpecialBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "specialBoxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAll",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "stakeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tba",
          "type": "address"
        }
      ],
      "name": "stakedBoxBalance",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakedBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tbaList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tba",
          "type": "address"
        }
      ],
      "name": "totalStakedBoxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAll",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "unstakeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6a0d93dce1fe74f92f2932432f59f9ecf842b44b3fde4786186ec4ec9f8866a",
  "receipt": {
    "to": null,
    "from": "0x9bF68A0f0be9A9B6dCeb4D5675745c2f7cFb9483",
    "contractAddress": "0xe2d971375b8C126F49e3a4975A8C3c9f9DFF0A05",
    "transactionIndex": 45,
    "gasUsed": "2082556",
    "logsBloom": "0x
    "blockHash": "0x98ba3120a943e743389a0ca1ea9dca11dd62fd8260e1e2786c1769f5fa5f5684",
    "transactionHash": "0xf6a0d93dce1fe74f92f2932432f59f9ecf842b44b3fde4786186ec4ec9f8866a",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 9335535,
        "transactionHash": "0xf6a0d93dce1fe74f92f2932432f59f9ecf842b44b3fde4786186ec4ec9f8866a",
        "address": "0xe2d971375b8C126F49e3a4975A8C3c9f9DFF0A05",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009bf68a0f0be9a9b6dceb4d5675745c2f7cfb9483"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x98ba3120a943e743389a0ca1ea9dca11dd62fd8260e1e2786c1769f5fa5f5684"
      }
    ],
    "blockNumber": 9335535,
    "cumulativeGasUsed": "8641831",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4D0A40CD80E36e86479B6006828bEf78e12D3e44",
    "0x4906A158209765187cc70819eDa36f922114AF77",
    "0x2FF46E513a2991d1338014c911B1eA8E7710f48E",
    "0x875777Dfd5660e67A19E365AfAFE90144cb11464"
  ],
  "numDeployments": 4,
  "solcInputHash": "d2bfb95f4d103a4e67fb06a6293fdeaa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_specialBox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_foodScramble\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hamburger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentGateway\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SpecialBoxMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"StakeAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"StakeBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"UnstakeBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HAMBURGERS_PER_SPECIAL_BOX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foodScramble\",\"outputs\":[{\"internalType\":\"contract IFoodScramble\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"}],\"name\":\"getStakeableCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTBA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hamburger\",\"outputs\":[{\"internalType\":\"contract IFoodNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintSpecialBoxNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentGateway\",\"outputs\":[{\"internalType\":\"contract IPaymentGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foodScramble\",\"type\":\"address\"}],\"name\":\"setFoodScramble\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_specialBox\",\"type\":\"address\"}],\"name\":\"setSpecialBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"}],\"name\":\"setTBA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialBox\",\"outputs\":[{\"internalType\":\"contract ISpecialBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialBoxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"}],\"name\":\"stakedBoxBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tbaList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tba\",\"type\":\"address\"}],\"name\":\"totalStakedBoxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstakeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"checkStaked(uint256)\":{\"params\":{\"tokenId\":\"Box token ID\"},\"returns\":{\"_0\":\"true if staked\"}},\"getStakeableCount(address)\":{\"params\":{\"tba\":\"TBA address\"},\"returns\":{\"_0\":\"Number of boxes that can be staked\"}},\"getStaker(uint256)\":{\"params\":{\"tokenId\":\"Box token ID\"},\"returns\":{\"_0\":\"TBA address that staked the box\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setFoodScramble(address)\":{\"params\":{\"_foodScramble\":\"New FoodScramble contract address\"}},\"setSpecialBox(address)\":{\"params\":{\"_specialBox\":\"New SpecialBox contract address\"}},\"stake(uint256)\":{\"params\":{\"tokenId\":\"ID box yang akan di-stake\"}},\"stakeAll()\":{\"details\":\"Auto-detect semua box dan stake sekaligus\",\"returns\":{\"_0\":\"tokenIds Array ID box yang di-stake\"}},\"stakeBatch(uint256[])\":{\"params\":{\"tokenIds\":\"Array ID box yang akan di-stake\"}},\"stakedBoxBalance(address)\":{\"params\":{\"tba\":\"TBA address\"},\"returns\":{\"_0\":\"Array of staked token IDs\"}},\"totalStakedBoxes(address)\":{\"params\":{\"tba\":\"TBA address\"},\"returns\":{\"_0\":\"Total staked count\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint256)\":{\"params\":{\"tokenId\":\"ID box yang akan di-unstake\"}},\"unstakeAll()\":{\"returns\":{\"_0\":\"tokenIds Array ID box yang di-unstake\"}},\"unstakeBatch(uint256[])\":{\"params\":{\"tokenIds\":\"Array ID box yang akan di-unstake\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkStaked(uint256)\":{\"notice\":\"Check if box is staked\"},\"getStakeableCount(address)\":{\"notice\":\"Get stakeable boxes count (boxes that can be staked)\"},\"getStaker(uint256)\":{\"notice\":\"Get who staked the box\"},\"setFoodScramble(address)\":{\"notice\":\"Set FoodScramble contract address\"},\"setSpecialBox(address)\":{\"notice\":\"Set SpecialBox contract address\"},\"stake(uint256)\":{\"notice\":\"Stake satu box\"},\"stakeAll()\":{\"notice\":\"Stake semua box yang dimiliki di TBA\"},\"stakeBatch(uint256[])\":{\"notice\":\"Stake multiple boxes\"},\"stakedBoxBalance(address)\":{\"notice\":\"Get TBA's staked boxes\"},\"totalStakedBoxes(address)\":{\"notice\":\"Get total staked boxes count for TBA\"},\"unstake(uint256)\":{\"notice\":\"Unstake satu box\"},\"unstakeAll()\":{\"notice\":\"Unstake semua box yang di-stake di TBA\"},\"unstakeBatch(uint256[])\":{\"notice\":\"Unstake multiple boxes\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpecialBoxStake.sol\":\"SpecialBoxStake\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/SpecialBoxStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ninterface ISpecialBox {\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function boxBalance(address tba) external view returns (uint256[] memory);\\n    function getTBA(address user) external view returns (address);\\n    function mintBox(address tba) external;\\n}\\n\\ninterface IFoodScramble {\\n    function getTBA(address user) external view returns (address);\\n    function accountReady(address user) external view returns (bool);\\n}\\n\\ninterface IFoodNFT {\\n    function getMyFoods(address owner) external view returns (uint256[] memory);\\n    function burnFood(uint256 tokenId) external;\\n}\\n\\ninterface IPaymentGateway {\\n    function processPayment() external payable;\\n}\\n\\ncontract SpecialBoxStake is Ownable, ReentrancyGuard {\\n    // Constants\\n    uint256 public constant HAMBURGERS_PER_SPECIAL_BOX = 10;\\n\\n    // Interfaces\\n    ISpecialBox public specialBox;\\n    IFoodScramble public foodScramble;\\n    IFoodNFT public hamburger;\\n    IPaymentGateway public paymentGateway;\\n\\n    // Storage - using TBA addresses\\n    mapping(address => address) public tbaList; // user => TBA address\\n    mapping(address => uint256[]) public staked; // TBA => staked box IDs\\n    mapping(uint256 => bool) public isStaked; // tokenId => staked status\\n    mapping(uint256 => address) public stakedBy; // tokenId => TBA address\\n\\n    // Fees and configuration\\n    uint256 public specialBoxFee = 0.01 ether;\\n\\n    // Events\\n    event Stake(address indexed user, address indexed tba, uint256 tokenId);\\n    event StakeBatch(address indexed user, address indexed tba, uint256[] tokenIds);\\n    event Unstake(address indexed user, address indexed tba, uint256 tokenId);\\n    event UnstakeBatch(address indexed user, address indexed tba, uint256[] tokenIds);\\n    event StakeAll(address indexed user, address indexed tba, uint256[] tokenIds, uint256 totalStaked);\\n    event SpecialBoxMinted(address indexed user, address indexed tba, uint256 amount);\\n\\n    constructor(\\n        address _specialBox,\\n        address _foodScramble,\\n        address _hamburger,\\n        address _paymentGateway\\n    ) Ownable(msg.sender) {\\n        specialBox = ISpecialBox(_specialBox);\\n        foodScramble = IFoodScramble(_foodScramble);\\n        hamburger = IFoodNFT(_hamburger);\\n        paymentGateway = IPaymentGateway(_paymentGateway);\\n    }\\n\\n    // === TBA Management Functions === //\\n\\n    function setTBA(address user, address tba) external onlyOwner {\\n        tbaList[user] = tba;\\n    }\\n\\n    function getTBA(address user) external view returns (address) {\\n        return tbaList[user];\\n    }\\n\\n    // === Mint Special Box Function === //\\n\\n    function mintSpecialBoxNFT() external payable {\\n        address tba = tbaList[msg.sender];\\n        require(tba != address(0), \\\"TBA not found\\\");\\n\\n        // Get hamburger count dari TBA\\n        uint256[] memory myHamburgers = hamburger.getMyFoods(tba);\\n        uint256 hamburgerCount = myHamburgers.length;\\n\\n        // Cek minimal 10 hamburger\\n        require(hamburgerCount >= HAMBURGERS_PER_SPECIAL_BOX, \\\"Need 10+ hamburgers\\\");\\n\\n        // Cek payment jika ada fee\\n        if (specialBoxFee > 0) {\\n            require(msg.value >= specialBoxFee, \\\"Insufficient fee\\\");\\n\\n            try paymentGateway.processPayment{ value: specialBoxFee }() {\\n                // Payment success\\n            } catch {\\n                revert(\\\"Payment processing failed\\\");\\n            }\\n        }\\n\\n        // Burn 10 hamburger pertama yang dimiliki\\n        uint256[] memory hamburgersToBurn = new uint256[](HAMBURGERS_PER_SPECIAL_BOX);\\n        for (uint256 i = 0; i < HAMBURGERS_PER_SPECIAL_BOX; i++) {\\n            hamburgersToBurn[i] = myHamburgers[i];\\n        }\\n\\n        // Burn hamburgers satu per satu\\n        for (uint256 i = 0; i < HAMBURGERS_PER_SPECIAL_BOX; i++) {\\n            hamburger.burnFood(hamburgersToBurn[i]);\\n        }\\n\\n        // Mint 1 special box ke TBA\\n        specialBox.mintBox(tba);\\n\\n        emit SpecialBoxMinted(msg.sender, tba, 1);\\n    }\\n\\n    // === SINGLE STAKE FUNCTIONS === //\\n\\n    /**\\n     * @notice Stake satu box\\n     * @param tokenId ID box yang akan di-stake\\n     */\\n    function stake(uint256 tokenId) external nonReentrant {\\n        address tba = _getTBA(msg.sender);\\n\\n        require(specialBox.ownerOf(tokenId) == tba, \\\"Not owner\\\");\\n        require(!isStaked[tokenId], \\\"Already staked\\\");\\n\\n        isStaked[tokenId] = true;\\n        stakedBy[tokenId] = tba;\\n        staked[tba].push(tokenId);\\n\\n        emit Stake(msg.sender, tba, tokenId);\\n    }\\n\\n    /**\\n     * @notice Unstake satu box\\n     * @param tokenId ID box yang akan di-unstake\\n     */\\n    function unstake(uint256 tokenId) external nonReentrant {\\n        address tba = _getTBA(msg.sender);\\n\\n        require(stakedBy[tokenId] == tba, \\\"Not your stake\\\");\\n        require(isStaked[tokenId], \\\"Not staked\\\");\\n\\n        isStaked[tokenId] = false;\\n        stakedBy[tokenId] = address(0);\\n        _removeFromArray(staked[tba], tokenId);\\n\\n        emit Unstake(msg.sender, tba, tokenId);\\n    }\\n\\n    // === BATCH STAKE FUNCTIONS === //\\n\\n    /**\\n     * @notice Stake multiple boxes\\n     * @param tokenIds Array ID box yang akan di-stake\\n     */\\n    function stakeBatch(uint256[] memory tokenIds) external nonReentrant {\\n        require(tokenIds.length > 0 && tokenIds.length <= 50, \\\"Invalid batch size\\\");\\n\\n        address tba = _getTBA(msg.sender);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(specialBox.ownerOf(tokenIds[i]) == tba, \\\"Not owner\\\");\\n            require(!isStaked[tokenIds[i]], \\\"Already staked\\\");\\n\\n            isStaked[tokenIds[i]] = true;\\n            stakedBy[tokenIds[i]] = tba;\\n            staked[tba].push(tokenIds[i]);\\n        }\\n\\n        emit StakeBatch(msg.sender, tba, tokenIds);\\n    }\\n\\n    /**\\n     * @notice Unstake multiple boxes\\n     * @param tokenIds Array ID box yang akan di-unstake\\n     */\\n    function unstakeBatch(uint256[] memory tokenIds) external nonReentrant {\\n        require(tokenIds.length > 0 && tokenIds.length <= 50, \\\"Invalid batch size\\\");\\n\\n        address tba = _getTBA(msg.sender);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(stakedBy[tokenIds[i]] == tba, \\\"Not your stake\\\");\\n            require(isStaked[tokenIds[i]], \\\"Not staked\\\");\\n\\n            isStaked[tokenIds[i]] = false;\\n            stakedBy[tokenIds[i]] = address(0);\\n            _removeFromArray(staked[tba], tokenIds[i]);\\n        }\\n\\n        emit UnstakeBatch(msg.sender, tba, tokenIds);\\n    }\\n\\n    // === STAKE ALL FUNCTION === //\\n\\n    /**\\n     * @notice Stake semua box yang dimiliki di TBA\\n     * @dev Auto-detect semua box dan stake sekaligus\\n     * @return tokenIds Array ID box yang di-stake\\n     */\\n    function stakeAll() external nonReentrant returns (uint256[] memory) {\\n        address tba = _getTBA(msg.sender);\\n\\n        // Get semua box yang dimiliki TBA\\n        uint256[] memory allBoxes = specialBox.boxBalance(tba);\\n        require(allBoxes.length > 0, \\\"No boxes to stake\\\");\\n\\n        // Filter hanya yang belum di-stake\\n        uint256[] memory toStake = new uint256[](allBoxes.length);\\n        uint256 count = 0;\\n\\n        for (uint256 i = 0; i < allBoxes.length; i++) {\\n            if (!isStaked[allBoxes[i]]) {\\n                toStake[count] = allBoxes[i];\\n                count++;\\n            }\\n        }\\n\\n        require(count > 0, \\\"All boxes already staked\\\");\\n        require(count <= 50, \\\"Too many boxes, use batch\\\");\\n\\n        // Resize array\\n        uint256[] memory finalTokenIds = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            finalTokenIds[i] = toStake[i];\\n        }\\n\\n        // Stake semua\\n        for (uint256 i = 0; i < count; i++) {\\n            isStaked[finalTokenIds[i]] = true;\\n            stakedBy[finalTokenIds[i]] = tba;\\n            staked[tba].push(finalTokenIds[i]);\\n        }\\n\\n        emit StakeAll(msg.sender, tba, finalTokenIds, count);\\n\\n        return finalTokenIds;\\n    }\\n\\n    /**\\n     * @notice Unstake semua box yang di-stake di TBA\\n     * @return tokenIds Array ID box yang di-unstake\\n     */\\n    function unstakeAll() external nonReentrant returns (uint256[] memory) {\\n        address tba = _getTBA(msg.sender);\\n\\n        uint256[] memory stakedBoxes = staked[tba];\\n        require(stakedBoxes.length > 0, \\\"No staked boxes\\\");\\n        require(stakedBoxes.length <= 50, \\\"Too many staked, use batch\\\");\\n\\n        // Copy array karena kita akan modify staked[tba]\\n        uint256[] memory toUnstake = new uint256[](stakedBoxes.length);\\n        for (uint256 i = 0; i < stakedBoxes.length; i++) {\\n            toUnstake[i] = stakedBoxes[i];\\n        }\\n\\n        // Unstake semua\\n        for (uint256 i = 0; i < toUnstake.length; i++) {\\n            isStaked[toUnstake[i]] = false;\\n            stakedBy[toUnstake[i]] = address(0);\\n        }\\n\\n        // Clear staked array\\n        delete staked[tba];\\n\\n        emit UnstakeBatch(msg.sender, tba, toUnstake);\\n\\n        return toUnstake;\\n    }\\n\\n    // === VIEW FUNCTIONS === //\\n\\n    /**\\n     * @notice Get TBA's staked boxes\\n     * @param tba TBA address\\n     * @return Array of staked token IDs\\n     */\\n    function stakedBoxBalance(address tba) external view returns (uint256[] memory) {\\n        return staked[tba];\\n    }\\n\\n    /**\\n     * @notice Get total staked boxes count for TBA\\n     * @param tba TBA address\\n     * @return Total staked count\\n     */\\n    function totalStakedBoxes(address tba) external view returns (uint256) {\\n        return staked[tba].length;\\n    }\\n\\n    /**\\n     * @notice Check if box is staked\\n     * @param tokenId Box token ID\\n     * @return true if staked\\n     */\\n    function checkStaked(uint256 tokenId) external view returns (bool) {\\n        return isStaked[tokenId];\\n    }\\n\\n    /**\\n     * @notice Get who staked the box\\n     * @param tokenId Box token ID\\n     * @return TBA address that staked the box\\n     */\\n    function getStaker(uint256 tokenId) external view returns (address) {\\n        return stakedBy[tokenId];\\n    }\\n\\n\\n    /**\\n     * @notice Get stakeable boxes count (boxes that can be staked)\\n     * @param tba TBA address\\n     * @return Number of boxes that can be staked\\n     */\\n    function getStakeableCount(address tba) external view returns (uint256) {\\n        uint256[] memory allBoxes = specialBox.boxBalance(tba);\\n\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < allBoxes.length; i++) {\\n            if (!isStaked[allBoxes[i]]) {\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n\\n    // === ADMIN FUNCTIONS === //\\n\\n    /**\\n     * @notice Set SpecialBox contract address\\n     * @param _specialBox New SpecialBox contract address\\n     */\\n    function setSpecialBox(address _specialBox) external onlyOwner {\\n        specialBox = ISpecialBox(_specialBox);\\n    }\\n\\n    /**\\n     * @notice Set FoodScramble contract address\\n     * @param _foodScramble New FoodScramble contract address\\n     */\\n    function setFoodScramble(address _foodScramble) external onlyOwner {\\n        foodScramble = IFoodScramble(_foodScramble);\\n    }\\n\\n    // === INTERNAL FUNCTIONS === //\\n\\n    function _getTBA(address user) internal view returns (address) {\\n        if (address(foodScramble) != address(0) && foodScramble.accountReady(user)) {\\n            return foodScramble.getTBA(user);\\n        }\\n        return user;\\n    }\\n\\n    function _removeFromArray(uint256[] storage array, uint256 value) private {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (array[i] == value) {\\n                array[i] = array[array.length - 1];\\n                array.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa92dc94faff962ded3810ed93d659c7be645a9721e1c19e63db5da188f6a1a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052662386f26fc10000600a553480156200001c57600080fd5b5060405162002361380380620023618339810160408190526200003f9162000137565b33806200006657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200007181620000ca565b5060018055600280546001600160a01b039586166001600160a01b031991821617909155600380549486169482169490941790935560048054928516928416929092179091556005805491909316911617905562000194565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200013257600080fd5b919050565b600080600080608085870312156200014e57600080fd5b62000159856200011a565b935062000169602086016200011a565b925062000179604086016200011a565b915062000189606086016200011a565b905092959194509250565b6121bd80620001a46000396000f3fe6080604052600436106101c25760003560e01c80638da5cb5b116100f7578063baa51f8611610095578063e64a21f311610064578063e64a21f314610572578063f2fde38b14610592578063f453f531146105b2578063fe34d19f146105d257600080fd5b8063baa51f86146104b6578063ca2169d4146104e6578063cc64045814610506578063e3c998fe1461053c57600080fd5b80639d548b13116100d15780639d548b13146104075780639ee4af1014610427578063a694fc3a1461045d578063a860c1361461047d57600080fd5b80638da5cb5b146103b45780638dcb4061146103d25780638f169816146103e757600080fd5b806335c640b11161016457806363de9b121161013e57806363de9b12146103575780636ec6837d1461035f578063715018a61461037f57806385dab8451461039457600080fd5b806335c640b1146102c95780634410734b14610301578063522d11671461033757600080fd5b8063230f436d116101a0578063230f436d1461024f5780632e17de781461027157806331167aa01461029157806335322f37146102a757600080fd5b806304223ed0146101c757806320fd6b11146101ef57806322a2c9d61461022f575b600080fd5b3480156101d357600080fd5b506101dc600a81565b6040519081526020015b60405180910390f35b3480156101fb57600080fd5b5061021f61020a366004611e2b565b60009081526008602052604090205460ff1690565b60405190151581526020016101e6565b34801561023b57600080fd5b506101dc61024a366004611e59565b6105f2565b34801561025b57600080fd5b5061026f61026a366004611ee8565b6106cd565b005b34801561027d57600080fd5b5061026f61028c366004611e2b565b6109de565b34801561029d57600080fd5b506101dc600a5481565b3480156102b357600080fd5b506102bc610b21565b6040516101e69190611fba565b3480156102d557600080fd5b506002546102e9906001600160a01b031681565b6040516001600160a01b0390911681526020016101e6565b34801561030d57600080fd5b506102e961031c366004611e59565b6006602052600090815260409020546001600160a01b031681565b34801561034357600080fd5b5061026f610352366004611e59565b610def565b61026f610e19565b34801561036b57600080fd5b5061026f61037a366004611fcd565b6111e1565b34801561038b57600080fd5b5061026f611217565b3480156103a057600080fd5b506102bc6103af366004611e59565b61122b565b3480156103c057600080fd5b506000546001600160a01b03166102e9565b3480156103de57600080fd5b506102bc611297565b3480156103f357600080fd5b506101dc610402366004612006565b6116d9565b34801561041357600080fd5b506004546102e9906001600160a01b031681565b34801561043357600080fd5b506102e9610442366004611e2b565b6009602052600090815260409020546001600160a01b031681565b34801561046957600080fd5b5061026f610478366004611e2b565b61170a565b34801561048957600080fd5b506102e9610498366004611e59565b6001600160a01b039081166000908152600660205260409020541690565b3480156104c257600080fd5b5061021f6104d1366004611e2b565b60086020526000908152604090205460ff1681565b3480156104f257600080fd5b506005546102e9906001600160a01b031681565b34801561051257600080fd5b506101dc610521366004611e59565b6001600160a01b031660009081526007602052604090205490565b34801561054857600080fd5b506102e9610557366004611e2b565b6000908152600960205260409020546001600160a01b031690565b34801561057e57600080fd5b5061026f61058d366004611ee8565b6118ae565b34801561059e57600080fd5b5061026f6105ad366004611e59565b611b3c565b3480156105be57600080fd5b506003546102e9906001600160a01b031681565b3480156105de57600080fd5b5061026f6105ed366004611e59565b611b77565b600254604051637c0bda3f60e11b81526001600160a01b038381166004830152600092839291169063f817b47e90602401600060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106689190810190612032565b90506000805b82518110156106c5576008600084838151811061068d5761068d6120b8565b60209081029190910181015182528101919091526040016000205460ff166106bd57816106b9816120e4565b9250505b60010161066e565b509392505050565b6106d5611ba1565b600081511180156106e857506032815111155b61072e5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642062617463682073697a6560701b60448201526064015b60405180910390fd5b600061073933611bcb565b905060005b82518110156109855760025483516001600160a01b03808516921690636352211e90869085908110610772576107726120b8565b60200260200101516040518263ffffffff1660e01b815260040161079891815260200190565b602060405180830381865afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d991906120fd565b6001600160a01b03161461081b5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610725565b60086000848381518110610831576108316120b8565b60209081029190910181015182528101919091526040016000205460ff161561088d5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481cdd185ad95960921b6044820152606401610725565b6001600860008584815181106108a5576108a56120b8565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555081600960008584815181106108e9576108e96120b8565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060076000836001600160a01b03166001600160a01b0316815260200190815260200160002083828151811061095a5761095a6120b8565b602090810291909101810151825460018181018555600094855292909320909201919091550161073e565b50806001600160a01b0316336001600160a01b03167f4ea506d6f308b8335449a84375e347bb7d8c05696fbf36178d03a3d82479a7e5846040516109c99190611fba565b60405180910390a3506109db60018055565b50565b6109e6611ba1565b60006109f133611bcb565b6000838152600960205260409020549091506001600160a01b03808316911614610a4e5760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420796f7572207374616b6560901b6044820152606401610725565b60008281526008602052604090205460ff16610a995760405162461bcd60e51b815260206004820152600a602482015269139bdd081cdd185ad95960b21b6044820152606401610725565b6000828152600860209081526040808320805460ff191690556009825280832080546001600160a01b03191690556001600160a01b038416835260079091529020610ae49083611cce565b6040518281526001600160a01b0382169033907f390b1276974b9463e5d66ab10df69b6f3d7b930eb066a0e66df327edd2cc811c906020016109c9565b6060610b2b611ba1565b6000610b3633611bcb565b6001600160a01b038116600090815260076020908152604080832080548251818502810185019093528083529495509293909291830182828015610b9957602002820191906000526020600020905b815481526020019060010190808311610b85575b505050505090506000815111610be35760405162461bcd60e51b815260206004820152600f60248201526e4e6f207374616b656420626f78657360881b6044820152606401610725565b603281511115610c355760405162461bcd60e51b815260206004820152601a60248201527f546f6f206d616e79207374616b65642c207573652062617463680000000000006044820152606401610725565b6000815167ffffffffffffffff811115610c5157610c51611e7d565b604051908082528060200260200182016040528015610c7a578160200160208202803683370190505b50905060005b8251811015610cc857828181518110610c9b57610c9b6120b8565b6020026020010151828281518110610cb557610cb56120b8565b6020908102919091010152600101610c80565b5060005b8151811015610d7257600060086000848481518110610ced57610ced6120b8565b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550600060096000848481518110610d3257610d326120b8565b602090810291909101810151825281019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055600101610ccc565b506001600160a01b0383166000908152600760205260408120610d9491611dfd565b826001600160a01b0316336001600160a01b03167ff2374f12892bb254c85749c1083758bf7f0d28a86e70fe60453826cfbd360e8983604051610dd79190611fba565b60405180910390a392505050610dec60018055565b90565b610df7611d80565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600660205260409020546001600160a01b031680610e6f5760405162461bcd60e51b815260206004820152600d60248201526c151090481b9bdd08199bdd5b99609a1b6044820152606401610725565b60048054604051630312d49360e21b81526001600160a01b038481169382019390935260009290911690630c4b524c90602401600060405180830381865afa158015610ebf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ee79190810190612032565b8051909150600a811015610f335760405162461bcd60e51b81526020600482015260136024820152724e6565642031302b2068616d6275726765727360681b6044820152606401610725565b600a541561103057600a54341015610f805760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606401610725565b600560009054906101000a90046001600160a01b03166001600160a01b03166322081c12600a546040518263ffffffff1660e01b81526004016000604051808303818588803b158015610fd257600080fd5b505af193505050508015610fe4575060015b6110305760405162461bcd60e51b815260206004820152601960248201527f5061796d656e742070726f63657373696e67206661696c6564000000000000006044820152606401610725565b60408051600a8082526101608201909252600091602082016101408036833701905050905060005b600a8110156110a057838181518110611073576110736120b8565b602002602001015182828151811061108d5761108d6120b8565b6020908102919091010152600101611058565b5060005b600a81101561113a5760045482516001600160a01b039091169063cf2d2cd6908490849081106110d6576110d66120b8565b60200260200101516040518263ffffffff1660e01b81526004016110fc91815260200190565b600060405180830381600087803b15801561111657600080fd5b505af115801561112a573d6000803e3d6000fd5b5050600190920191506110a49050565b50600254604051631c740b2760e21b81526001600160a01b038681166004830152909116906371d02c9c90602401600060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b5050604051600181526001600160a01b03871692503391507f5a018eb2b1f8f511d6db6df61037a448e834587d49471ca2d20d28a6b0353bf79060200160405180910390a350505050565b6111e9611d80565b6001600160a01b03918216600090815260066020526040902080546001600160a01b03191691909216179055565b61121f611d80565b6112296000611dad565b565b6001600160a01b03811660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561128b57602002820191906000526020600020905b815481526020019060010190808311611277575b50505050509050919050565b60606112a1611ba1565b60006112ac33611bcb565b600254604051637c0bda3f60e11b81526001600160a01b0380841660048301529293506000929091169063f817b47e90602401600060405180830381865afa1580156112fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113249190810190612032565b9050600081511161136b5760405162461bcd60e51b81526020600482015260116024820152704e6f20626f78657320746f207374616b6560781b6044820152606401610725565b6000815167ffffffffffffffff81111561138757611387611e7d565b6040519080825280602002602001820160405280156113b0578160200160208202803683370190505b5090506000805b835181101561144557600860008583815181106113d6576113d66120b8565b60209081029190910181015182528101919091526040016000205460ff1661143d5783818151811061140a5761140a6120b8565b6020026020010151838381518110611424576114246120b8565b602090810291909101015281611439816120e4565b9250505b6001016113b7565b50600081116114965760405162461bcd60e51b815260206004820152601860248201527f416c6c20626f78657320616c7265616479207374616b656400000000000000006044820152606401610725565b60328111156114e75760405162461bcd60e51b815260206004820152601960248201527f546f6f206d616e7920626f7865732c20757365206261746368000000000000006044820152606401610725565b60008167ffffffffffffffff81111561150257611502611e7d565b60405190808252806020026020018201604052801561152b578160200160208202803683370190505b50905060005b828110156115785783818151811061154b5761154b6120b8565b6020026020010151828281518110611565576115656120b8565b6020908102919091010152600101611531565b5060005b8281101561167c5760016008600084848151811061159c5761159c6120b8565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555085600960008484815181106115e0576115e06120b8565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060076000876001600160a01b03166001600160a01b03168152602001908152602001600020828281518110611651576116516120b8565b602090810291909101810151825460018181018555600094855292909320909201919091550161157c565b50846001600160a01b0316336001600160a01b03167f7979069e078a7f13726ef2d2a2f6e564ec1e603f5e756d64096f5f6dd2271fda83856040516116c292919061211a565b60405180910390a3945050505050610dec60018055565b600760205281600052604060002081815481106116f557600080fd5b90600052602060002001600091509150505481565b611712611ba1565b600061171d33611bcb565b6002546040516331a9108f60e11b8152600481018590529192506001600160a01b0380841692911690636352211e90602401602060405180830381865afa15801561176c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179091906120fd565b6001600160a01b0316146117d25760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610725565b60008281526008602052604090205460ff16156118225760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481cdd185ad95960921b6044820152606401610725565b60008281526008602090815260408083208054600160ff1990911681179091556009835281842080546001600160a01b0319166001600160a01b0387169081179091558085526007845282852080549283018155855293839020018590555184815233917f99039fcf0a98f484616c5196ee8b2ecfa971babf0b519848289ea4db381f85f791016109c9565b6118b6611ba1565b600081511180156118c957506032815111155b61190a5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642062617463682073697a6560701b6044820152606401610725565b600061191533611bcb565b905060005b8251811015611af857816001600160a01b031660096000858481518110611943576119436120b8565b6020908102919091018101518252810191909152604001600020546001600160a01b0316146119a55760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420796f7572207374616b6560901b6044820152606401610725565b600860008483815181106119bb576119bb6120b8565b60209081029190910181015182528101919091526040016000205460ff16611a125760405162461bcd60e51b815260206004820152600a602482015269139bdd081cdd185ad95960b21b6044820152606401610725565b600060086000858481518110611a2a57611a2a6120b8565b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550600060096000858481518110611a6f57611a6f6120b8565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611af060076000846001600160a01b03166001600160a01b03168152602001908152602001600020848381518110611ae357611ae36120b8565b6020026020010151611cce565b60010161191a565b50806001600160a01b0316336001600160a01b03167ff2374f12892bb254c85749c1083758bf7f0d28a86e70fe60453826cfbd360e89846040516109c99190611fba565b611b44611d80565b6001600160a01b038116611b6e57604051631e4fbdf760e01b815260006004820152602401610725565b6109db81611dad565b611b7f611d80565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600260015403611bc457604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6003546000906001600160a01b031615801590611c51575060035460405163304fa5e160e01b81526001600160a01b0384811660048301529091169063304fa5e190602401602060405180830381865afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c51919061213c565b15611cca57600354604051635430609b60e11b81526001600160a01b0384811660048301529091169063a860c13690602401602060405180830381865afa158015611ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc491906120fd565b92915050565b5090565b60005b8254811015611d7b5781838281548110611ced57611ced6120b8565b906000526020600020015403611d735782548390611d0d9060019061215e565b81548110611d1d57611d1d6120b8565b9060005260206000200154838281548110611d3a57611d3a6120b8565b906000526020600020018190555082805480611d5857611d58612171565b60019003818190600052602060002001600090559055505050565b600101611cd1565b505050565b6000546001600160a01b031633146112295760405163118cdaa760e01b8152336004820152602401610725565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b50805460008255906000526020600020908101906109db91905b80821115611cca5760008155600101611e17565b600060208284031215611e3d57600080fd5b5035919050565b6001600160a01b03811681146109db57600080fd5b600060208284031215611e6b57600080fd5b8135611e7681611e44565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ebc57611ebc611e7d565b604052919050565b600067ffffffffffffffff821115611ede57611ede611e7d565b5060051b60200190565b60006020808385031215611efb57600080fd5b823567ffffffffffffffff811115611f1257600080fd5b8301601f81018513611f2357600080fd5b8035611f36611f3182611ec4565b611e93565b81815260059190911b82018301908381019087831115611f5557600080fd5b928401925b82841015611f7357833582529284019290840190611f5a565b979650505050505050565b60008151808452602080850194506020840160005b83811015611faf57815187529582019590820190600101611f93565b509495945050505050565b602081526000611e766020830184611f7e565b60008060408385031215611fe057600080fd5b8235611feb81611e44565b91506020830135611ffb81611e44565b809150509250929050565b6000806040838503121561201957600080fd5b823561202481611e44565b946020939093013593505050565b6000602080838503121561204557600080fd5b825167ffffffffffffffff81111561205c57600080fd5b8301601f8101851361206d57600080fd5b805161207b611f3182611ec4565b81815260059190911b8201830190838101908783111561209a57600080fd5b928401925b82841015611f735783518252928401929084019061209f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016120f6576120f66120ce565b5060010190565b60006020828403121561210f57600080fd5b8151611e7681611e44565b60408152600061212d6040830185611f7e565b90508260208301529392505050565b60006020828403121561214e57600080fd5b81518015158114611e7657600080fd5b81810381811115611cc457611cc46120ce565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206c75f8e55a246a7bea765f7cd543930e1bbcb286c740216c93940b5fe589e3e864736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80638da5cb5b116100f7578063baa51f8611610095578063e64a21f311610064578063e64a21f314610572578063f2fde38b14610592578063f453f531146105b2578063fe34d19f146105d257600080fd5b8063baa51f86146104b6578063ca2169d4146104e6578063cc64045814610506578063e3c998fe1461053c57600080fd5b80639d548b13116100d15780639d548b13146104075780639ee4af1014610427578063a694fc3a1461045d578063a860c1361461047d57600080fd5b80638da5cb5b146103b45780638dcb4061146103d25780638f169816146103e757600080fd5b806335c640b11161016457806363de9b121161013e57806363de9b12146103575780636ec6837d1461035f578063715018a61461037f57806385dab8451461039457600080fd5b806335c640b1146102c95780634410734b14610301578063522d11671461033757600080fd5b8063230f436d116101a0578063230f436d1461024f5780632e17de781461027157806331167aa01461029157806335322f37146102a757600080fd5b806304223ed0146101c757806320fd6b11146101ef57806322a2c9d61461022f575b600080fd5b3480156101d357600080fd5b506101dc600a81565b6040519081526020015b60405180910390f35b3480156101fb57600080fd5b5061021f61020a366004611e2b565b60009081526008602052604090205460ff1690565b60405190151581526020016101e6565b34801561023b57600080fd5b506101dc61024a366004611e59565b6105f2565b34801561025b57600080fd5b5061026f61026a366004611ee8565b6106cd565b005b34801561027d57600080fd5b5061026f61028c366004611e2b565b6109de565b34801561029d57600080fd5b506101dc600a5481565b3480156102b357600080fd5b506102bc610b21565b6040516101e69190611fba565b3480156102d557600080fd5b506002546102e9906001600160a01b031681565b6040516001600160a01b0390911681526020016101e6565b34801561030d57600080fd5b506102e961031c366004611e59565b6006602052600090815260409020546001600160a01b031681565b34801561034357600080fd5b5061026f610352366004611e59565b610def565b61026f610e19565b34801561036b57600080fd5b5061026f61037a366004611fcd565b6111e1565b34801561038b57600080fd5b5061026f611217565b3480156103a057600080fd5b506102bc6103af366004611e59565b61122b565b3480156103c057600080fd5b506000546001600160a01b03166102e9565b3480156103de57600080fd5b506102bc611297565b3480156103f357600080fd5b506101dc610402366004612006565b6116d9565b34801561041357600080fd5b506004546102e9906001600160a01b031681565b34801561043357600080fd5b506102e9610442366004611e2b565b6009602052600090815260409020546001600160a01b031681565b34801561046957600080fd5b5061026f610478366004611e2b565b61170a565b34801561048957600080fd5b506102e9610498366004611e59565b6001600160a01b039081166000908152600660205260409020541690565b3480156104c257600080fd5b5061021f6104d1366004611e2b565b60086020526000908152604090205460ff1681565b3480156104f257600080fd5b506005546102e9906001600160a01b031681565b34801561051257600080fd5b506101dc610521366004611e59565b6001600160a01b031660009081526007602052604090205490565b34801561054857600080fd5b506102e9610557366004611e2b565b6000908152600960205260409020546001600160a01b031690565b34801561057e57600080fd5b5061026f61058d366004611ee8565b6118ae565b34801561059e57600080fd5b5061026f6105ad366004611e59565b611b3c565b3480156105be57600080fd5b506003546102e9906001600160a01b031681565b3480156105de57600080fd5b5061026f6105ed366004611e59565b611b77565b600254604051637c0bda3f60e11b81526001600160a01b038381166004830152600092839291169063f817b47e90602401600060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106689190810190612032565b90506000805b82518110156106c5576008600084838151811061068d5761068d6120b8565b60209081029190910181015182528101919091526040016000205460ff166106bd57816106b9816120e4565b9250505b60010161066e565b509392505050565b6106d5611ba1565b600081511180156106e857506032815111155b61072e5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642062617463682073697a6560701b60448201526064015b60405180910390fd5b600061073933611bcb565b905060005b82518110156109855760025483516001600160a01b03808516921690636352211e90869085908110610772576107726120b8565b60200260200101516040518263ffffffff1660e01b815260040161079891815260200190565b602060405180830381865afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d991906120fd565b6001600160a01b03161461081b5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610725565b60086000848381518110610831576108316120b8565b60209081029190910181015182528101919091526040016000205460ff161561088d5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481cdd185ad95960921b6044820152606401610725565b6001600860008584815181106108a5576108a56120b8565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555081600960008584815181106108e9576108e96120b8565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060076000836001600160a01b03166001600160a01b0316815260200190815260200160002083828151811061095a5761095a6120b8565b602090810291909101810151825460018181018555600094855292909320909201919091550161073e565b50806001600160a01b0316336001600160a01b03167f4ea506d6f308b8335449a84375e347bb7d8c05696fbf36178d03a3d82479a7e5846040516109c99190611fba565b60405180910390a3506109db60018055565b50565b6109e6611ba1565b60006109f133611bcb565b6000838152600960205260409020549091506001600160a01b03808316911614610a4e5760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420796f7572207374616b6560901b6044820152606401610725565b60008281526008602052604090205460ff16610a995760405162461bcd60e51b815260206004820152600a602482015269139bdd081cdd185ad95960b21b6044820152606401610725565b6000828152600860209081526040808320805460ff191690556009825280832080546001600160a01b03191690556001600160a01b038416835260079091529020610ae49083611cce565b6040518281526001600160a01b0382169033907f390b1276974b9463e5d66ab10df69b6f3d7b930eb066a0e66df327edd2cc811c906020016109c9565b6060610b2b611ba1565b6000610b3633611bcb565b6001600160a01b038116600090815260076020908152604080832080548251818502810185019093528083529495509293909291830182828015610b9957602002820191906000526020600020905b815481526020019060010190808311610b85575b505050505090506000815111610be35760405162461bcd60e51b815260206004820152600f60248201526e4e6f207374616b656420626f78657360881b6044820152606401610725565b603281511115610c355760405162461bcd60e51b815260206004820152601a60248201527f546f6f206d616e79207374616b65642c207573652062617463680000000000006044820152606401610725565b6000815167ffffffffffffffff811115610c5157610c51611e7d565b604051908082528060200260200182016040528015610c7a578160200160208202803683370190505b50905060005b8251811015610cc857828181518110610c9b57610c9b6120b8565b6020026020010151828281518110610cb557610cb56120b8565b6020908102919091010152600101610c80565b5060005b8151811015610d7257600060086000848481518110610ced57610ced6120b8565b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550600060096000848481518110610d3257610d326120b8565b602090810291909101810151825281019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055600101610ccc565b506001600160a01b0383166000908152600760205260408120610d9491611dfd565b826001600160a01b0316336001600160a01b03167ff2374f12892bb254c85749c1083758bf7f0d28a86e70fe60453826cfbd360e8983604051610dd79190611fba565b60405180910390a392505050610dec60018055565b90565b610df7611d80565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600660205260409020546001600160a01b031680610e6f5760405162461bcd60e51b815260206004820152600d60248201526c151090481b9bdd08199bdd5b99609a1b6044820152606401610725565b60048054604051630312d49360e21b81526001600160a01b038481169382019390935260009290911690630c4b524c90602401600060405180830381865afa158015610ebf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ee79190810190612032565b8051909150600a811015610f335760405162461bcd60e51b81526020600482015260136024820152724e6565642031302b2068616d6275726765727360681b6044820152606401610725565b600a541561103057600a54341015610f805760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606401610725565b600560009054906101000a90046001600160a01b03166001600160a01b03166322081c12600a546040518263ffffffff1660e01b81526004016000604051808303818588803b158015610fd257600080fd5b505af193505050508015610fe4575060015b6110305760405162461bcd60e51b815260206004820152601960248201527f5061796d656e742070726f63657373696e67206661696c6564000000000000006044820152606401610725565b60408051600a8082526101608201909252600091602082016101408036833701905050905060005b600a8110156110a057838181518110611073576110736120b8565b602002602001015182828151811061108d5761108d6120b8565b6020908102919091010152600101611058565b5060005b600a81101561113a5760045482516001600160a01b039091169063cf2d2cd6908490849081106110d6576110d66120b8565b60200260200101516040518263ffffffff1660e01b81526004016110fc91815260200190565b600060405180830381600087803b15801561111657600080fd5b505af115801561112a573d6000803e3d6000fd5b5050600190920191506110a49050565b50600254604051631c740b2760e21b81526001600160a01b038681166004830152909116906371d02c9c90602401600060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b5050604051600181526001600160a01b03871692503391507f5a018eb2b1f8f511d6db6df61037a448e834587d49471ca2d20d28a6b0353bf79060200160405180910390a350505050565b6111e9611d80565b6001600160a01b03918216600090815260066020526040902080546001600160a01b03191691909216179055565b61121f611d80565b6112296000611dad565b565b6001600160a01b03811660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561128b57602002820191906000526020600020905b815481526020019060010190808311611277575b50505050509050919050565b60606112a1611ba1565b60006112ac33611bcb565b600254604051637c0bda3f60e11b81526001600160a01b0380841660048301529293506000929091169063f817b47e90602401600060405180830381865afa1580156112fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113249190810190612032565b9050600081511161136b5760405162461bcd60e51b81526020600482015260116024820152704e6f20626f78657320746f207374616b6560781b6044820152606401610725565b6000815167ffffffffffffffff81111561138757611387611e7d565b6040519080825280602002602001820160405280156113b0578160200160208202803683370190505b5090506000805b835181101561144557600860008583815181106113d6576113d66120b8565b60209081029190910181015182528101919091526040016000205460ff1661143d5783818151811061140a5761140a6120b8565b6020026020010151838381518110611424576114246120b8565b602090810291909101015281611439816120e4565b9250505b6001016113b7565b50600081116114965760405162461bcd60e51b815260206004820152601860248201527f416c6c20626f78657320616c7265616479207374616b656400000000000000006044820152606401610725565b60328111156114e75760405162461bcd60e51b815260206004820152601960248201527f546f6f206d616e7920626f7865732c20757365206261746368000000000000006044820152606401610725565b60008167ffffffffffffffff81111561150257611502611e7d565b60405190808252806020026020018201604052801561152b578160200160208202803683370190505b50905060005b828110156115785783818151811061154b5761154b6120b8565b6020026020010151828281518110611565576115656120b8565b6020908102919091010152600101611531565b5060005b8281101561167c5760016008600084848151811061159c5761159c6120b8565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555085600960008484815181106115e0576115e06120b8565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060076000876001600160a01b03166001600160a01b03168152602001908152602001600020828281518110611651576116516120b8565b602090810291909101810151825460018181018555600094855292909320909201919091550161157c565b50846001600160a01b0316336001600160a01b03167f7979069e078a7f13726ef2d2a2f6e564ec1e603f5e756d64096f5f6dd2271fda83856040516116c292919061211a565b60405180910390a3945050505050610dec60018055565b600760205281600052604060002081815481106116f557600080fd5b90600052602060002001600091509150505481565b611712611ba1565b600061171d33611bcb565b6002546040516331a9108f60e11b8152600481018590529192506001600160a01b0380841692911690636352211e90602401602060405180830381865afa15801561176c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179091906120fd565b6001600160a01b0316146117d25760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b6044820152606401610725565b60008281526008602052604090205460ff16156118225760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481cdd185ad95960921b6044820152606401610725565b60008281526008602090815260408083208054600160ff1990911681179091556009835281842080546001600160a01b0319166001600160a01b0387169081179091558085526007845282852080549283018155855293839020018590555184815233917f99039fcf0a98f484616c5196ee8b2ecfa971babf0b519848289ea4db381f85f791016109c9565b6118b6611ba1565b600081511180156118c957506032815111155b61190a5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642062617463682073697a6560701b6044820152606401610725565b600061191533611bcb565b905060005b8251811015611af857816001600160a01b031660096000858481518110611943576119436120b8565b6020908102919091018101518252810191909152604001600020546001600160a01b0316146119a55760405162461bcd60e51b815260206004820152600e60248201526d4e6f7420796f7572207374616b6560901b6044820152606401610725565b600860008483815181106119bb576119bb6120b8565b60209081029190910181015182528101919091526040016000205460ff16611a125760405162461bcd60e51b815260206004820152600a602482015269139bdd081cdd185ad95960b21b6044820152606401610725565b600060086000858481518110611a2a57611a2a6120b8565b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550600060096000858481518110611a6f57611a6f6120b8565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611af060076000846001600160a01b03166001600160a01b03168152602001908152602001600020848381518110611ae357611ae36120b8565b6020026020010151611cce565b60010161191a565b50806001600160a01b0316336001600160a01b03167ff2374f12892bb254c85749c1083758bf7f0d28a86e70fe60453826cfbd360e89846040516109c99190611fba565b611b44611d80565b6001600160a01b038116611b6e57604051631e4fbdf760e01b815260006004820152602401610725565b6109db81611dad565b611b7f611d80565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600260015403611bc457604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6003546000906001600160a01b031615801590611c51575060035460405163304fa5e160e01b81526001600160a01b0384811660048301529091169063304fa5e190602401602060405180830381865afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c51919061213c565b15611cca57600354604051635430609b60e11b81526001600160a01b0384811660048301529091169063a860c13690602401602060405180830381865afa158015611ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc491906120fd565b92915050565b5090565b60005b8254811015611d7b5781838281548110611ced57611ced6120b8565b906000526020600020015403611d735782548390611d0d9060019061215e565b81548110611d1d57611d1d6120b8565b9060005260206000200154838281548110611d3a57611d3a6120b8565b906000526020600020018190555082805480611d5857611d58612171565b60019003818190600052602060002001600090559055505050565b600101611cd1565b505050565b6000546001600160a01b031633146112295760405163118cdaa760e01b8152336004820152602401610725565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b50805460008255906000526020600020908101906109db91905b80821115611cca5760008155600101611e17565b600060208284031215611e3d57600080fd5b5035919050565b6001600160a01b03811681146109db57600080fd5b600060208284031215611e6b57600080fd5b8135611e7681611e44565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611ebc57611ebc611e7d565b604052919050565b600067ffffffffffffffff821115611ede57611ede611e7d565b5060051b60200190565b60006020808385031215611efb57600080fd5b823567ffffffffffffffff811115611f1257600080fd5b8301601f81018513611f2357600080fd5b8035611f36611f3182611ec4565b611e93565b81815260059190911b82018301908381019087831115611f5557600080fd5b928401925b82841015611f7357833582529284019290840190611f5a565b979650505050505050565b60008151808452602080850194506020840160005b83811015611faf57815187529582019590820190600101611f93565b509495945050505050565b602081526000611e766020830184611f7e565b60008060408385031215611fe057600080fd5b8235611feb81611e44565b91506020830135611ffb81611e44565b809150509250929050565b6000806040838503121561201957600080fd5b823561202481611e44565b946020939093013593505050565b6000602080838503121561204557600080fd5b825167ffffffffffffffff81111561205c57600080fd5b8301601f8101851361206d57600080fd5b805161207b611f3182611ec4565b81815260059190911b8201830190838101908783111561209a57600080fd5b928401925b82841015611f735783518252928401929084019061209f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016120f6576120f66120ce565b5060010190565b60006020828403121561210f57600080fd5b8151611e7681611e44565b60408152600061212d6040830185611f7e565b90508260208301529392505050565b60006020828403121561214e57600080fd5b81518015158114611e7657600080fd5b81810381811115611cc457611cc46120ce565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206c75f8e55a246a7bea765f7cd543930e1bbcb286c740216c93940b5fe589e3e864736f6c63430008170033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "checkStaked(uint256)": {
        "params": {
          "tokenId": "Box token ID"
        },
        "returns": {
          "_0": "true if staked"
        }
      },
      "getStakeableCount(address)": {
        "params": {
          "tba": "TBA address"
        },
        "returns": {
          "_0": "Number of boxes that can be staked"
        }
      },
      "getStaker(uint256)": {
        "params": {
          "tokenId": "Box token ID"
        },
        "returns": {
          "_0": "TBA address that staked the box"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setFoodScramble(address)": {
        "params": {
          "_foodScramble": "New FoodScramble contract address"
        }
      },
      "setSpecialBox(address)": {
        "params": {
          "_specialBox": "New SpecialBox contract address"
        }
      },
      "stake(uint256)": {
        "params": {
          "tokenId": "ID box yang akan di-stake"
        }
      },
      "stakeAll()": {
        "details": "Auto-detect semua box dan stake sekaligus",
        "returns": {
          "_0": "tokenIds Array ID box yang di-stake"
        }
      },
      "stakeBatch(uint256[])": {
        "params": {
          "tokenIds": "Array ID box yang akan di-stake"
        }
      },
      "stakedBoxBalance(address)": {
        "params": {
          "tba": "TBA address"
        },
        "returns": {
          "_0": "Array of staked token IDs"
        }
      },
      "totalStakedBoxes(address)": {
        "params": {
          "tba": "TBA address"
        },
        "returns": {
          "_0": "Total staked count"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint256)": {
        "params": {
          "tokenId": "ID box yang akan di-unstake"
        }
      },
      "unstakeAll()": {
        "returns": {
          "_0": "tokenIds Array ID box yang di-unstake"
        }
      },
      "unstakeBatch(uint256[])": {
        "params": {
          "tokenIds": "Array ID box yang akan di-unstake"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkStaked(uint256)": {
        "notice": "Check if box is staked"
      },
      "getStakeableCount(address)": {
        "notice": "Get stakeable boxes count (boxes that can be staked)"
      },
      "getStaker(uint256)": {
        "notice": "Get who staked the box"
      },
      "setFoodScramble(address)": {
        "notice": "Set FoodScramble contract address"
      },
      "setSpecialBox(address)": {
        "notice": "Set SpecialBox contract address"
      },
      "stake(uint256)": {
        "notice": "Stake satu box"
      },
      "stakeAll()": {
        "notice": "Stake semua box yang dimiliki di TBA"
      },
      "stakeBatch(uint256[])": {
        "notice": "Stake multiple boxes"
      },
      "stakedBoxBalance(address)": {
        "notice": "Get TBA's staked boxes"
      },
      "totalStakedBoxes(address)": {
        "notice": "Get total staked boxes count for TBA"
      },
      "unstake(uint256)": {
        "notice": "Unstake satu box"
      },
      "unstakeAll()": {
        "notice": "Unstake semua box yang di-stake di TBA"
      },
      "unstakeBatch(uint256[])": {
        "notice": "Unstake multiple boxes"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5134,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16028,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "specialBox",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISpecialBox)15985"
      },
      {
        "astId": 16031,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "foodScramble",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFoodScramble)16000"
      },
      {
        "astId": 16034,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "hamburger",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IFoodNFT)16014"
      },
      {
        "astId": 16037,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "paymentGateway",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPaymentGateway)16018"
      },
      {
        "astId": 16041,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "tbaList",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 16046,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "staked",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 16050,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "isStaked",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 16054,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "stakedBy",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16057,
        "contract": "contracts/SpecialBoxStake.sol:SpecialBoxStake",
        "label": "specialBoxFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFoodNFT)16014": {
        "encoding": "inplace",
        "label": "contract IFoodNFT",
        "numberOfBytes": "20"
      },
      "t_contract(IFoodScramble)16000": {
        "encoding": "inplace",
        "label": "contract IFoodScramble",
        "numberOfBytes": "20"
      },
      "t_contract(IPaymentGateway)16018": {
        "encoding": "inplace",
        "label": "contract IPaymentGateway",
        "numberOfBytes": "20"
      },
      "t_contract(ISpecialBox)15985": {
        "encoding": "inplace",
        "label": "contract ISpecialBox",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}