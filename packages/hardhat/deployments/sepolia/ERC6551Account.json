{
  "address": "0x8328a8c35f7D8836B17d1aC53c9dF6cAc0957B8b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "NFTReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7d21a301ffce628bc1839ef71c7b7579555e00a4ed9dfb6fab0047926aca671c",
  "receipt": {
    "to": null,
    "from": "0x9bF68A0f0be9A9B6dCeb4D5675745c2f7cFb9483",
    "contractAddress": "0x8328a8c35f7D8836B17d1aC53c9dF6cAc0957B8b",
    "transactionIndex": 92,
    "gasUsed": "821107",
    "logsBloom": "0x
    "blockHash": "0xc45df0cf5a2a14e35ff655c15f94ffcd24f979191e59ee6dfea21f251c48dd00",
    "transactionHash": "0x7d21a301ffce628bc1839ef71c7b7579555e00a4ed9dfb6fab0047926aca671c",
    "logs": [],
    "blockNumber": 9350937,
    "cumulativeGasUsed": "11762652",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "71a4177d3c394030068775462831b2af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NFTReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"executeCall(address,uint256,bytes)\":{\"params\":{\"data\":\"Call data\",\"to\":\"Target contract address\",\"value\":\"ETH to send\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"operator\":\"The address which called `safeTransferFrom`\",\"tokenId\":\"The NFT identifier which is being transferred\"},\"returns\":{\"_0\":\"bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\"}},\"withdraw(uint256)\":{\"details\":\"Only NFT owner can call\"}},\"title\":\"ERC-6551 Smart Account (TBA) for NFT-based ownership & Alchemy AA compatible\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeCall(address,uint256,bytes)\":{\"notice\":\"Executes a call on behalf of the account\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"EIP-1271 signature validator for contract wallets\"},\"nonce()\":{\"notice\":\"View nonce for replay protection\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handle the receipt of an NFT\"},\"owner()\":{\"notice\":\"Returns the owner (current holder of NFT)\"},\"supportsInterface(bytes4)\":{\"notice\":\"Support introspection for interfaces\"},\"token()\":{\"notice\":\"Returns the token that owns this account\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw native tokens (e.g. MON/ETH) from this TBA to NFT holder EOA\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC6551Account.sol\":\"ERC6551Account\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/ERC6551BytecodeLib.sol\\\";\\nimport \\\"./interfaces/IERC6551Account.sol\\\";\\n\\n/// @title ERC-6551 Smart Account (TBA) for NFT-based ownership & Alchemy AA compatible\\ncontract ERC6551Account is IERC165, IERC1271, IERC6551Account, IERC721Receiver, ReentrancyGuard {\\n    uint256 private _nonce;\\n\\n    event Withdraw(address indexed owner, uint256 amount);\\n    event NFTReceived(address indexed operator, address indexed from, uint256 indexed tokenId, bytes data);\\n\\n    /// @notice Executes a call on behalf of the account\\n    /// @param to Target contract address\\n    /// @param value ETH to send\\n    /// @param data Call data\\n    function executeCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable returns (bytes memory result) {\\n        require(msg.sender == owner(), \\\"Not token owner\\\");\\n\\n        bool success;\\n        (success, result) = to.call{ value: value }(data);\\n\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n\\n        _nonce++;\\n    }\\n\\n    /// @notice Returns the token that owns this account\\n    function token() public view returns (uint256 chainId, address tokenContract, uint256 tokenId) {\\n        uint256 size = address(this).code.length;\\n        return abi.decode(Bytecode.codeAt(address(this), size - 0x60, size), (uint256, address, uint256));\\n    }\\n\\n    /// @notice Returns the owner (current holder of NFT)\\n    function owner() public view returns (address) {\\n        (uint256 chainId, address tokenContract, uint256 tokenId) = token();\\n        if (chainId != block.chainid) return address(0);\\n\\n        return IERC721(tokenContract).ownerOf(tokenId);\\n    }\\n\\n    /// @notice View nonce for replay protection\\n    function nonce() external view returns (uint256) {\\n        return _nonce;\\n    }\\n\\n    /// @notice EIP-1271 signature validator for contract wallets\\n    function isValidSignature(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) external view override(IERC1271, IERC6551Account) returns (bytes4 magicValue) {\\n        bool valid = SignatureChecker.isValidSignatureNow(owner(), hash, signature);\\n        return valid ? IERC1271.isValidSignature.selector : bytes4(0);\\n    }\\n\\n    /// @notice Handle the receipt of an NFT\\n    /// @param operator The address which called `safeTransferFrom`\\n    /// @param from The address which previously owned the token\\n    /// @param tokenId The NFT identifier which is being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        emit NFTReceived(operator, from, tokenId, data);\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /// @notice Support introspection for interfaces\\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n        return\\n            interfaceId == type(IERC165).interfaceId ||\\n            interfaceId == type(IERC1271).interfaceId ||\\n            interfaceId == type(IERC6551Account).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId;\\n    }\\n\\n    /// @notice Withdraw native tokens (e.g. MON/ETH) from this TBA to NFT holder EOA\\n    /// @dev Only NFT owner can call\\n    function withdraw(uint256 amount) external nonReentrant {\\n        address _owner = owner();\\n        require(msg.sender == _owner, \\\"Not token owner\\\");\\n        require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\n\\n        (bool sent, ) = _owner.call{ value: amount }(\\\"\\\");\\n        require(sent, \\\"Withdraw failed\\\");\\n\\n        emit Withdraw(_owner, amount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xe1fa13cf7b0f1bb6ec1afc120a957b84540ce87d1decc8a264d3c2e2f3187119\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/// @dev the ERC-165 identifier for this interface is `0x400a0398`\\ninterface IERC6551Account {\\n    /// @dev Token bound accounts MUST implement a `receive` function.\\n    ///\\n    /// Token bound accounts MAY perform arbitrary logic to restrict conditions\\n    /// under which Ether can be received.\\n    receive() external payable;\\n\\n    /// @dev Executes `call` on address `to`, with value `value` and calldata\\n    /// `data`.\\n    ///\\n    /// MUST revert and bubble up errors if call fails.\\n    ///\\n    /// By default, token bound accounts MUST allow the owner of the ERC-721 token\\n    /// which owns the account to execute arbitrary calls using `executeCall`.\\n    ///\\n    /// Token bound accounts MAY implement additional authorization mechanisms\\n    /// which limit the ability of the ERC-721 token holder to execute calls.\\n    ///\\n    /// Token bound accounts MAY implement additional execution functions which\\n    /// grant execution permissions to other non-owner accounts.\\n    ///\\n    /// @return The result of the call\\n    function executeCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n\\n    /// @dev Returns identifier of the ERC-721 token which owns the\\n    /// account\\n    ///\\n    /// The return value of this function MUST be constant - it MUST NOT change\\n    /// over time.\\n    ///\\n    /// @return chainId The EIP-155 ID of the chain the ERC-721 token exists on\\n    /// @return tokenContract The contract address of the ERC-721 token\\n    /// @return tokenId The ID of the ERC-721 token\\n    function token()\\n        external\\n        view\\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\\n\\n    /// @dev Returns the owner of the ERC-721 token which controls the account\\n    /// if the token exists.\\n    ///\\n    /// This is value is obtained by calling `ownerOf` on the ERC-721 contract.\\n    ///\\n    /// @return Address of the owner of the ERC-721 token which owns the account\\n    function owner() external view returns (address);\\n\\n    /// @dev Returns a nonce value that is updated on every successful transaction\\n    ///\\n    /// @return The current account nonce\\n    function nonce() external view returns (uint256);\\n\\n    /// @dev EIP-1271 signature validation method for contract wallets.\\n    /// @param hash Hash of the signed data.\\n    /// @param signature Signature byte array associated with hash.\\n    /// @return magicValue A bytes4 magic value if signature is valid, otherwise 0x0.\\n    function isValidSignature(\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) external view returns (bytes4 magicValue);\\n}\",\"keccak256\":\"0xd26d4f59788e9070d5672377ce5741bc63431f9f1f4b779d4b0aa365852dd704\",\"license\":\"MIT\"},\"contracts/lib/ERC6551BytecodeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Bytecode {\\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n    /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n    function creationCodeFor(\\n        bytes memory _code\\n    ) internal pure returns (bytes memory) {\\n        /*\\n        0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n        0x01    0x80         0x80        DUP1                size size\\n        0x02    0x60         0x600e      PUSH1 14            14 size size\\n        0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n        0x04    0x39         0x39        CODECOPY            size\\n        0x05    0x60         0x6000      PUSH1 00            0 size\\n        0x06    0xf3         0xf3        RETURN\\n        <CODE>\\n        */\\n\\n        return\\n            abi.encodePacked(\\n                hex\\\"63\\\",\\n                uint32(_code.length),\\n                hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n                _code\\n            );\\n    }\\n\\n    /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n    function codeSize(address _addr) internal view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n    }\\n\\n    /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n    function codeAt(\\n        address _addr,\\n        uint256 _start,\\n        uint256 _end\\n    ) internal view returns (bytes memory oCode) {\\n        uint256 csize = codeSize(_addr);\\n        if (csize == 0) return bytes(\\\"\\\");\\n\\n        if (_start > csize) return bytes(\\\"\\\");\\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\\n\\n        unchecked {\\n            uint256 reqSize = _end - _start;\\n            uint256 maxSize = csize - _start;\\n\\n            uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n            assembly {\\n                // allocate output byte array - this could also be done without assembly\\n                // by using o_code = new bytes(size)\\n                oCode := mload(0x40)\\n                // new \\\"memory end\\\" including padding\\n                mstore(\\n                    0x40,\\n                    add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n                )\\n                // store length in memory\\n                mstore(oCode, size)\\n                // actually retrieve the code, this needs assembly\\n                extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x90bc162f4f2918315425125af7977788675531974a2fee306d4c50accd5f6bdc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055610d7e806100256000396000f3fe60806040526004361061007f5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461013b5780639e5d4c4914610168578063affed0e014610188578063fc0c546a146101a657600080fd5b806301ffc9a71461008b578063150b7a02146100c05780631626ba7e146100f95780632e1a7d4d1461011957600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a6366004610969565b6101de565b60405190151581526020015b60405180910390f35b3480156100cc57600080fd5b506100e06100db3660046109f1565b61024b565b6040516001600160e01b031990911681526020016100b7565b34801561010557600080fd5b506100e0610114366004610a7a565b6102ad565b34801561012557600080fd5b50610139610134366004610b35565b6102e1565b005b34801561014757600080fd5b50610150610472565b6040516001600160a01b0390911681526020016100b7565b61017b610176366004610b4e565b610508565b6040516100b79190610bfa565b34801561019457600080fd5b506001546040519081526020016100b7565b3480156101b257600080fd5b506101bb6105f3565b604080519384526001600160a01b039092166020840152908201526060016100b7565b60006001600160e01b031982166301ffc9a760e01b148061020f57506001600160e01b03198216630b135d3f60e11b145b8061022a57506001600160e01b03198216632b165cf360e11b145b8061024557506001600160e01b03198216630a85bd0160e11b145b92915050565b600083856001600160a01b0316876001600160a01b03167f1d823cdc8f0514a95b53538df2d2f3deaf98d1c534c6e750daa593173c27f8f08686604051610293929190610c0d565b60405180910390a450630a85bd0160e11b95945050505050565b6000806102c26102bb610472565b858561062f565b9050806102d05760006102d9565b630b135d3f60e11b5b949350505050565b6102e9610693565b60006102f3610472565b9050336001600160a01b038216146103445760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b60448201526064015b60405180910390fd5b8147101561038b5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161033b565b6000816001600160a01b03168360405160006040518083038185875af1925050503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b50509050806104205760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b604482015260640161033b565b816001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648460405161045b91815260200190565b60405180910390a2505061046f6001600055565b50565b6000806000806104806105f3565b925092509250468314610497576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190610c3c565b935050505090565b6060610512610472565b6001600160a01b0316336001600160a01b0316146105645760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b604482015260640161033b565b6000856001600160a01b0316858585604051610581929190610c59565b60006040518083038185875af1925050503d80600081146105be576040519150601f19603f3d011682016040523d82523d6000602084013e6105c3565b606091505b5092509050806105d557815160208301fd5b600180549060006105e583610c7f565b919050555050949350505050565b6000808030803b906106109061060a606084610c98565b836106bd565b8060200190518101906106239190610cab565b93509350935050909192565b600080600061063e8585610772565b509092509050600081600381111561065857610658610ce4565b1480156106765750856001600160a01b0316826001600160a01b0316145b8061068757506106878686866107bf565b925050505b9392505050565b6002600054036106b657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6060833b60008190036106e057505060408051602081019091526000815261068c565b808411156106fe57505060408051602081019091526000815261068c565b838310156107305760405163162544fd60e11b815260048101829052602481018590526044810184905260640161033b565b83830384820360008282106107455782610747565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b600080600083516041036107ac5760208401516040850151606086015160001a61079e8882858561089a565b9550955095505050506107b8565b50508151600091506002905b9250925092565b6000806000856001600160a01b031685856040516024016107e1929190610cfa565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516108169190610d13565b600060405180830381855afa9150503d8060008114610851576040519150601f19603f3d011682016040523d82523d6000602084013e610856565b606091505b509150915081801561086a57506020815110155b801561068757508051630b135d3f60e11b9061088f9083016020908101908401610d2f565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156108d5575060009150600390508261095f565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610929573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109555750600092506001915082905061095f565b9250600091508190505b9450945094915050565b60006020828403121561097b57600080fd5b81356001600160e01b03198116811461068c57600080fd5b6001600160a01b038116811461046f57600080fd5b60008083601f8401126109ba57600080fd5b50813567ffffffffffffffff8111156109d257600080fd5b6020830191508360208285010111156109ea57600080fd5b9250929050565b600080600080600060808688031215610a0957600080fd5b8535610a1481610993565b94506020860135610a2481610993565b935060408601359250606086013567ffffffffffffffff811115610a4757600080fd5b610a53888289016109a8565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610a8d57600080fd5b82359150602083013567ffffffffffffffff80821115610aac57600080fd5b818501915085601f830112610ac057600080fd5b813581811115610ad257610ad2610a64565b604051601f8201601f19908116603f01168101908382118183101715610afa57610afa610a64565b81604052828152886020848701011115610b1357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208284031215610b4757600080fd5b5035919050565b60008060008060608587031215610b6457600080fd5b8435610b6f81610993565b935060208501359250604085013567ffffffffffffffff811115610b9257600080fd5b610b9e878288016109a8565b95989497509550505050565b60005b83811015610bc5578181015183820152602001610bad565b50506000910152565b60008151808452610be6816020860160208601610baa565b601f01601f19169290920160200192915050565b60208152600061068c6020830184610bce565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215610c4e57600080fd5b815161068c81610993565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610c9157610c91610c69565b5060010190565b8181038181111561024557610245610c69565b600080600060608486031215610cc057600080fd5b835192506020840151610cd281610993565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006102d96040830184610bce565b60008251610d25818460208701610baa565b9190910192915050565b600060208284031215610d4157600080fd5b505191905056fea264697066735822122079e983f1786db845202ef83bc50be57825e6fa3f0a17ed5ba839644c7cce09c864736f6c63430008170033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80638da5cb5b1161004e5780638da5cb5b1461013b5780639e5d4c4914610168578063affed0e014610188578063fc0c546a146101a657600080fd5b806301ffc9a71461008b578063150b7a02146100c05780631626ba7e146100f95780632e1a7d4d1461011957600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a6366004610969565b6101de565b60405190151581526020015b60405180910390f35b3480156100cc57600080fd5b506100e06100db3660046109f1565b61024b565b6040516001600160e01b031990911681526020016100b7565b34801561010557600080fd5b506100e0610114366004610a7a565b6102ad565b34801561012557600080fd5b50610139610134366004610b35565b6102e1565b005b34801561014757600080fd5b50610150610472565b6040516001600160a01b0390911681526020016100b7565b61017b610176366004610b4e565b610508565b6040516100b79190610bfa565b34801561019457600080fd5b506001546040519081526020016100b7565b3480156101b257600080fd5b506101bb6105f3565b604080519384526001600160a01b039092166020840152908201526060016100b7565b60006001600160e01b031982166301ffc9a760e01b148061020f57506001600160e01b03198216630b135d3f60e11b145b8061022a57506001600160e01b03198216632b165cf360e11b145b8061024557506001600160e01b03198216630a85bd0160e11b145b92915050565b600083856001600160a01b0316876001600160a01b03167f1d823cdc8f0514a95b53538df2d2f3deaf98d1c534c6e750daa593173c27f8f08686604051610293929190610c0d565b60405180910390a450630a85bd0160e11b95945050505050565b6000806102c26102bb610472565b858561062f565b9050806102d05760006102d9565b630b135d3f60e11b5b949350505050565b6102e9610693565b60006102f3610472565b9050336001600160a01b038216146103445760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b60448201526064015b60405180910390fd5b8147101561038b5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161033b565b6000816001600160a01b03168360405160006040518083038185875af1925050503d80600081146103d8576040519150601f19603f3d011682016040523d82523d6000602084013e6103dd565b606091505b50509050806104205760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b604482015260640161033b565b816001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648460405161045b91815260200190565b60405180910390a2505061046f6001600055565b50565b6000806000806104806105f3565b925092509250468314610497576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190610c3c565b935050505090565b6060610512610472565b6001600160a01b0316336001600160a01b0316146105645760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b604482015260640161033b565b6000856001600160a01b0316858585604051610581929190610c59565b60006040518083038185875af1925050503d80600081146105be576040519150601f19603f3d011682016040523d82523d6000602084013e6105c3565b606091505b5092509050806105d557815160208301fd5b600180549060006105e583610c7f565b919050555050949350505050565b6000808030803b906106109061060a606084610c98565b836106bd565b8060200190518101906106239190610cab565b93509350935050909192565b600080600061063e8585610772565b509092509050600081600381111561065857610658610ce4565b1480156106765750856001600160a01b0316826001600160a01b0316145b8061068757506106878686866107bf565b925050505b9392505050565b6002600054036106b657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6060833b60008190036106e057505060408051602081019091526000815261068c565b808411156106fe57505060408051602081019091526000815261068c565b838310156107305760405163162544fd60e11b815260048101829052602481018590526044810184905260640161033b565b83830384820360008282106107455782610747565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b600080600083516041036107ac5760208401516040850151606086015160001a61079e8882858561089a565b9550955095505050506107b8565b50508151600091506002905b9250925092565b6000806000856001600160a01b031685856040516024016107e1929190610cfa565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b179052516108169190610d13565b600060405180830381855afa9150503d8060008114610851576040519150601f19603f3d011682016040523d82523d6000602084013e610856565b606091505b509150915081801561086a57506020815110155b801561068757508051630b135d3f60e11b9061088f9083016020908101908401610d2f565b149695505050505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156108d5575060009150600390508261095f565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610929573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109555750600092506001915082905061095f565b9250600091508190505b9450945094915050565b60006020828403121561097b57600080fd5b81356001600160e01b03198116811461068c57600080fd5b6001600160a01b038116811461046f57600080fd5b60008083601f8401126109ba57600080fd5b50813567ffffffffffffffff8111156109d257600080fd5b6020830191508360208285010111156109ea57600080fd5b9250929050565b600080600080600060808688031215610a0957600080fd5b8535610a1481610993565b94506020860135610a2481610993565b935060408601359250606086013567ffffffffffffffff811115610a4757600080fd5b610a53888289016109a8565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610a8d57600080fd5b82359150602083013567ffffffffffffffff80821115610aac57600080fd5b818501915085601f830112610ac057600080fd5b813581811115610ad257610ad2610a64565b604051601f8201601f19908116603f01168101908382118183101715610afa57610afa610a64565b81604052828152886020848701011115610b1357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208284031215610b4757600080fd5b5035919050565b60008060008060608587031215610b6457600080fd5b8435610b6f81610993565b935060208501359250604085013567ffffffffffffffff811115610b9257600080fd5b610b9e878288016109a8565b95989497509550505050565b60005b83811015610bc5578181015183820152602001610bad565b50506000910152565b60008151808452610be6816020860160208601610baa565b601f01601f19169290920160200192915050565b60208152600061068c6020830184610bce565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215610c4e57600080fd5b815161068c81610993565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610c9157610c91610c69565b5060010190565b8181038181111561024557610245610c69565b600080600060608486031215610cc057600080fd5b835192506020840151610cd281610993565b80925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006102d96040830184610bce565b60008251610d25818460208701610baa565b9190910192915050565b600060208284031215610d4157600080fd5b505191905056fea264697066735822122079e983f1786db845202ef83bc50be57825e6fa3f0a17ed5ba839644c7cce09c864736f6c63430008170033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "executeCall(address,uint256,bytes)": {
        "params": {
          "data": "Call data",
          "to": "Target contract address",
          "value": "ETH to send"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "operator": "The address which called `safeTransferFrom`",
          "tokenId": "The NFT identifier which is being transferred"
        },
        "returns": {
          "_0": "bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`"
        }
      },
      "withdraw(uint256)": {
        "details": "Only NFT owner can call"
      }
    },
    "title": "ERC-6551 Smart Account (TBA) for NFT-based ownership & Alchemy AA compatible",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeCall(address,uint256,bytes)": {
        "notice": "Executes a call on behalf of the account"
      },
      "isValidSignature(bytes32,bytes)": {
        "notice": "EIP-1271 signature validator for contract wallets"
      },
      "nonce()": {
        "notice": "View nonce for replay protection"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Handle the receipt of an NFT"
      },
      "owner()": {
        "notice": "Returns the owner (current holder of NFT)"
      },
      "supportsInterface(bytes4)": {
        "notice": "Support introspection for interfaces"
      },
      "token()": {
        "notice": "Returns the token that owns this account"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw native tokens (e.g. MON/ETH) from this TBA to NFT holder EOA"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2391,
        "contract": "contracts/ERC6551Account.sol:ERC6551Account",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4441,
        "contract": "contracts/ERC6551Account.sol:ERC6551Account",
        "label": "_nonce",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}