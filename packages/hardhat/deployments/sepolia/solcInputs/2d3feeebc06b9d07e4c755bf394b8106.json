{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Not enough balance for performing a CREATE2 deploy.\n     */\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error Create2FailedDeployment();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Create2InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        if (addr == address(0)) {\n            revert Create2FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/BreadToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BreadToken is ERC20, Ownable {\n    address public gameContract;\n\n    constructor() ERC20(\"Bread\", \"BT\") Ownable(msg.sender) {}\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    /// @notice Mint token Bread\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        // mint token ke user\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/ERC6551AccountProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract ERC6551AccountProxy {\n    // Gunakan slot standar EIP-1967 untuk implementasi proxy\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    constructor(address implementation, bytes memory initData) payable {\n        require(implementation != address(0), \"Zero implementation\");\n\n        // Simpan alamat implementasi di storage slot\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            sstore(slot, implementation)\n        }\n\n        // delegatecall ke implementasi\n        if (initData.length > 0) {\n            (bool success, ) = implementation.delegatecall(initData);\n            require(success, \"Initialization failed\");\n        }\n    }\n\n    fallback() external payable {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            let impl := sload(slot)\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    receive() external payable {}\n}\n\n\n"
    },
    "contracts/ERC6551Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"./ERC6551AccountProxy.sol\";\n\ncontract ERC6551Registry {\n    error InitializationFailed();\n\n    event AccountCreated(address indexed account, address indexed implementation, uint256 chainId, address tokenContract, uint256 tokenId, uint256 salt);\n\n    // Track created accounts to avoid duplicates\n    mapping(address => bool) public createdAccounts;\n    mapping(bytes32 => bool) public usedCombinations;\n\n    function createAccount(\n        address implementation,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        uint256 salt,\n        bytes calldata initData\n    ) external returns (address) {\n        bytes memory proxyCode = abi.encodePacked(\n            type(ERC6551AccountProxy).creationCode,\n            abi.encode(implementation, initData)\n        );\n\n        bytes32 combinationHash = keccak256(abi.encode(implementation, chainId, tokenContract, tokenId, salt));\n        require(!usedCombinations[combinationHash], \"Combination already used\");\n\n        address computed = Create2.computeAddress(bytes32(salt), keccak256(proxyCode));\n        require(!createdAccounts[computed], \"Account already exists\");\n\n        address deployed = Create2.deploy(0, bytes32(salt), proxyCode);\n\n        usedCombinations[combinationHash] = true;\n        createdAccounts[deployed] = true;\n\n        emit AccountCreated(deployed, implementation, chainId, tokenContract, tokenId, salt);\n\n        return deployed;\n    }\n\n    function account(\n        address implementation,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        uint256 salt\n    ) external view returns (address) {\n        bytes memory initData = abi.encode(chainId, tokenContract, tokenId);\n        bytes memory proxyCode = abi.encodePacked(\n            type(ERC6551AccountProxy).creationCode,\n            abi.encode(implementation, initData)\n        );\n\n        return Create2.computeAddress(bytes32(salt), keccak256(proxyCode));\n    }\n}\n"
    },
    "contracts/FaucetMon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract FaucetMon {\n    address public owner;\n    address public allowedCaller;\n\n    event BalanceFunded(address indexed funder, uint256 amount);\n    event BalanceWithdrawn(address indexed owner, uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the contract owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function setAllowedCaller(address _caller) external onlyOwner {\n        allowedCaller = _caller;\n    }\n\n    function faucet(address to, uint256 amount) external {\n        require(msg.sender == allowedCaller, \"Caller not set\");\n        require(address(this).balance >= amount, \"Not enough balance\");\n        payable(to).transfer(amount);\n    }\n\n    // Function to fund the faucet balance\n    function fundFaucet() external payable {\n        require(msg.value > 0, \"Must send native token to fund the faucet\");\n        emit BalanceFunded(msg.sender, msg.value);\n    }\n\n    // Function to withdraw the faucet balance (only owner)\n    function withdrawBalance(uint256 amount) external onlyOwner {\n        require(address(this).balance >= amount, \"Insufficient balance in the faucet\");\n        payable(owner).transfer(amount);\n        emit BalanceWithdrawn(owner, amount);\n    }\n\n    // Allow the contract to receive Ether\n    receive() external payable {}\n}\n"
    },
    "contracts/FoodNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract FoodNFT is ERC721, Ownable {\n    using Strings for uint256;\n\n    uint256 private _tokenIds;\n\n    // alternative to ERC721URIStorage\n    mapping(uint256 => string) private _tokenURIs;\n\n    mapping(address => uint256[]) public mynfts;\n    mapping(address => uint256[]) public myFoods;\n    mapping(address => bool) public minted;\n\n    address public paymentGateway;\n    address public gameContract;\n    uint256 public mintPrice;\n\n    event BoxMinted(address indexed to, uint256 indexed tokenId);\n    event MintPriceUpdated(uint256 oldPrice, uint256 newPrice);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address _paymentGateway,\n        uint256 _mintPrice\n    ) ERC721(name_, symbol_) Ownable(msg.sender) {\n        paymentGateway = _paymentGateway;\n        mintPrice = _mintPrice;\n        _tokenIds = 0;\n    }\n\n    // --- Token URI handling (replacement for ERC721URIStorage) ---\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        if (bytes(_tokenURI).length > 0) {\n            return _tokenURI;\n        }\n\n        // Fallback to baseURI + tokenId if you prefer; empty by default\n        return \"\";\n    }\n\n    function _setTokenURI(uint256 tokenId, string memory _uri) internal virtual {\n        _requireOwned(tokenId);\n        _tokenURIs[tokenId] = _uri;\n    }\n\n    // --- Minting ---\n    function mint(address to, string memory _tokenURI) external payable returns (uint256) {\n        // If there's a paymentGateway enforced, ensure payment is correct.\n        if (paymentGateway != address(0)) {\n            require(msg.value >= mintPrice, \"Insufficient payment\");\n            // Optionally: forward funds to paymentGateway\n            (bool sent, ) = paymentGateway.call{ value: msg.value }(\"\");\n            require(sent, \"Failed to forward payment\");\n        }\n\n        _tokenIds += 1;\n        uint256 tokenId = _tokenIds;\n\n        _safeMint(to, tokenId);\n        _setTokenURI(tokenId, _tokenURI);\n\n        emit BoxMinted(to, tokenId);\n        mynfts[to].push(tokenId);\n        myFoods[to].push(tokenId);\n        return tokenId;\n    }\n\n    // Example administrative setters\n    function setPaymentGateway(address _paymentGateway) external onlyOwner {\n        paymentGateway = _paymentGateway;\n    }\n\n    function setMintPrice(uint256 _newPrice) external onlyOwner {\n        uint256 oldPrice = mintPrice;\n        mintPrice = _newPrice;\n        emit MintPriceUpdated(oldPrice, _newPrice);\n    }\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    // --- Burning ---\n\n    /**\n     * @dev Burns a token and cleans up associated data\n     * @param tokenId The token ID to burn\n     */\n    function burn(uint256 tokenId) external {\n        // Check if caller is owner or approved\n        address owner = _ownerOf(tokenId);\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()) || getApproved(tokenId) == _msgSender(),\n            \"ERC721: caller is not token owner or approved\"\n        );\n\n        // Clean up token URI if it exists\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        // Remove from owner's food list\n        _removeFromOwnerFoods(owner, tokenId);\n\n        // Call the built-in burn function\n        _burn(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Owner can burn any token (for admin purposes)\n     * @param tokenId The token ID to burn\n     */\n    function burnByOwner(uint256 tokenId) external onlyOwner {\n        address owner = _ownerOf(tokenId);\n\n        // Clean up token URI if it exists\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        // Remove from owner's food list\n        _removeFromOwnerFoods(owner, tokenId);\n\n        // Call the built-in burn function\n        _burn(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to remove token from owner's food list\n     * @param owner The owner of the token\n     * @param tokenId The token ID to remove\n     */\n    function _removeFromOwnerFoods(address owner, uint256 tokenId) internal {\n        uint256[] storage ownerFoods = myFoods[owner];\n        for (uint256 i = 0; i < ownerFoods.length; i++) {\n            if (ownerFoods[i] == tokenId) {\n                ownerFoods[i] = ownerFoods[ownerFoods.length - 1];\n                ownerFoods.pop();\n                break;\n            }\n        }\n\n        // Also remove from mynfts array\n        uint256[] storage ownerNFTs = mynfts[owner];\n        for (uint256 i = 0; i < ownerNFTs.length; i++) {\n            if (ownerNFTs[i] == tokenId) {\n                ownerNFTs[i] = ownerNFTs[ownerNFTs.length - 1];\n                ownerNFTs.pop();\n                break;\n            }\n        }\n    }\n\n    // --- Views ---\n    function getMyFoods(address _owner) public view returns (uint256[] memory) {\n        return myFoods[_owner];\n    }\n\n    function getMyNFTs(address _owner) public view returns (uint256[] memory) {\n        return mynfts[_owner];\n    }\n}\n"
    },
    "contracts/FoodScramble.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\nimport \"./ERC6551Registry.sol\";\nimport \"./BreadToken.sol\";\nimport \"./MeatToken.sol\";\nimport \"./LettuceToken.sol\";\nimport \"./TomatoToken.sol\";\nimport \"./FoodNFT.sol\";\nimport \"./FaucetMon.sol\";\nimport \"./interfaces/IPaymentGateway.sol\";\n\ncontract FoodScramble {\n    ERC6551Registry public registry;\n    BreadToken public bread;\n    MeatToken public meat;\n    LettuceToken public lettuce;\n    TomatoToken public tomato;\n    FoodNFT public hamburger;\n    FaucetMon public faucetMon;\n    IPaymentGateway public paymentGateway;\n\n    address public immutable owner;\n\n    Box[] public grid;\n    mapping(address => address) public tbaList;\n    mapping(address => uint256) public player;\n    mapping(address => bool) public canBuy;\n    mapping(address => uint256) public rollCount;\n    mapping(address => uint256) public faucetUsageCount;\n    mapping(address => uint256) public lastFaucetUsage;\n    mapping(address => uint256) public lastMintedSpecialBox;\n    mapping(address => PlayerStats) public stats;\n    mapping(address => mapping(IngredientType => uint256)) public inventory;\n    mapping(address => string) public usernames;\n    mapping(string => address) public nameToAddress;\n    mapping(address => uint256[]) public travelHistory;\n    mapping(address => bool) public isPlayerCreated;\n\n    struct Box {\n        uint256 id;\n        string typeGrid;\n        uint256 ingredientType;\n        uint256 numberOfPlayers;\n    }\n\n    struct PlayerStats {\n        uint256 totalRolls;\n        uint256 ingredientsCollected;\n        uint256 foodsMinted;\n        uint256 lastActive;\n        bool hasSpecialAccess;\n    }\n\n    enum IngredientType {\n        Bread,\n        Meat,\n        Lettuce,\n        Tomato\n    }\n\n    event PlayerMoved(address indexed player, uint256 newPosition);\n    event PlayerCreated(address indexed tba, uint256 gridIndex);\n    event TokenBoundAccountCreated(address indexed eoa, address indexed tba, uint256 startPosition);\n    event IngredientPurchased(address indexed player, uint256 ingredientType, uint256 fee);\n    event IngredientFeeUpdated(uint256 oldFee, uint256 newFee);\n    event FaucetAmountUpdated(uint256 oldAmount, uint256 newAmount);\n    event FaucetCooldownUpdated(uint256 oldCooldown, uint256 newCooldown);\n\n    uint256 public faucetAmount;\n    uint256 public faucetCooldown;\n    uint256 public ingredientFee;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    constructor(\n        address _owner,\n        address _registryAddress,\n        address _breadAddress,\n        address _meatAddress,\n        address _lettuceAddress,\n        address _tomatoAddress,\n        address _hamburgerAddress,\n        address payable _faucetMonAddress,\n        address payable _paymentGatewayAddress\n    ) {\n        owner = _owner;\n        registry = ERC6551Registry(_registryAddress);\n        bread = BreadToken(_breadAddress);\n        meat = MeatToken(_meatAddress);\n        lettuce = LettuceToken(_lettuceAddress);\n        tomato = TomatoToken(_tomatoAddress);\n        hamburger = FoodNFT(_hamburgerAddress);\n        faucetMon = FaucetMon(payable(_faucetMonAddress));\n        paymentGateway = IPaymentGateway(payable(_paymentGatewayAddress));\n\n        string[] memory gridTypes = new string[](20);\n        uint256[] memory ingredientTypes = new uint256[](20);\n\n        gridTypes[0] = \"Stove\";\n        ingredientTypes[0] = 99;\n\n        for (uint256 id = 1; id < 5; id++) {\n            gridTypes[id] = \"Bread\";\n            ingredientTypes[id] = 0;\n        }\n\n        gridTypes[5] = \"Rail\";\n        ingredientTypes[5] = 98;\n\n        for (uint256 id = 6; id < 10; id++) {\n            gridTypes[id] = \"Meat\";\n            ingredientTypes[id] = 1;\n        }\n\n        gridTypes[10] = \"Stove\";\n        ingredientTypes[10] = 99;\n\n        for (uint256 id = 11; id < 15; id++) {\n            gridTypes[id] = \"Lettuce\";\n            ingredientTypes[id] = 2;\n        }\n\n        gridTypes[15] = \"Rail\";\n        ingredientTypes[15] = 98;\n\n        for (uint256 id = 16; id < 20; id++) {\n            gridTypes[id] = \"Tomato\";\n            ingredientTypes[id] = 3;\n        }\n\n        for (uint256 i = 0; i < 20; i++) {\n            grid.push(Box(i, gridTypes[i], ingredientTypes[i], 0));\n        }\n    }\n\n    function getGrid() public view returns (Box[] memory) {\n        return grid;\n    }\n\n    function getMyFoods(address _owner) public view returns (uint256[] memory) {\n        address tba = tbaList[_owner];\n        return hamburger.getMyFoods(tba);\n    }\n\n    function createPlayer(address tba) internal {\n        require(!isPlayerCreated[tba], \"Already registered\");\n\n        for (uint256 i = 0; i < grid.length; i++) {\n            if (keccak256(abi.encodePacked(grid[i].typeGrid)) == keccak256(abi.encodePacked(\"Stove\"))) {\n                player[tba] = i;\n                grid[i].numberOfPlayers += 1;\n                isPlayerCreated[tba] = true;\n\n                emit PlayerCreated(tba, i);\n                return;\n            }\n        }\n\n        revert(\"No Stove grid found\");\n    }\n\n    function createTokenBoundAccount(\n        address _implementation,\n        uint256 _chainId,\n        address _tokenContract,\n        uint256 _tokenId,\n        uint256 _salt,\n        bytes calldata _initData\n    ) external {\n        address newTBA = registry.createAccount(_implementation, _chainId, _tokenContract, _tokenId, _salt, _initData);\n        tbaList[msg.sender] = newTBA;\n\n        createPlayer(newTBA);\n        emit TokenBoundAccountCreated(msg.sender, newTBA, player[newTBA]);\n    }\n\n    function movePlayer() external {\n        address tba = tbaList[msg.sender];\n        require(tba != address(0), \"TBA not found\");\n\n        uint256 nonce = rollCount[tba];\n        uint8 roll = getRandomRoll(tba, nonce);\n        rollCount[tba] = nonce + 1;\n\n        uint256 currentPos = player[tba];\n        require(grid[currentPos].numberOfPlayers > 0, \"Invalid player count\");\n        grid[currentPos].numberOfPlayers -= 1;\n\n        uint256 nextPos = currentPos + roll;\n        if (nextPos >= 20) {\n            nextPos = 0;\n            grid[0].numberOfPlayers += 1;\n        } else {\n            grid[nextPos].numberOfPlayers += 1;\n        }\n\n        player[tba] = nextPos;\n\n        if (grid[nextPos].ingredientType <= 3) {\n            canBuy[tba] = true;\n        }\n\n        emit PlayerMoved(tba, nextPos);\n    }\n\n    // Internal RNG function\n    function getRandomRoll(address playerAddr, uint256 nonce) internal view returns (uint8) {\n        bytes32 hash = keccak256(abi.encodePacked(blockhash(block.number - 1), playerAddr, nonce));\n        return uint8(uint256(hash) % 6) + 1; // hasil 1-6\n    }\n\n    /// @notice Owner bisa set biaya payment amount manual\n    function setFaucetAmount(uint256 _newAmount) external onlyOwner {\n        uint256 oldAmount = faucetAmount;\n        faucetAmount = _newAmount;\n        emit FaucetAmountUpdated(oldAmount, faucetAmount);\n    }\n\n    function setIngredientFee(uint256 _newFee) external onlyOwner {\n        uint256 oldFee = ingredientFee;\n        ingredientFee = _newFee;\n        emit IngredientFeeUpdated(oldFee, ingredientFee);\n    }\n\n    function setFaucetCooldown(uint256 _newCooldown) external onlyOwner {\n        uint256 oldCooldown = faucetCooldown;\n        faucetCooldown = _newCooldown;\n        emit FaucetCooldownUpdated(oldCooldown, faucetCooldown);\n    }\n\n    function getIngredientFee() external view returns (uint256) {\n        return ingredientFee;\n    }\n\n    function getFaucetAmount() external view returns (uint256) {\n        return faucetAmount;\n    }\n\n    function getFaucetCooldown() external view returns (uint256) {\n        return faucetCooldown;\n    }\n\n    /// @notice Baca saldo native token (ETH/MON) milik TBA user\n    function getTbaBalance(address user) external view returns (uint256) {\n        address tba = tbaList[user];\n        require(tba != address(0), \"User has no TBA\");\n        return tba.balance;\n    }\n\n    /// @notice Baca saldo ERC20 milik TBA user\n    function getTbaTokenBalance(address user, address token) external view returns (uint256) {\n        address tba = tbaList[user];\n        require(tba != address(0), \"User has no TBA\");\n        return IERC20(token).balanceOf(tba);\n    }\n\n    function buyIngredient() public payable {\n        address tba = tbaList[msg.sender];\n        require(tba != address(0), \"TBA not found\");\n        require(canBuy[tba], \"already brought ingredient\");\n\n        uint256 currentPosition = player[tba];\n        Box memory currentSpot = grid[currentPosition];\n        require(currentSpot.ingredientType <= 3, \"Not an ingredient grid\");\n\n        if (ingredientFee > 0) {\n            require(msg.value >= ingredientFee, \"Insufficient payment\");\n\n            try paymentGateway.processPayment{ value: ingredientFee }() {\n                // Payment processed successfully\n            } catch {\n                revert(\"Payment processing failed\");\n            }\n        }\n\n        if (currentSpot.ingredientType == 0) bread.mint(tba, 1 * 10 ** 18);\n        else if (currentSpot.ingredientType == 1) meat.mint(tba, 1 * 10 ** 18);\n        else if (currentSpot.ingredientType == 2) lettuce.mint(tba, 1 * 10 ** 18);\n        else if (currentSpot.ingredientType == 3) tomato.mint(tba, 1 * 10 ** 18);\n\n        canBuy[tba] = false;\n\n        // Update stats\n        stats[tba].ingredientsCollected += 1;\n        stats[tba].lastActive = block.timestamp;\n\n        emit IngredientPurchased(tba, currentSpot.ingredientType, ingredientFee);\n    }\n\n    function travelRail() public {\n        address tba = tbaList[msg.sender];\n        Box memory currentSpot = grid[player[tba]];\n        require(currentSpot.ingredientType == 98, \"Go to Rail Grid\");\n\n        grid[player[tba]].numberOfPlayers -= 1;\n\n        if (player[tba] == 5) {\n            player[tba] = 15;\n            grid[15].numberOfPlayers += 1;\n        } else {\n            player[tba] = 5;\n            grid[5].numberOfPlayers += 1;\n        }\n    }\n\n    // Add helper function to check if position allows buying\n    function canBuyAtPosition(uint256 position) public view returns (bool) {\n        if (position >= grid.length) return false;\n        return grid[position].ingredientType <= 3;\n    }\n\n    // Add function to get ingredient type at position\n    function getIngredientTypeAtPosition(uint256 position) public view returns (uint256) {\n        require(position < grid.length, \"Invalid position\");\n        return grid[position].ingredientType;\n    }\n\n    function mintFoodNFT() public {\n        address tba = tbaList[msg.sender];\n        // require(bread.balanceOf[tba] > 0, \"You need more bread\");\n        // require(meat.balanceOf[tba] > 0, \"You need more meat\");\n        // require(lettuce.balanceOf[tba] > 0, \"You need more lettuce\");\n        // require(tomato.balanceOf[tba] > 0, \"You need more tomato\");\n\n        bread.burn(tba, 1 * 10 ** 18);\n        meat.burn(tba, 1 * 10 ** 18);\n        lettuce.burn(tba, 1 * 10 ** 18);\n        tomato.burn(tba, 1 * 10 ** 18);\n\n        hamburger.mint(tba, \"hamburger\");\n    }\n\n    function useFaucetMon() public {\n        address tba = tbaList[msg.sender];\n        uint256 playerPosition = player[tba];\n        require(\n            keccak256(abi.encodePacked(grid[playerPosition].typeGrid)) == keccak256(abi.encodePacked(\"Stove\")),\n            \"must on stove to use faucet.\"\n        );\n\n        uint256 currentTime = block.timestamp;\n        require(currentTime >= lastFaucetUsage[msg.sender] + faucetCooldown, \"Faucet already used. Please wait.\");\n\n        lastFaucetUsage[msg.sender] = currentTime;\n\n        // Panggil kontrak FaucetMon untuk kirim ETH\n        faucetMon.faucet(msg.sender, faucetAmount);\n    }\n\n    // menyimpan TBA user\n    function setTBA(address user, address tba) external {\n        // validasi\n        tbaList[user] = tba;\n    }\n\n    function accountReady(address user) public view returns (bool) {\n        return tbaList[user] != address(0);\n    }\n\n    function logTravel(uint256 index) internal {\n        travelHistory[msg.sender].push(index);\n        stats[msg.sender].lastActive = block.timestamp;\n    }\n\n    function setUsername(string calldata name) public {\n        require(bytes(usernames[msg.sender]).length == 0, \"Username already set\");\n        usernames[msg.sender] = name;\n        nameToAddress[name] = msg.sender;\n    }\n\n    function burnOldIngredients() public {\n        address tba = tbaList[msg.sender];\n        bread.burn(tba, 1 ether);\n        meat.burn(tba, 1 ether);\n        lettuce.burn(tba, 1 ether);\n        tomato.burn(tba, 1 ether);\n    }\n\n    function resetPlayerProgress(address playerAddr) public {\n        require(msg.sender == owner, \"Only owner can reset\");\n        delete stats[playerAddr];\n        delete travelHistory[playerAddr];\n\n        // Determine the number of IngredientType values\n        uint256 ingredientCount = uint256(IngredientType.Tomato) + 1;\n\n        for (uint256 i = 0; i < ingredientCount; i++) {\n            inventory[playerAddr][IngredientType(i)] = 0;\n        }\n    }\n\n    // ================== onlyOwner ==================\n    function faucets() public onlyOwner {\n        address tba = tbaList[msg.sender];\n\n        // for testing\n        bread.mint(tba, 1 * 10 ** 18);\n        meat.mint(tba, 1 * 10 ** 18);\n        lettuce.mint(tba, 1 * 10 ** 18);\n        tomato.mint(tba, 1 * 10 ** 18);\n    }\n}\n"
    },
    "contracts/interfaces/IPaymentGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IPaymentGateway {\n    /**\n     * @notice Terima pembayaran dari kontrak lain\n     * @dev Harus dipanggil dengan msg.value > 0\n     */\n    function processPayment() external payable;\n}\n"
    },
    "contracts/interfaces/ISpecialBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ISpecialBox {\n\t// === EVENTS ===\n\tevent MintBox(address indexed user, address indexed tba, uint256 tokenId);\n\tevent Burn(address indexed user, address indexed tba, uint256 tokenId);\n\tevent BoxPriceUpdated(uint256 newPrice);\n\tevent PaymentGatewayUpdated(address newGateway);\n\n\t// === MINT FUNCTIONS ===\n\n\t/**\n\t * @notice Mint satu box dengan memburn 10 hamburger\n\t * @dev Cek 10 hamburger di TBA, burn, lalu mint box\n\t * @return tokenId yang di-mint\n\t */\n\tfunction mintBox() external payable returns (uint256);\n\n\t// === BURN FUNCTIONS ===\n\n\t/**\n\t * @notice Burn single box by token ID (only authorized burners)\n\t * @param tokenId ID of box to burn\n\t */\n\tfunction burn(uint256 tokenId) external;\n\n\t// === VIEW FUNCTIONS - TBA BALANCE ===\n\n\t/**\n\t * @notice Get TBA's box balance\n\t * @param tba TBA address\n\t * @return Array of box token IDs owned by TBA\n\t */\n\tfunction boxBalance(address tba) external view returns (uint256[] memory);\n\n\t// === VIEW FUNCTIONS - GENERAL ===\n\n\t/**\n\t * @notice Get user's TBA address\n\t * @param user User address\n\t * @return TBA address for the user\n\t */\n\tfunction getTBA(address user) external view returns (address);\n\n\t/**\n\t * @notice Check berapa box yang bisa di-mint dari TBA\n\t * @param tba TBA address\n\t * @return Jumlah box yang bisa di-mint\n\t */\n\tfunction canMint(address tba) external view returns (uint256);\n\n\t/**\n\t * @notice Get total supply of boxes\n\t * @return Total number of boxes minted\n\t */\n\tfunction total() external view returns (uint256);\n\n\t/**\n\t * @notice Get total cost untuk mint\n\t * @return ethCost ETH cost per box\n\t */\n\tfunction getMintCost() external view returns (uint256 ethCost);\n\n\t/**\n\t * @notice Get current box price\n\t */\n\tfunction getBoxPrice() external view returns (uint256);\n\n\t// === HAMBURGER FUNCTIONS ===\n\n\t/**\n\t * @notice Cek apakah TBA punya minimal 10 hamburger\n\t * @param tba Address TBA yang dicek\n\t * @return true jika punya >= 10 hamburger\n\t */\n\tfunction hasEnoughHamburgers(address tba) external view returns (bool);\n\n\t// === ADMIN VIEW FUNCTIONS ===\n\n\t/**\n\t * @notice Check if address is authorized burner\n\t * @param burner Address to check\n\t * @return True if authorized, false otherwise\n\t */\n\tfunction burners(address burner) external view returns (bool);\n\n\t// === ERC721 STANDARD FUNCTIONS ===\n\n\t/**\n\t * @notice Get owner of token\n\t * @param tokenId Token ID\n\t * @return Address of token owner\n\t */\n\tfunction ownerOf(uint256 tokenId) external view returns (address);\n\n\t/**\n\t * @notice Get balance of address (ERC721 standard)\n\t * @param owner Address to check\n\t * @return Number of tokens owned\n\t */\n\tfunction balanceOf(address owner) external view returns (uint256);\n\n\t/**\n\t * @notice Get approved address for token\n\t * @param tokenId Token ID\n\t * @return Approved address\n\t */\n\tfunction getApproved(uint256 tokenId) external view returns (address);\n\n\t/**\n\t * @notice Check if operator is approved for all tokens of owner\n\t * @param owner Token owner\n\t * @param operator Operator address\n\t * @return True if approved for all\n\t */\n\tfunction isApprovedForAll(\n\t\taddress owner,\n\t\taddress operator\n\t) external view returns (bool);\n\n\t/**\n\t * @notice Get token name\n\t * @return Token name\n\t */\n\tfunction name() external view returns (string memory);\n\n\t/**\n\t * @notice Get token symbol\n\t * @return Token symbol\n\t */\n\tfunction symbol() external view returns (string memory);\n\n\t/**\n\t * @notice Get token URI\n\t * @param tokenId Token ID\n\t * @return Token URI\n\t */\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\n\n\t// === TRANSFER FUNCTIONS ===\n\n\t/**\n\t * @notice Transfer token from one address to another\n\t * @param from Source address\n\t * @param to Destination address\n\t * @param tokenId Token ID to transfer\n\t */\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\n\n\t/**\n\t * @notice Safely transfer token from one address to another\n\t * @param from Source address\n\t * @param to Destination address\n\t * @param tokenId Token ID to transfer\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) external;\n\n\t/**\n\t * @notice Safely transfer token from one address to another with data\n\t * @param from Source address\n\t * @param to Destination address\n\t * @param tokenId Token ID to transfer\n\t * @param data Additional data\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory data\n\t) external;\n\n\t// === APPROVAL FUNCTIONS ===\n\n\t/**\n\t * @notice Approve address to transfer specific token\n\t * @param to Address to approve\n\t * @param tokenId Token ID to approve\n\t */\n\tfunction approve(address to, uint256 tokenId) external;\n\n\t/**\n\t * @notice Set approval for all tokens\n\t * @param operator Operator address\n\t * @param approved Approval status\n\t */\n\tfunction setApprovalForAll(address operator, bool approved) external;\n\n\t// === CONSTANTS ===\n\n\t/**\n\t * @notice Cost in hamburgers to mint one box\n\t * @return Number of hamburgers required\n\t */\n\tfunction HAMBURGER_COST() external view returns (uint256);\n}\n\n// === SEPARATE INTERFACE FOR STAKING ===\n\ninterface ISpecialBoxStake {\n\t// === EVENTS ===\n\tevent Stake(address indexed user, address indexed tba, uint256 tokenId);\n\tevent StakeBatch(\n\t\taddress indexed user,\n\t\taddress indexed tba,\n\t\tuint256[] tokenIds\n\t);\n\tevent Unstake(address indexed user, address indexed tba, uint256 tokenId);\n\tevent UnstakeBatch(\n\t\taddress indexed user,\n\t\taddress indexed tba,\n\t\tuint256[] tokenIds\n\t);\n\tevent StakeAll(\n\t\taddress indexed user,\n\t\taddress indexed tba,\n\t\tuint256[] tokenIds,\n\t\tuint256 totalStaked\n\t);\n\n\t// === SINGLE STAKE FUNCTIONS ===\n\n\t/**\n\t * @notice Stake satu box\n\t * @param tokenId ID box yang akan di-stake\n\t */\n\tfunction stake(uint256 tokenId) external;\n\n\t/**\n\t * @notice Unstake satu box\n\t * @param tokenId ID box yang akan di-unstake\n\t */\n\tfunction unstake(uint256 tokenId) external;\n\n\t// === BATCH STAKE FUNCTIONS ===\n\n\t/**\n\t * @notice Stake multiple boxes\n\t * @param tokenIds Array ID box yang akan di-stake\n\t */\n\tfunction stakeBatch(uint256[] memory tokenIds) external;\n\n\t/**\n\t * @notice Unstake multiple boxes\n\t * @param tokenIds Array ID box yang akan di-unstake\n\t */\n\tfunction unstakeBatch(uint256[] memory tokenIds) external;\n\n\t// === STAKE ALL FUNCTIONS ===\n\n\t/**\n\t * @notice Stake semua box yang dimiliki di TBA\n\t * @return tokenIds Array ID box yang di-stake\n\t */\n\tfunction stakeAll() external returns (uint256[] memory);\n\n\t/**\n\t * @notice Unstake semua box yang di-stake di TBA\n\t * @return tokenIds Array ID box yang di-unstake\n\t */\n\tfunction unstakeAll() external returns (uint256[] memory);\n\n\t// === VIEW FUNCTIONS - TBA STAKE BALANCE ===\n\n\t/**\n\t * @notice Get TBA's staked boxes\n\t * @param tba TBA address\n\t * @return Array of staked token IDs\n\t */\n\tfunction stakedBoxBalance(\n\t\taddress tba\n\t) external view returns (uint256[] memory);\n\n\t/**\n\t * @notice Get total staked boxes count for TBA\n\t * @param tba TBA address\n\t * @return Total staked count\n\t */\n\tfunction totalStakedBoxes(address tba) external view returns (uint256);\n\n\t// === VIEW FUNCTIONS - STAKE STATUS ===\n\n\t/**\n\t * @notice Check if box is staked\n\t * @param tokenId Box token ID\n\t * @return true if staked\n\t */\n\tfunction checkStaked(uint256 tokenId) external view returns (bool);\n\n\t/**\n\t * @notice Get who staked the box\n\t * @param tokenId Box token ID\n\t * @return TBA address that staked the box\n\t */\n\tfunction getStaker(uint256 tokenId) external view returns (address);\n\n\t/**\n\t * @notice Get user's TBA address\n\t * @param user User address\n\t * @return TBA address\n\t */\n\tfunction getTBA(address user) external view returns (address);\n\n\t/**\n\t * @notice Get stakeable boxes count (boxes that can be staked)\n\t * @param tba TBA address\n\t * @return Number of boxes that can be staked\n\t */\n\tfunction getStakeableCount(address tba) external view returns (uint256);\n\n\t// === MAPPINGS ACCESS ===\n\n\t/**\n\t * @notice Check if token is staked\n\t * @param tokenId Token ID\n\t * @return Staked status\n\t */\n\tfunction isStaked(uint256 tokenId) external view returns (bool);\n\n\t/**\n\t * @notice Get who staked the token\n\t * @param tokenId Token ID\n\t * @return TBA address\n\t */\n\tfunction stakedBy(uint256 tokenId) external view returns (address);\n}\n"
    },
    "contracts/LettuceToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract LettuceToken is ERC20, Ownable {\n    address public gameContract;\n\n    constructor() ERC20(\"Lettuce\", \"LT\") Ownable(msg.sender) {}\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    /// @notice Mint token Lettuce\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        // mint token ke user\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/MeatToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MeatToken is ERC20, Ownable {\n    address public gameContract;\n\n    constructor() ERC20(\"Meat\", \"MT\") Ownable(msg.sender) {}\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    /// @notice Mint token Meat\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        // mint token ke user\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/SpecialBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface IFoodNFT {\n    function getMyFoods(address _owner) external view returns (uint256[] memory);\n    function burnFood(uint256 tokenId) external;\n    function ownerOf(uint256 tokenId) external view returns (address);\n}\n\ninterface IFoodScramble {\n    function getTBA(address user) external view returns (address);\n    function accountReady(address user) external view returns (bool);\n}\n\ninterface IPaymentGateway {\n    function processPayment() external payable;\n}\n\ncontract SpecialBox is ERC721, Ownable, ReentrancyGuard {\n    uint256 private _tokenIds;\n\n    // Interface\n    IFoodNFT public foodNFT;\n    IFoodScramble public foodScramble;\n    IPaymentGateway public paymentGateway;\n\n    // Constants\n    uint256 public constant HAMBURGER_COST = 10;\n    uint256 public boxPrice = 0 ether;\n\n    // Authorized burners\n    mapping(address => bool) public burners;\n\n    // Storage - using TBA addresses\n    mapping(address => uint256[]) public boxes; // TBA => box IDs\n\n    // Events\n    event MintBox(address indexed user, address indexed tba, uint256 tokenId);\n    event Burn(address indexed user, address indexed tba, uint256 tokenId);\n    event BoxPriceUpdated(uint256 newPrice);\n    event PaymentGatewayUpdated(address newGateway);\n\n    constructor(\n        address _foodNFT,\n        address _foodScramble,\n        address _paymentGateway\n    ) ERC721(\"Special Box\", \"BOX\") Ownable(msg.sender) {\n        foodNFT = IFoodNFT(_foodNFT);\n        foodScramble = IFoodScramble(_foodScramble);\n        paymentGateway = IPaymentGateway(_paymentGateway);\n    }\n\n    modifier onlyBurner() {\n        require(burners[msg.sender], \"Not authorized\");\n        _;\n    }\n\n    // === MINT FUNCTION ===\n\n    /**\n     * @notice Mint satu box dengan memburn 10 hamburger\n     * @dev Cek 10 hamburger di TBA, burn, lalu mint box\n     * @return tokenId yang di-mint\n     */\n    function mintBox() external payable nonReentrant returns (uint256) {\n        address tba = _getTBA(msg.sender);\n\n        // Cek hamburger cukup (minimal 10)\n        require(hasEnoughHamburgers(tba), \"Need 10 hamburgers\");\n\n        // Cek ETH payment jika diperlukan\n        if (boxPrice > 0) {\n            require(address(paymentGateway) != address(0), \"Payment gateway not set\");\n            require(msg.value >= boxPrice, \"Insufficient payment\");\n            paymentGateway.processPayment{ value: boxPrice }();\n\n            // Refund excess\n            if (msg.value > boxPrice) {\n                payable(msg.sender).transfer(msg.value - boxPrice);\n            }\n        }\n\n        // Burn 10 hamburgers\n        burnHamburgers(tba);\n\n        // Mint box ke TBA\n        _tokenIds++;\n        uint256 tokenId = _tokenIds;\n\n        // Mint directly without triggering _beforeTokenTransfer for boxes array\n        _mint(tba, tokenId);\n\n        // Manually add to boxes array only once\n        boxes[tba].push(tokenId);\n\n        emit MintBox(msg.sender, tba, tokenId);\n\n        return tokenId;\n    }\n\n    // === HAMBURGER FUNCTIONS ===\n\n    /**\n     * @notice Cek apakah TBA punya minimal 10 hamburger\n     * @param tba Address TBA yang dicek\n     * @return true jika punya >= 10 hamburger\n     */\n    function hasEnoughHamburgers(address tba) public view returns (bool) {\n        uint256[] memory foods = foodNFT.getMyFoods(tba);\n        return foods.length >= HAMBURGER_COST;\n    }\n\n    /**\n     * @notice Burn 10 hamburger dari TBA\n     * @param tba Address TBA\n     */\n    function burnHamburgers(address tba) internal {\n        uint256[] memory foods = foodNFT.getMyFoods(tba);\n        require(foods.length >= HAMBURGER_COST, \"Not enough hamburgers\");\n\n        // Burn 10 food NFT pertama\n        for (uint256 i = 0; i < HAMBURGER_COST; i++) {\n            foodNFT.burnFood(foods[i]);\n        }\n    }\n\n    // === BURN FUNCTIONS ===\n\n    /**\n     * @notice Burn box by token ID\n     */\n    function burn(uint256 tokenId) external onlyBurner {\n        require(_ownerOf(tokenId) != address(0), \"Box not exist\");\n\n        address tba = ownerOf(tokenId);\n        address user = _getUser(tba);\n\n        _update(address(0), tokenId, address(0));\n        _removeFromArray(boxes[tba], tokenId);\n\n        emit Burn(user, tba, tokenId);\n    }\n\n    // === VIEW FUNCTIONS ===\n\n    /**\n     * @notice Get TBA's box balance\n     * @param tba TBA address\n     * @return Array of box token IDs\n     */\n    function boxBalance(address tba) external view returns (uint256[] memory) {\n        return boxes[tba];\n    }\n\n    /**\n     * @notice Get user's TBA address\n     */\n    function getTBA(address user) external view returns (address) {\n        return _getTBA(user);\n    }\n\n    /**\n     * @notice Check berapa box yang bisa di-mint dari TBA\n     * @param tba TBA address\n     * @return Jumlah box yang bisa di-mint\n     */\n    function canMint(address tba) external view returns (uint256) {\n        uint256[] memory foods = foodNFT.getMyFoods(tba);\n        return foods.length / HAMBURGER_COST;\n    }\n\n    /**\n     * @notice Get total cost untuk mint\n     * @return ethCost ETH cost per box\n     */\n    function getMintCost() external view returns (uint256 ethCost) {\n        return boxPrice;\n    }\n\n    /**\n     * @notice Get current box price\n     */\n    function getBoxPrice() external view returns (uint256) {\n        return boxPrice;\n    }\n\n    /**\n     * @notice Get total supply\n     */\n    function total() external view returns (uint256) {\n        return _tokenIds;\n    }\n\n    // === ADMIN FUNCTIONS ===\n\n    /**\n     * @notice Add burner\n     */\n    function addBurner(address burner) external onlyOwner {\n        burners[burner] = true;\n    }\n\n    /**\n     * @notice Remove burner\n     */\n    function removeBurner(address burner) external onlyOwner {\n        burners[burner] = false;\n    }\n\n    /**\n     * @notice Set box price\n     */\n    function setBoxPrice(uint256 _boxPrice) external onlyOwner {\n        boxPrice = _boxPrice;\n        emit BoxPriceUpdated(_boxPrice);\n    }\n\n    /**\n     * @notice Set payment gateway\n     */\n    function setPaymentGateway(address _paymentGateway) external onlyOwner {\n        paymentGateway = IPaymentGateway(_paymentGateway);\n        emit PaymentGatewayUpdated(_paymentGateway);\n    }\n\n    /**\n     * @notice Set food NFT contract\n     */\n    function setFoodNFT(address _foodNFT) external onlyOwner {\n        foodNFT = IFoodNFT(_foodNFT);\n    }\n\n    /**\n     * @notice Set food scramble contract\n     */\n    function setFoodScramble(address _foodScramble) external onlyOwner {\n        foodScramble = IFoodScramble(_foodScramble);\n    }\n\n    // === INTERNAL FUNCTIONS ===\n\n    function _getTBA(address user) internal view returns (address) {\n        if (address(foodScramble) != address(0) && foodScramble.accountReady(user)) {\n            return foodScramble.getTBA(user);\n        }\n        return user;\n    }\n\n    function _getUser(address tba) internal pure returns (address) {\n        // Simplified - dalam implementasi nyata butuh reverse mapping\n        return tba;\n    }\n\n    function _removeFromArray(uint256[] storage array, uint256 value) private {\n        for (uint256 i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                array[i] = array[array.length - 1];\n                array.pop();\n                break;\n            }\n        }\n    }\n\n    // Override _update to prevent duplicate box entries\n    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\n        address from = super._update(to, tokenId, auth);\n\n        // Only handle transfers, not mints (from != address(0))\n        // Mints are handled manually in mintBox()\n        if (from != address(0)) {\n            _removeFromArray(boxes[from], tokenId);\n        }\n\n        // Only add to boxes array for transfers, not for mints\n        // Mints are handled manually in mintBox()\n        if (to != address(0) && from != address(0)) {\n            boxes[to].push(tokenId);\n        }\n\n        return from;\n    }\n}\n"
    },
    "contracts/SpecialBoxStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface ISpecialBox {\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function boxBalance(address tba) external view returns (uint256[] memory);\n    function getTBA(address user) external view returns (address);\n    function mintBox(address tba) external;\n}\n\ninterface IFoodScramble {\n    function getTBA(address user) external view returns (address);\n    function accountReady(address user) external view returns (bool);\n}\n\ninterface IFoodNFT {\n    function getMyFoods(address owner) external view returns (uint256[] memory);\n    function burnFood(uint256 tokenId) external;\n}\n\ninterface IPaymentGateway {\n    function processPayment() external payable;\n}\n\ncontract SpecialBoxStake is Ownable, ReentrancyGuard {\n    // Constants\n    uint256 public constant HAMBURGERS_PER_SPECIAL_BOX = 10;\n\n    // Interfaces\n    ISpecialBox public specialBox;\n    IFoodScramble public foodScramble;\n    IFoodNFT public hamburger;\n    IPaymentGateway public paymentGateway;\n\n    // Storage - using TBA addresses\n    mapping(address => address) public tbaList; // user => TBA address\n    mapping(address => uint256[]) public staked; // TBA => staked box IDs\n    mapping(uint256 => bool) public isStaked; // tokenId => staked status\n    mapping(uint256 => address) public stakedBy; // tokenId => TBA address\n\n    // Fees and configuration\n    uint256 public specialBoxFee = 0.01 ether;\n\n    // Events\n    event Stake(address indexed user, address indexed tba, uint256 tokenId);\n    event StakeBatch(address indexed user, address indexed tba, uint256[] tokenIds);\n    event Unstake(address indexed user, address indexed tba, uint256 tokenId);\n    event UnstakeBatch(address indexed user, address indexed tba, uint256[] tokenIds);\n    event StakeAll(address indexed user, address indexed tba, uint256[] tokenIds, uint256 totalStaked);\n    event SpecialBoxMinted(address indexed user, address indexed tba, uint256 amount);\n\n    constructor(\n        address _specialBox,\n        address _foodScramble,\n        address _hamburger,\n        address _paymentGateway\n    ) Ownable(msg.sender) {\n        specialBox = ISpecialBox(_specialBox);\n        foodScramble = IFoodScramble(_foodScramble);\n        hamburger = IFoodNFT(_hamburger);\n        paymentGateway = IPaymentGateway(_paymentGateway);\n    }\n\n    // === TBA Management Functions === //\n\n    function setTBA(address user, address tba) external onlyOwner {\n        tbaList[user] = tba;\n    }\n\n    function getTBA(address user) external view returns (address) {\n        return tbaList[user];\n    }\n\n    // === Mint Special Box Function === //\n\n    function mintSpecialBoxNFT() external payable {\n        address tba = tbaList[msg.sender];\n        require(tba != address(0), \"TBA not found\");\n\n        // Get hamburger count dari TBA\n        uint256[] memory myHamburgers = hamburger.getMyFoods(tba);\n        uint256 hamburgerCount = myHamburgers.length;\n\n        // Cek minimal 10 hamburger\n        require(hamburgerCount >= HAMBURGERS_PER_SPECIAL_BOX, \"Need 10+ hamburgers\");\n\n        // Cek payment jika ada fee\n        if (specialBoxFee > 0) {\n            require(msg.value >= specialBoxFee, \"Insufficient fee\");\n\n            try paymentGateway.processPayment{ value: specialBoxFee }() {\n                // Payment success\n            } catch {\n                revert(\"Payment processing failed\");\n            }\n        }\n\n        // Burn 10 hamburger pertama yang dimiliki\n        uint256[] memory hamburgersToBurn = new uint256[](HAMBURGERS_PER_SPECIAL_BOX);\n        for (uint256 i = 0; i < HAMBURGERS_PER_SPECIAL_BOX; i++) {\n            hamburgersToBurn[i] = myHamburgers[i];\n        }\n\n        // Burn hamburgers satu per satu\n        for (uint256 i = 0; i < HAMBURGERS_PER_SPECIAL_BOX; i++) {\n            hamburger.burnFood(hamburgersToBurn[i]);\n        }\n\n        // Mint 1 special box ke TBA\n        specialBox.mintBox(tba);\n\n        emit SpecialBoxMinted(msg.sender, tba, 1);\n    }\n\n    // === SINGLE STAKE FUNCTIONS === //\n\n    /**\n     * @notice Stake satu box\n     * @param tokenId ID box yang akan di-stake\n     */\n    function stake(uint256 tokenId) external nonReentrant {\n        address tba = _getTBA(msg.sender);\n\n        require(specialBox.ownerOf(tokenId) == tba, \"Not owner\");\n        require(!isStaked[tokenId], \"Already staked\");\n\n        isStaked[tokenId] = true;\n        stakedBy[tokenId] = tba;\n        staked[tba].push(tokenId);\n\n        emit Stake(msg.sender, tba, tokenId);\n    }\n\n    /**\n     * @notice Unstake satu box\n     * @param tokenId ID box yang akan di-unstake\n     */\n    function unstake(uint256 tokenId) external nonReentrant {\n        address tba = _getTBA(msg.sender);\n\n        require(stakedBy[tokenId] == tba, \"Not your stake\");\n        require(isStaked[tokenId], \"Not staked\");\n\n        isStaked[tokenId] = false;\n        stakedBy[tokenId] = address(0);\n        _removeFromArray(staked[tba], tokenId);\n\n        emit Unstake(msg.sender, tba, tokenId);\n    }\n\n    // === BATCH STAKE FUNCTIONS === //\n\n    /**\n     * @notice Stake multiple boxes\n     * @param tokenIds Array ID box yang akan di-stake\n     */\n    function stakeBatch(uint256[] memory tokenIds) external nonReentrant {\n        require(tokenIds.length > 0 && tokenIds.length <= 50, \"Invalid batch size\");\n\n        address tba = _getTBA(msg.sender);\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(specialBox.ownerOf(tokenIds[i]) == tba, \"Not owner\");\n            require(!isStaked[tokenIds[i]], \"Already staked\");\n\n            isStaked[tokenIds[i]] = true;\n            stakedBy[tokenIds[i]] = tba;\n            staked[tba].push(tokenIds[i]);\n        }\n\n        emit StakeBatch(msg.sender, tba, tokenIds);\n    }\n\n    /**\n     * @notice Unstake multiple boxes\n     * @param tokenIds Array ID box yang akan di-unstake\n     */\n    function unstakeBatch(uint256[] memory tokenIds) external nonReentrant {\n        require(tokenIds.length > 0 && tokenIds.length <= 50, \"Invalid batch size\");\n\n        address tba = _getTBA(msg.sender);\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(stakedBy[tokenIds[i]] == tba, \"Not your stake\");\n            require(isStaked[tokenIds[i]], \"Not staked\");\n\n            isStaked[tokenIds[i]] = false;\n            stakedBy[tokenIds[i]] = address(0);\n            _removeFromArray(staked[tba], tokenIds[i]);\n        }\n\n        emit UnstakeBatch(msg.sender, tba, tokenIds);\n    }\n\n    // === STAKE ALL FUNCTION === //\n\n    /**\n     * @notice Stake semua box yang dimiliki di TBA\n     * @dev Auto-detect semua box dan stake sekaligus\n     * @return tokenIds Array ID box yang di-stake\n     */\n    function stakeAll() external nonReentrant returns (uint256[] memory) {\n        address tba = _getTBA(msg.sender);\n\n        // Get semua box yang dimiliki TBA\n        uint256[] memory allBoxes = specialBox.boxBalance(tba);\n        require(allBoxes.length > 0, \"No boxes to stake\");\n\n        // Filter hanya yang belum di-stake\n        uint256[] memory toStake = new uint256[](allBoxes.length);\n        uint256 count = 0;\n\n        for (uint256 i = 0; i < allBoxes.length; i++) {\n            if (!isStaked[allBoxes[i]]) {\n                toStake[count] = allBoxes[i];\n                count++;\n            }\n        }\n\n        require(count > 0, \"All boxes already staked\");\n        require(count <= 50, \"Too many boxes, use batch\");\n\n        // Resize array\n        uint256[] memory finalTokenIds = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            finalTokenIds[i] = toStake[i];\n        }\n\n        // Stake semua\n        for (uint256 i = 0; i < count; i++) {\n            isStaked[finalTokenIds[i]] = true;\n            stakedBy[finalTokenIds[i]] = tba;\n            staked[tba].push(finalTokenIds[i]);\n        }\n\n        emit StakeAll(msg.sender, tba, finalTokenIds, count);\n\n        return finalTokenIds;\n    }\n\n    /**\n     * @notice Unstake semua box yang di-stake di TBA\n     * @return tokenIds Array ID box yang di-unstake\n     */\n    function unstakeAll() external nonReentrant returns (uint256[] memory) {\n        address tba = _getTBA(msg.sender);\n\n        uint256[] memory stakedBoxes = staked[tba];\n        require(stakedBoxes.length > 0, \"No staked boxes\");\n        require(stakedBoxes.length <= 50, \"Too many staked, use batch\");\n\n        // Copy array karena kita akan modify staked[tba]\n        uint256[] memory toUnstake = new uint256[](stakedBoxes.length);\n        for (uint256 i = 0; i < stakedBoxes.length; i++) {\n            toUnstake[i] = stakedBoxes[i];\n        }\n\n        // Unstake semua\n        for (uint256 i = 0; i < toUnstake.length; i++) {\n            isStaked[toUnstake[i]] = false;\n            stakedBy[toUnstake[i]] = address(0);\n        }\n\n        // Clear staked array\n        delete staked[tba];\n\n        emit UnstakeBatch(msg.sender, tba, toUnstake);\n\n        return toUnstake;\n    }\n\n    // === VIEW FUNCTIONS === //\n\n    /**\n     * @notice Get TBA's staked boxes\n     * @param tba TBA address\n     * @return Array of staked token IDs\n     */\n    function stakedBoxBalance(address tba) external view returns (uint256[] memory) {\n        return staked[tba];\n    }\n\n    /**\n     * @notice Get total staked boxes count for TBA\n     * @param tba TBA address\n     * @return Total staked count\n     */\n    function totalStakedBoxes(address tba) external view returns (uint256) {\n        return staked[tba].length;\n    }\n\n    /**\n     * @notice Check if box is staked\n     * @param tokenId Box token ID\n     * @return true if staked\n     */\n    function checkStaked(uint256 tokenId) external view returns (bool) {\n        return isStaked[tokenId];\n    }\n\n    /**\n     * @notice Get who staked the box\n     * @param tokenId Box token ID\n     * @return TBA address that staked the box\n     */\n    function getStaker(uint256 tokenId) external view returns (address) {\n        return stakedBy[tokenId];\n    }\n\n\n    /**\n     * @notice Get stakeable boxes count (boxes that can be staked)\n     * @param tba TBA address\n     * @return Number of boxes that can be staked\n     */\n    function getStakeableCount(address tba) external view returns (uint256) {\n        uint256[] memory allBoxes = specialBox.boxBalance(tba);\n\n        uint256 count = 0;\n        for (uint256 i = 0; i < allBoxes.length; i++) {\n            if (!isStaked[allBoxes[i]]) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    // === ADMIN FUNCTIONS === //\n\n    /**\n     * @notice Set SpecialBox contract address\n     * @param _specialBox New SpecialBox contract address\n     */\n    function setSpecialBox(address _specialBox) external onlyOwner {\n        specialBox = ISpecialBox(_specialBox);\n    }\n\n    /**\n     * @notice Set FoodScramble contract address\n     * @param _foodScramble New FoodScramble contract address\n     */\n    function setFoodScramble(address _foodScramble) external onlyOwner {\n        foodScramble = IFoodScramble(_foodScramble);\n    }\n\n    // === INTERNAL FUNCTIONS === //\n\n    function _getTBA(address user) internal view returns (address) {\n        if (address(foodScramble) != address(0) && foodScramble.accountReady(user)) {\n            return foodScramble.getTBA(user);\n        }\n        return user;\n    }\n\n    function _removeFromArray(uint256[] storage array, uint256 value) private {\n        for (uint256 i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                array[i] = array[array.length - 1];\n                array.pop();\n                break;\n            }\n        }\n    }\n}\n"
    },
    "contracts/TomatoToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TomatoToken is ERC20, Ownable {\n    address public gameContract;\n\n    constructor() ERC20(\"Tomato\", \"TM\") Ownable(msg.sender) {}\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    /// @notice Mint token Tomato\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        // mint token ke user\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}