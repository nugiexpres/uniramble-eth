{
  "address": "0x53D0f94f7d582622fD97DdB2E8a6c1bD4b91e35a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "FunctionAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "GameActionAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRolls",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBuys",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRails",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxFaucets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCooks",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "name": "GameActionLimitSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxConsecutiveActions",
          "type": "uint256"
        }
      ],
      "name": "GameStateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCallsPerHour",
          "type": "uint256"
        }
      ],
      "name": "RateLimitSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "name": "TargetAddressesSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUY_INGREDIENT_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_FOOD_NFT_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MOVE_PLAYER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRAVEL_RAIL_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USE_FAUCET_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "terms",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "executionCalldata",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        }
      ],
      "name": "afterHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "allowedFunctions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "allowedGameActions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTargetAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "terms",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "executionCalldata",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        }
      ],
      "name": "beforeHook",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "gameActionLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxRolls",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBuys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRails",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFaucets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCooks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedRolls",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedBuys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedRails",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedFaucets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usedCooks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "gameStates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastActionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "consecutiveActions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxConsecutiveActions",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        }
      ],
      "name": "getGameActionLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxRolls",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxBuys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRails",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFaucets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCooks",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usedRolls",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usedBuys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usedRails",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usedFaucets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "usedCooks",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameCaveatEnforcer.GameActionLimit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        }
      ],
      "name": "getGameState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lastActionTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "consecutiveActions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxConsecutiveActions",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameCaveatEnforcer.GameState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        }
      ],
      "name": "getRateLimit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxCallsPerHour",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastResetTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "callsThisHour",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameCaveatEnforcer.RateLimit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "rateLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxCallsPerHour",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastResetTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "callsThisHour",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedGameAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        }
      ],
      "name": "setAllowedTargetAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        }
      ],
      "name": "setDefaultGameConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxRolls",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBuys",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRails",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFaucets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCooks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validUntilTime",
          "type": "uint256"
        }
      ],
      "name": "setGameActionLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxConsecutiveActions",
          "type": "uint256"
        }
      ],
      "name": "setGameState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "delegationHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxCallsPerHour",
          "type": "uint256"
        }
      ],
      "name": "setRateLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd2654d05d00f3af67ce8779219eb9f0c5f0b158e6d24f3538d677faa1c5fb4cf",
  "receipt": {
    "to": null,
    "from": "0x9bF68A0f0be9A9B6dCeb4D5675745c2f7cFb9483",
    "contractAddress": "0x53D0f94f7d582622fD97DdB2E8a6c1bD4b91e35a",
    "transactionIndex": 4,
    "gasUsed": "2166324",
    "logsBloom": "0x
    "blockHash": "0x1a020f54d2aa9a231e979d9b3ef547b709e2dd30acf09367a6d7d21d2e16d32c",
    "transactionHash": "0xd2654d05d00f3af67ce8779219eb9f0c5f0b158e6d24f3538d677faa1c5fb4cf",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 44185785,
        "transactionHash": "0xd2654d05d00f3af67ce8779219eb9f0c5f0b158e6d24f3538d677faa1c5fb4cf",
        "address": "0x53D0f94f7d582622fD97DdB2E8a6c1bD4b91e35a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009bf68a0f0be9a9b6dceb4d5675745c2f7cfb9483"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x1a020f54d2aa9a231e979d9b3ef547b709e2dd30acf09367a6d7d21d2e16d32c"
      }
    ],
    "blockNumber": 44185785,
    "cumulativeGasUsed": "2703016",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9bF68A0f0be9A9B6dCeb4D5675745c2f7cFb9483"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff740727392c95dbe8f9b1b72db3819d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"FunctionAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"GameActionAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRolls\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBuys\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRails\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFaucets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCooks\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"name\":\"GameActionLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxConsecutiveActions\",\"type\":\"uint256\"}],\"name\":\"GameStateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCallsPerHour\",\"type\":\"uint256\"}],\"name\":\"RateLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"TargetAddressesSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUY_INGREDIENT_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_FOOD_NFT_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOVE_PLAYER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRAVEL_RAIL_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USE_FAUCET_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"name\":\"afterHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"allowedFunctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"allowedGameActions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTargetAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"terms\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"name\":\"beforeHook\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gameActionLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxRolls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRails\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFaucets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCooks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedRolls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedRails\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedFaucets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedCooks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gameStates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastActionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consecutiveActions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxConsecutiveActions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"name\":\"getGameActionLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxRolls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRails\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFaucets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCooks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedRolls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedRails\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedFaucets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedCooks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"}],\"internalType\":\"struct GameCaveatEnforcer.GameActionLimit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"name\":\"getGameState\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastActionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consecutiveActions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxConsecutiveActions\",\"type\":\"uint256\"}],\"internalType\":\"struct GameCaveatEnforcer.GameState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"name\":\"getRateLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxCallsPerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastResetTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callsThisHour\",\"type\":\"uint256\"}],\"internalType\":\"struct GameCaveatEnforcer.RateLimit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rateLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxCallsPerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastResetTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callsThisHour\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedGameAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"}],\"name\":\"setAllowedTargetAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"}],\"name\":\"setDefaultGameConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxRolls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRails\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFaucets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCooks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTime\",\"type\":\"uint256\"}],\"name\":\"setGameActionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxConsecutiveActions\",\"type\":\"uint256\"}],\"name\":\"setGameState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"delegationHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCallsPerHour\",\"type\":\"uint256\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Caveat enforcer specifically for game actions (roll, rail, buy, faucet, cook) Implements ICaveatEnforcer interface for MetaMask delegation toolkit compatibility\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"afterHook(bytes,bytes,uint256,bytes,bytes32)\":{\"details\":\"ICaveatEnforcer afterHook implementation\"},\"beforeHook(bytes,bytes,uint256,bytes,bytes32)\":{\"details\":\"ICaveatEnforcer beforeHook implementation\"},\"getGameActionLimits(bytes32)\":{\"details\":\"Get game action limits for a delegation\"},\"getGameState(bytes32)\":{\"details\":\"Get game state for a delegation\"},\"getRateLimit(bytes32)\":{\"details\":\"Get rate limit for a delegation\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAllowedFunction(bytes32,bytes4,bool)\":{\"details\":\"Set allowed function selectors for a delegation Anyone can set function selectors for their own delegations\"},\"setAllowedGameAction(bytes32,string,bool)\":{\"details\":\"Set allowed game actions for a delegation Anyone can set game actions for their own delegations\"},\"setAllowedTargetAddresses(bytes32,address[])\":{\"details\":\"Set allowed target addresses for a delegation Anyone can set target addresses for their own delegations\"},\"setDefaultGameConfig(bytes32)\":{\"details\":\"Set default game configuration for a delegation Anyone can set default config for their own delegations\"},\"setGameActionLimit(bytes32,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Set game action limits for a delegation Anyone can set limits for their own delegations\"},\"setGameState(bytes32,bool,uint256)\":{\"details\":\"Set game state for a delegation Anyone can set game state for their own delegations\"},\"setRateLimit(bytes32,uint256)\":{\"details\":\"Set rate limit for a delegation Anyone can set rate limits for their own delegations\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"GameCaveatEnforcer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/delegation/GameCaveatEnforcer.sol\":\"GameCaveatEnforcer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/delegation/GameCaveatEnforcer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title GameCaveatEnforcer\\n * @dev Caveat enforcer specifically for game actions (roll, rail, buy, faucet, cook)\\n * Implements ICaveatEnforcer interface for MetaMask delegation toolkit compatibility\\n */\\ncontract GameCaveatEnforcer is Ownable {\\n    struct GameActionLimit {\\n        uint256 maxRolls;\\n        uint256 maxBuys;\\n        uint256 maxRails;\\n        uint256 maxFaucets;\\n        uint256 maxCooks;\\n        uint256 usedRolls;\\n        uint256 usedBuys;\\n        uint256 usedRails;\\n        uint256 usedFaucets;\\n        uint256 usedCooks;\\n        uint256 validUntil;\\n    }\\n\\n    struct RateLimit {\\n        uint256 maxCallsPerHour;\\n        uint256 lastResetTime;\\n        uint256 callsThisHour;\\n    }\\n\\n    struct GameState {\\n        bool isActive;\\n        uint256 lastActionTime;\\n        uint256 consecutiveActions;\\n        uint256 maxConsecutiveActions;\\n    }\\n\\n    // Mappings\\n    mapping(bytes32 => GameActionLimit) public gameActionLimits;\\n    mapping(bytes32 => RateLimit) public rateLimits;\\n    mapping(bytes32 => GameState) public gameStates;\\n    mapping(bytes32 => mapping(bytes4 => bool)) public allowedFunctions;\\n    mapping(bytes32 => address[]) public allowedTargetAddresses;\\n    mapping(bytes32 => mapping(string => bool)) public allowedGameActions;\\n\\n    // Game action function selectors\\n    bytes4 public constant MOVE_PLAYER_SELECTOR = 0x12345678; // movePlayer()\\n    bytes4 public constant BUY_INGREDIENT_SELECTOR = 0x87654321; // buyIngredient()\\n    bytes4 public constant TRAVEL_RAIL_SELECTOR = 0x11223344; // travelRail()\\n    bytes4 public constant USE_FAUCET_SELECTOR = 0x44332211; // useFaucetMon()\\n    bytes4 public constant MINT_FOOD_NFT_SELECTOR = 0x55667788; // mintFoodNFT()\\n\\n    // Events\\n    event GameActionLimitSet(\\n        bytes32 indexed delegationHash,\\n        uint256 maxRolls,\\n        uint256 maxBuys,\\n        uint256 maxRails,\\n        uint256 maxFaucets,\\n        uint256 maxCooks,\\n        uint256 validUntil\\n    );\\n    event RateLimitSet(bytes32 indexed delegationHash, uint256 maxCallsPerHour);\\n    event GameStateSet(bytes32 indexed delegationHash, bool isActive, uint256 maxConsecutiveActions);\\n    event FunctionAllowed(bytes32 indexed delegationHash, bytes4 functionSelector, bool allowed);\\n    event TargetAddressesSet(bytes32 indexed delegationHash, address[] targets);\\n    event GameActionAllowed(bytes32 indexed delegationHash, string action, bool allowed);\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev Set game action limits for a delegation\\n     * Anyone can set limits for their own delegations\\n     */\\n    function setGameActionLimit(\\n        bytes32 delegationHash,\\n        uint256 maxRolls,\\n        uint256 maxBuys,\\n        uint256 maxRails,\\n        uint256 maxFaucets,\\n        uint256 maxCooks,\\n        uint256 validUntilTime\\n    ) external {\\n        gameActionLimits[delegationHash] = GameActionLimit({\\n            maxRolls: maxRolls,\\n            maxBuys: maxBuys,\\n            maxRails: maxRails,\\n            maxFaucets: maxFaucets,\\n            maxCooks: maxCooks,\\n            usedRolls: 0,\\n            usedBuys: 0,\\n            usedRails: 0,\\n            usedFaucets: 0,\\n            usedCooks: 0,\\n            validUntil: validUntilTime\\n        });\\n\\n        emit GameActionLimitSet(delegationHash, maxRolls, maxBuys, maxRails, maxFaucets, maxCooks, validUntilTime);\\n    }\\n\\n    /**\\n     * @dev Set rate limit for a delegation\\n     * Anyone can set rate limits for their own delegations\\n     */\\n    function setRateLimit(bytes32 delegationHash, uint256 maxCallsPerHour) external {\\n        rateLimits[delegationHash] = RateLimit({\\n            maxCallsPerHour: maxCallsPerHour,\\n            lastResetTime: block.timestamp,\\n            callsThisHour: 0\\n        });\\n\\n        emit RateLimitSet(delegationHash, maxCallsPerHour);\\n    }\\n\\n    /**\\n     * @dev Set game state for a delegation\\n     * Anyone can set game state for their own delegations\\n     */\\n    function setGameState(bytes32 delegationHash, bool isActive, uint256 maxConsecutiveActions) external {\\n        gameStates[delegationHash] = GameState({\\n            isActive: isActive,\\n            lastActionTime: 0,\\n            consecutiveActions: 0,\\n            maxConsecutiveActions: maxConsecutiveActions\\n        });\\n\\n        emit GameStateSet(delegationHash, isActive, maxConsecutiveActions);\\n    }\\n\\n    /**\\n     * @dev Set allowed function selectors for a delegation\\n     * Anyone can set function selectors for their own delegations\\n     */\\n    function setAllowedFunction(bytes32 delegationHash, bytes4 functionSelector, bool allowed) external {\\n        allowedFunctions[delegationHash][functionSelector] = allowed;\\n        emit FunctionAllowed(delegationHash, functionSelector, allowed);\\n    }\\n\\n    /**\\n     * @dev Set allowed target addresses for a delegation\\n     * Anyone can set target addresses for their own delegations\\n     */\\n    function setAllowedTargetAddresses(bytes32 delegationHash, address[] calldata targets) external {\\n        allowedTargetAddresses[delegationHash] = targets;\\n        emit TargetAddressesSet(delegationHash, targets);\\n    }\\n\\n    /**\\n     * @dev Set allowed game actions for a delegation\\n     * Anyone can set game actions for their own delegations\\n     */\\n    function setAllowedGameAction(bytes32 delegationHash, string calldata action, bool allowed) external {\\n        allowedGameActions[delegationHash][action] = allowed;\\n        emit GameActionAllowed(delegationHash, action, allowed);\\n    }\\n\\n    /**\\n     * @dev Set default game configuration for a delegation\\n     * Anyone can set default config for their own delegations\\n     */\\n    function setDefaultGameConfig(bytes32 delegationHash) external {\\n        // Set default limits (100 of each action per day)\\n        gameActionLimits[delegationHash] = GameActionLimit({\\n            maxRolls: 100,\\n            maxBuys: 100,\\n            maxRails: 100,\\n            maxFaucets: 100,\\n            maxCooks: 100,\\n            usedRolls: 0,\\n            usedBuys: 0,\\n            usedRails: 0,\\n            usedFaucets: 0,\\n            usedCooks: 0,\\n            validUntil: block.timestamp + 1 days\\n        });\\n\\n        // Set default rate limit (50 calls per hour)\\n        rateLimits[delegationHash] = RateLimit({\\n            maxCallsPerHour: 50,\\n            lastResetTime: block.timestamp,\\n            callsThisHour: 0\\n        });\\n\\n        // Set default game state (active, max 10 consecutive actions)\\n        gameStates[delegationHash] = GameState({\\n            isActive: true,\\n            lastActionTime: 0,\\n            consecutiveActions: 0,\\n            maxConsecutiveActions: 10\\n        });\\n\\n        // Set allowed functions\\n        allowedFunctions[delegationHash][MOVE_PLAYER_SELECTOR] = true;\\n        allowedFunctions[delegationHash][BUY_INGREDIENT_SELECTOR] = true;\\n        allowedFunctions[delegationHash][TRAVEL_RAIL_SELECTOR] = true;\\n        allowedFunctions[delegationHash][USE_FAUCET_SELECTOR] = true;\\n        allowedFunctions[delegationHash][MINT_FOOD_NFT_SELECTOR] = true;\\n\\n        // Set allowed game actions\\n        allowedGameActions[delegationHash][\\\"roll\\\"] = true;\\n        allowedGameActions[delegationHash][\\\"buy\\\"] = true;\\n        allowedGameActions[delegationHash][\\\"rail\\\"] = true;\\n        allowedGameActions[delegationHash][\\\"faucet\\\"] = true;\\n        allowedGameActions[delegationHash][\\\"cook\\\"] = true;\\n    }\\n\\n    /**\\n     * @dev ICaveatEnforcer beforeHook implementation\\n     */\\n    function beforeHook(\\n        bytes calldata terms,\\n        bytes calldata /* args */,\\n        uint256 /* mode */,\\n        bytes calldata executionCalldata,\\n        bytes32 delegationHash\\n    ) external view {\\n        // Decode terms to get caveat type\\n        (string memory caveatType, bytes memory caveatData) = abi.decode(terms, (string, bytes));\\n\\n        if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"gameActionLimit\\\"))) {\\n            _enforceGameActionLimit(caveatData, delegationHash);\\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"rateLimit\\\"))) {\\n            _enforceRateLimit(delegationHash);\\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"gameState\\\"))) {\\n            _enforceGameState(delegationHash);\\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"allowedFunctions\\\"))) {\\n            _enforceAllowedFunctions(caveatData, delegationHash, executionCalldata);\\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"allowedTargets\\\"))) {\\n            _enforceAllowedTargets(delegationHash, executionCalldata);\\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"allowedGameActions\\\"))) {\\n            _enforceAllowedGameActions(caveatData, delegationHash);\\n        }\\n    }\\n\\n    /**\\n     * @dev ICaveatEnforcer afterHook implementation\\n     */\\n    function afterHook(\\n        bytes calldata terms,\\n        bytes calldata /* args */,\\n        uint256 /* mode */,\\n        bytes calldata executionCalldata,\\n        bytes32 delegationHash\\n    ) external {\\n        // Decode terms to get caveat type\\n        (string memory caveatType, bytes memory caveatData) = abi.decode(terms, (string, bytes));\\n\\n        if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"gameActionLimit\\\"))) {\\n            _updateGameActionUsage(caveatData, delegationHash, executionCalldata);\\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"rateLimit\\\"))) {\\n            _updateRateLimit(delegationHash);\\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\\\"gameState\\\"))) {\\n            _updateGameState(delegationHash);\\n        }\\n    }\\n\\n    /**\\n     * @dev Enforce game action limits\\n     */\\n    function _enforceGameActionLimit(bytes memory caveatData, bytes32 delegationHash) internal view {\\n        string memory actionType = abi.decode(caveatData, (string));\\n        GameActionLimit memory limit = gameActionLimits[delegationHash];\\n\\n        require(limit.validUntil > block.timestamp, \\\"Game action limit expired\\\");\\n\\n        if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"roll\\\"))) {\\n            require(limit.usedRolls < limit.maxRolls, \\\"Roll limit exceeded\\\");\\n        } else if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"buy\\\"))) {\\n            require(limit.usedBuys < limit.maxBuys, \\\"Buy limit exceeded\\\");\\n        } else if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"rail\\\"))) {\\n            require(limit.usedRails < limit.maxRails, \\\"Rail limit exceeded\\\");\\n        } else if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"faucet\\\"))) {\\n            require(limit.usedFaucets < limit.maxFaucets, \\\"Faucet limit exceeded\\\");\\n        } else if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"cook\\\"))) {\\n            require(limit.usedCooks < limit.maxCooks, \\\"Cook limit exceeded\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Enforce rate limiting\\n     */\\n    function _enforceRateLimit(bytes32 delegationHash) internal view {\\n        RateLimit memory limit = rateLimits[delegationHash];\\n\\n        // Reset counter if an hour has passed\\n        if (block.timestamp >= limit.lastResetTime + 1 hours) {\\n            return; // Will be handled in afterHook\\n        }\\n\\n        require(limit.callsThisHour < limit.maxCallsPerHour, \\\"Rate limit exceeded\\\");\\n    }\\n\\n    /**\\n     * @dev Enforce game state\\n     */\\n    function _enforceGameState(bytes32 delegationHash) internal view {\\n        GameState memory state = gameStates[delegationHash];\\n        require(state.isActive, \\\"Game session not active\\\");\\n        require(state.consecutiveActions < state.maxConsecutiveActions, \\\"Max consecutive actions exceeded\\\");\\n    }\\n\\n    /**\\n     * @dev Enforce allowed functions\\n     */\\n    function _enforceAllowedFunctions(\\n        bytes memory caveatData,\\n        bytes32 /* delegationHash */,\\n        bytes calldata executionCalldata\\n    ) internal pure {\\n        bytes4[] memory allowedSelectors = abi.decode(caveatData, (bytes4[]));\\n\\n        // Extract function selector from calldata (first 4 bytes)\\n        require(executionCalldata.length >= 4, \\\"Invalid calldata length\\\");\\n        bytes4 selector;\\n        assembly {\\n            selector := shr(224, calldataload(executionCalldata.offset))\\n        }\\n\\n        bool isAllowed = false;\\n        for (uint256 i = 0; i < allowedSelectors.length; i++) {\\n            if (allowedSelectors[i] == selector) {\\n                isAllowed = true;\\n                break;\\n            }\\n        }\\n        require(isAllowed, \\\"Function not allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Enforce allowed targets\\n     */\\n    function _enforceAllowedTargets(bytes32 delegationHash, bytes calldata executionCalldata) internal view {\\n        // Extract target from execution calldata (first 20 bytes)\\n        require(executionCalldata.length >= 20, \\\"Invalid calldata length\\\");\\n        address target;\\n        assembly {\\n            target := shr(96, calldataload(executionCalldata.offset))\\n        }\\n\\n        // Check if target is in the allowed list for this delegation\\n        address[] memory allowedTargetList = allowedTargetAddresses[delegationHash];\\n        bool isAllowed = false;\\n\\n        for (uint256 i = 0; i < allowedTargetList.length; i++) {\\n            if (allowedTargetList[i] == target) {\\n                isAllowed = true;\\n                break;\\n            }\\n        }\\n\\n        require(isAllowed, \\\"Target not allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Enforce allowed game actions\\n     */\\n    function _enforceAllowedGameActions(bytes memory caveatData, bytes32 delegationHash) internal view {\\n        string memory actionType = abi.decode(caveatData, (string));\\n        require(allowedGameActions[delegationHash][actionType], \\\"Game action not allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Update game action usage after execution\\n     */\\n    function _updateGameActionUsage(\\n        bytes memory caveatData,\\n        bytes32 delegationHash,\\n        bytes calldata /* executionCalldata */\\n    ) internal {\\n        string memory actionType = abi.decode(caveatData, (string));\\n        GameActionLimit storage limit = gameActionLimits[delegationHash];\\n\\n        if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"roll\\\"))) {\\n            limit.usedRolls++;\\n        } else if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"buy\\\"))) {\\n            limit.usedBuys++;\\n        } else if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"rail\\\"))) {\\n            limit.usedRails++;\\n        } else if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"faucet\\\"))) {\\n            limit.usedFaucets++;\\n        } else if (keccak256(bytes(actionType)) == keccak256(bytes(\\\"cook\\\"))) {\\n            limit.usedCooks++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Update rate limit after execution\\n     */\\n    function _updateRateLimit(bytes32 delegationHash) internal {\\n        RateLimit storage limit = rateLimits[delegationHash];\\n\\n        // Reset counter if an hour has passed\\n        if (block.timestamp >= limit.lastResetTime + 1 hours) {\\n            limit.lastResetTime = block.timestamp;\\n            limit.callsThisHour = 1;\\n        } else {\\n            limit.callsThisHour++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Update game state after execution\\n     */\\n    function _updateGameState(bytes32 delegationHash) internal {\\n        GameState storage state = gameStates[delegationHash];\\n\\n        // Reset consecutive actions if more than 5 minutes have passed\\n        if (block.timestamp >= state.lastActionTime + 5 minutes) {\\n            state.consecutiveActions = 1;\\n        } else {\\n            state.consecutiveActions++;\\n        }\\n\\n        state.lastActionTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Get game action limits for a delegation\\n     */\\n    function getGameActionLimits(bytes32 delegationHash) external view returns (GameActionLimit memory) {\\n        return gameActionLimits[delegationHash];\\n    }\\n\\n    /**\\n     * @dev Get rate limit for a delegation\\n     */\\n    function getRateLimit(bytes32 delegationHash) external view returns (RateLimit memory) {\\n        return rateLimits[delegationHash];\\n    }\\n\\n    /**\\n     * @dev Get game state for a delegation\\n     */\\n    function getGameState(bytes32 delegationHash) external view returns (GameState memory) {\\n        return gameStates[delegationHash];\\n    }\\n}\\n\",\"keccak256\":\"0xbd289f98173c01912f370060342d543a1e3e857631bd2bac50d0f3cf90311769\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200266a3803806200266a8339810160408190526200003491620000c7565b806001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f8162000077565b5050620000f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000da57600080fd5b81516001600160a01b0381168114620000f257600080fd5b9392505050565b61256180620001096000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063cd57c20c11610097578063d22f673111610071578063d22f6731146105a2578063ef928f34146105b5578063f2fde38b146105c8578063f7e80f68146105db57600080fd5b8063cd57c20c14610491578063ce4c7ed2146104d9578063d0af26d11461059457600080fd5b80638da5cb5b146103f05780639e8b952514610415578063a84a8a6214610428578063abed801a1461043b578063b20d37851461044e578063bada10201461048357600080fd5b8063397969551161014b57806347cea2651161012557806347cea2651461035d57806358cd3d9e146103ac578063715018a6146103ba5780638590c677146103c257600080fd5b8063397969551461032957806344f72a841461033c578063467682191461034a57600080fd5b806310affbc41461019357806314ed3b9d14610234578063184e385a1461027d5780632fddfb90146102925780632fe7e41f146102a557806334aad29614610302575b600080fd5b6101a66101a1366004611def565b6105ee565b60405161022b9190600061016082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525092915050565b60405180910390f35b610262610242366004611def565b600260208190526000918252604090912080546001820154919092015483565b6040805193845260208401929092529082015260600161022b565b61029061028b366004611e66565b6106d9565b005b6102906102a0366004611ec4565b61075f565b6102e06102b3366004611def565b6003602081905260009182526040909120805460018201546002830154929093015460ff90911692919084565b604080519415158552602085019390935291830152606082015260800161022b565b6103106302468acf60e31b81565b6040516001600160e01b0319909116815260200161022b565b610290610337366004611ee6565b6107d8565b6103106304488cd160e21b81565b610290610358366004611f91565b610a23565b61039c61036b3660046120e4565b6006602090815260009283526040909220815180830184018051928152908401929093019190912091525460ff1681565b604051901515815260200161022b565b610310638765432160e01b81565b610290610a7c565b61039c6103d0366004612141565b600460209081526000928352604080842090915290825290205460ff1681565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161022b565b610290610423366004611ee6565b610a90565b610290610436366004612171565b610baf565b6102906104493660046121a6565b610c3b565b61046161045c366004611def565b610d81565b604080518251815260208084015190820152918101519082015260600161022b565b610310634433221160e01b81565b6104a461049f366004611def565b610dde565b60405161022b919081511515815260208083015190820152604080830151908201526060918201519181019190915260800190565b6105416104e7366004611def565b600160205280600052604060002060009150905080600001549080600101549080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a015490508b565b604080519b8c5260208c019a909a52988a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600161022b565b610310630aaccef160e31b81565b6103fd6105b0366004611ec4565b610e52565b6102906105c33660046121f2565b610e8a565b6102906105d6366004612247565b610ef5565b6102906105e9366004611def565b610f38565b61064b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506000908152600160208181526040928390208351610160810185528154815292810154918301919091526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a9091015461014082015290565b806006600086815260200190815260200160002084846040516106fd929190612262565b908152604051908190036020018120805492151560ff199093169290921790915584907fa30a7463331a72d3832405162e66b2bddf4b0c6fa24562179fe3208ef5abe4519061075190869086908690612272565b60405180910390a250505050565b60408051606081018252828152426020808301918252600083850181815287825260029283905290859020935184559151600184015590519101555182907ffc680d3bfccc4bb5a66a20edf89c686c6acf514db13551e6233ece91e52cd1df906107cc9084815260200190565b60405180910390a25050565b6000806107e7898b018b6122aa565b60408051808201909152600f81526e19d85b595058dd1a5bdb931a5b5a5d608a1b60209182015282519083012091935091507fe218ca3e9a0c0b614626aa3578ec3df0a2cacc9338b29aa7439ead43d4cc07f60161084e5761084981846111f2565b610a17565b6040805180820190915260098152681c985d19531a5b5a5d60ba1b6020918201528251908301207fb78e66362e2a296e3816264f81042ffad2302063eb3c6ac84dc1cc430fc9defb016108a457610849836115db565b60408051808201909152600981526867616d65537461746560b81b6020918201528251908301207f2196edf5cb86111b6c08b6d5b8b627a8d1b04e423af399e3a6a7971ccb2d4b58016108fa5761084983611673565b60408051808201909152601081526f616c6c6f77656446756e6374696f6e7360801b6020918201528251908301207f0a72081275919f77e32bab63069198b4fb9b37b7e727682184851ecf8666d9b00161095a576108498184878761175b565b60408051808201909152600e81526d616c6c6f7765645461726765747360901b6020918201528251908301207f14d1cc92269128a7f462c427b6c4761966d55eb0441ee724daf313672e8ab53c016109b757610849838686611863565b604080518082019091526012815271616c6c6f77656447616d65416374696f6e7360701b6020918201528251908301207f816905e51df69094c69f5d1a7247c74e8d91652f9062327a1dea6223a98d363c01610a1757610a1781846119b2565b50505050505050505050565b6000838152600560205260409020610a3c908383611d77565b50827f99da1e2b1717b646ead98c2708c7aa14c7b30af8f90e9d150a9cb31454e5d8788383604051610a6f929190612318565b60405180910390a2505050565b610a84611a4f565b610a8e6000611a7c565b565b600080610a9f898b018b6122aa565b60408051808201909152600f81526e19d85b595058dd1a5bdb931a5b5a5d608a1b60209182015282519083012091935091507fe218ca3e9a0c0b614626aa3578ec3df0a2cacc9338b29aa7439ead43d4cc07f601610b035761084981848787611acc565b6040805180820190915260098152681c985d19531a5b5a5d60ba1b6020918201528251908301207fb78e66362e2a296e3816264f81042ffad2302063eb3c6ac84dc1cc430fc9defb01610b595761084983611cd1565b60408051808201909152600981526867616d65537461746560b81b6020918201528251908301207f2196edf5cb86111b6c08b6d5b8b627a8d1b04e423af399e3a6a7971ccb2d4b5801610a1757610a1783611d24565b6040805160808101825283151580825260006020808401828152848601838152606086018881528a85526003808552948890209651875460ff191690151517875591516001870155516002860155519390910192909255825190815290810183905284917fddf24137f413eaa090979b3bb70eb4958e4cd7669ac239f07afbfb2a36fcedf19101610a6f565b60405180610160016040528087815260200186815260200185815260200184815260200183815260200160008152602001600081526020016000815260200160008152602001600081526020018281525060016000898152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a0155905050867f784539da0cda3290eeabf2c1b2e3a1846b83344073d22591e572d99ba8069d9d878787878787604051610d7096959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405180910390a250505050505050565b610da560405180606001604052806000815260200160008152602001600081525090565b50600090815260026020818152604092839020835160608101855281548152600182015492810192909252909101549181019190915290565b610e0b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b506000908152600360208181526040928390208351608081018552815460ff1615158152600182015492810192909252600281015493820193909352910154606082015290565b60056020528160005260406000208181548110610e6e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60008381526004602090815260408083206001600160e01b0319861680855290835292819020805460ff191685151590811790915581519384529183019190915284917f128bcebe7518b1d789ad54a20dab7ed2cb8020eba51527199d1fbd0ae706b17c9101610a6f565b610efd611a4f565b6001600160a01b038116610f2c57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610f3581611a7c565b50565b604051806101600160405280606481526020016064815260200160648152602001606481526020016064815260200160008152602001600081526020016000815260200160008152602001600081526020014262015180610f99919061237a565b90526000828152600160208181526040808420855181558583015181850155858201516002808301919091556060808801516003808501919091556080808a015160048087019190915560a08b0151600587015560c08b015160068088019190915560e08c015160078801556101008c015160088801556101208c01516009880155610140909b0151600a96870155865180850188526032815242818a019081528189018c81528e8d52878b52898d20925183559051828c01555190860155865191820187528882528188018a81528288018b81529483019687528c8b52838952878b209251835490151560ff199182161784559051838b01559351948201949094559351938101939093558185528387206302468acf60e31b885285528387208054821687179055638765432160e01b875283872080548216871790556304488cd160e21b87528387208054821687179055634433221160e01b87528387208054821687179055630aaccef160e31b875283872080548216871790558887528785528387208451631c9bdb1b60e21b815280840182905285519081900360249081018220805485168a1790558b8a528a88526262757960e81b8252948101829052855190819003602301812080548416891790558a8952898752631c985a5b60e21b81528084018290528551908190038501812080548416891790558a89528987526519985d58d95d60d21b8152808a0182905285519081900360260181208054841689179055999097529690935263636f6f6b60e01b87529186019390935291519384900390910190922080549091169091179055565b60008280602001905181019061120891906123b7565b6000838152600160208181526040928390208351610160810185528154815292810154918301919091526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a9091015461014082018190529192509042106112e65760405162461bcd60e51b815260206004820152601960248201527f47616d6520616374696f6e206c696d69742065787069726564000000000000006044820152606401610f23565b6040805180820190915260048152631c9bdb1b60e21b6020918201528251908301207f63a609dbe3bf962d6f2560a5440ed2e49f20b55670dfa49dee3f16f9e6b4b07a0161137d57805160a0820151106113785760405162461bcd60e51b8152602060048201526013602482015272149bdb1b081b1a5b5a5d08195e18d959591959606a1b6044820152606401610f23565b6115d5565b60408051808201909152600381526262757960e81b6020918201528251908301207f91277179750f5e67c1c7792a0c16a5d0504293cbaf43dd61d8cbdd7c23bd6334016114105780602001518160c00151106113785760405162461bcd60e51b8152602060048201526012602482015271109d5e481b1a5b5a5d08195e18d95959195960721b6044820152606401610f23565b6040805180820190915260048152631c985a5b60e21b6020918201528251908301207f7a199b0663cbff4e5f7fe8dc8ac5694b40184dcf816db4d09cf9906d24545fa4016114a55780604001518160e00151106113785760405162461bcd60e51b815260206004820152601360248201527214985a5b081b1a5b5a5d08195e18d959591959606a1b6044820152606401610f23565b60408051808201909152600681526519985d58d95d60d21b6020918201528251908301207fc76911c57419ebc41c05e6c7524517d8038db4a009b6afe180273f3acad345060161153f578060600151816101000151106113785760405162461bcd60e51b815260206004820152601560248201527411985d58d95d081b1a5b5a5d08195e18d959591959605a1b6044820152606401610f23565b604080518082019091526004815263636f6f6b60e01b6020918201528251908301207fa1a66ae666c0e616524600522f772239d3aa8a418447bb49c427cdf52f169167016115d5578060800151816101200151106115d55760405162461bcd60e51b815260206004820152601360248201527210dbdbdac81b1a5b5a5d08195e18d959591959606a1b6044820152606401610f23565b50505050565b6000818152600260208181526040928390208351606081018552815481526001820154928101839052920154928201929092529061161b90610e1061237a565b4210611625575050565b805160408201511061166f5760405162461bcd60e51b815260206004820152601360248201527214985d19481b1a5b5a5d08195e18d959591959606a1b6044820152606401610f23565b5050565b6000818152600360208181526040928390208351608081018552815460ff1615158082526001830154938201939093526002820154948101949094529091015460608301526117045760405162461bcd60e51b815260206004820152601760248201527f47616d652073657373696f6e206e6f74206163746976650000000000000000006044820152606401610f23565b806060015181604001511061166f5760405162461bcd60e51b815260206004820181905260248201527f4d617820636f6e736563757469766520616374696f6e732065786365656465646044820152606401610f23565b600084806020019051810190611771919061242e565b905060048210156117be5760405162461bcd60e51b8152602060048201526017602482015276092dcecc2d8d2c840c6c2d8d8c8c2e8c240d8cadccee8d604b1b6044820152606401610f23565b823560e01c6000805b835181101561181557826001600160e01b0319168482815181106117ed576117ed6124e0565b60200260200101516001600160e01b0319160361180d5760019150611815565b6001016117c7565b508061185a5760405162461bcd60e51b8152602060048201526014602482015273119d5b98dd1a5bdb881b9bdd08185b1b1bddd95960621b6044820152606401610f23565b50505050505050565b60148110156118ae5760405162461bcd60e51b8152602060048201526017602482015276092dcecc2d8d2c840c6c2d8d8c8c2e8c240d8cadccee8d604b1b6044820152606401610f23565b60008381526005602090815260408083208054825181850281018501909352808352863560601c949383018282801561191057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118f2575b505050505090506000805b825181101561196757836001600160a01b0316838281518110611940576119406124e0565b60200260200101516001600160a01b03160361195f5760019150611967565b60010161191b565b50806119aa5760405162461bcd60e51b815260206004820152601260248201527115185c99d95d081b9bdd08185b1b1bddd95960721b6044820152606401610f23565b505050505050565b6000828060200190518101906119c891906123b7565b905060066000838152602001908152602001600020816040516119eb91906124f6565b9081526040519081900360200190205460ff16611a4a5760405162461bcd60e51b815260206004820152601760248201527f47616d6520616374696f6e206e6f7420616c6c6f7765640000000000000000006044820152606401610f23565b505050565b6000546001600160a01b03163314610a8e5760405163118cdaa760e01b8152336004820152602401610f23565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600084806020019051810190611ae291906123b7565b600085815260016020908152604091829020825180840190935260048352631c9bdb1b60e21b92820192909252825190830120919250907f63a609dbe3bf962d6f2560a5440ed2e49f20b55670dfa49dee3f16f9e6b4b07a01611b5b57600581018054906000611b5183612512565b91905055506119aa565b60408051808201909152600381526262757960e81b6020918201528251908301207f91277179750f5e67c1c7792a0c16a5d0504293cbaf43dd61d8cbdd7c23bd633401611bb457600681018054906000611b5183612512565b6040805180820190915260048152631c985a5b60e21b6020918201528251908301207f7a199b0663cbff4e5f7fe8dc8ac5694b40184dcf816db4d09cf9906d24545fa401611c0e57600781018054906000611b5183612512565b60408051808201909152600681526519985d58d95d60d21b6020918201528251908301207fc76911c57419ebc41c05e6c7524517d8038db4a009b6afe180273f3acad3450601611c6a57600881018054906000611b5183612512565b604080518082019091526004815263636f6f6b60e01b6020918201528251908301207fa1a66ae666c0e616524600522f772239d3aa8a418447bb49c427cdf52f169167016119aa57600981018054906000611cc483612512565b9190505550505050505050565b60008181526002602052604090206001810154611cf090610e1061237a565b4210611d09574260018083019190915560028201555050565b600281018054906000611d1b83612512565b91905055505050565b60008181526003602052604090206001810154611d439061012c61237a565b4210611d555760016002820155611d6d565b600281018054906000611d6783612512565b91905055505b4260019091015550565b828054828255906000526020600020908101928215611dca579160200282015b82811115611dca5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611d97565b50611dd6929150611dda565b5090565b5b80821115611dd65760008155600101611ddb565b600060208284031215611e0157600080fd5b5035919050565b60008083601f840112611e1a57600080fd5b50813567ffffffffffffffff811115611e3257600080fd5b602083019150836020828501011115611e4a57600080fd5b9250929050565b80358015158114611e6157600080fd5b919050565b60008060008060608587031215611e7c57600080fd5b84359350602085013567ffffffffffffffff811115611e9a57600080fd5b611ea687828801611e08565b9094509250611eb9905060408601611e51565b905092959194509250565b60008060408385031215611ed757600080fd5b50508035926020909101359150565b60008060008060008060008060a0898b031215611f0257600080fd5b883567ffffffffffffffff80821115611f1a57600080fd5b611f268c838d01611e08565b909a50985060208b0135915080821115611f3f57600080fd5b611f4b8c838d01611e08565b909850965060408b0135955060608b0135915080821115611f6b57600080fd5b50611f788b828c01611e08565b999c989b50969995989497949560800135949350505050565b600080600060408486031215611fa657600080fd5b83359250602084013567ffffffffffffffff80821115611fc557600080fd5b818601915086601f830112611fd957600080fd5b813581811115611fe857600080fd5b8760208260051b8501011115611ffd57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561204f5761204f612010565b604052919050565b600067ffffffffffffffff82111561207157612071612010565b50601f01601f191660200190565b600061209261208d84612057565b612026565b90508281528383830111156120a657600080fd5b828260208301376000602084830101529392505050565b600082601f8301126120ce57600080fd5b6120dd8383356020850161207f565b9392505050565b600080604083850312156120f757600080fd5b82359150602083013567ffffffffffffffff81111561211557600080fd5b612121858286016120bd565b9150509250929050565b6001600160e01b031981168114610f3557600080fd5b6000806040838503121561215457600080fd5b8235915060208301356121668161212b565b809150509250929050565b60008060006060848603121561218657600080fd5b8335925061219660208501611e51565b9150604084013590509250925092565b600080600080600080600060e0888a0312156121c157600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b60008060006060848603121561220757600080fd5b8335925060208401356122198161212b565b915061222760408501611e51565b90509250925092565b80356001600160a01b0381168114611e6157600080fd5b60006020828403121561225957600080fd5b6120dd82612230565b8183823760009101908152919050565b6040815282604082015282846060830137600060608483018101919091529115156020820152601f909201601f191690910101919050565b600080604083850312156122bd57600080fd5b823567ffffffffffffffff808211156122d557600080fd5b6122e1868387016120bd565b935060208501359150808211156122f757600080fd5b508301601f8101851361230957600080fd5b6121218582356020840161207f565b60208082528181018390526000908460408401835b86811015612359576001600160a01b0361234684612230565b168252918301919083019060010161232d565b509695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561238d5761238d612364565b92915050565b60005b838110156123ae578181015183820152602001612396565b50506000910152565b6000602082840312156123c957600080fd5b815167ffffffffffffffff8111156123e057600080fd5b8201601f810184136123f157600080fd5b80516123ff61208d82612057565b81815285602083850101111561241457600080fd5b612425826020830160208601612393565b95945050505050565b6000602080838503121561244157600080fd5b825167ffffffffffffffff8082111561245957600080fd5b818501915085601f83011261246d57600080fd5b81518181111561247f5761247f612010565b8060051b9150612490848301612026565b81815291830184019184810190888411156124aa57600080fd5b938501935b838510156124d457845192506124c48361212b565b82825293850193908501906124af565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251612508818460208701612393565b9190910192915050565b60006001820161252457612524612364565b506001019056fea2646970667358221220f47aa7c66511ec637ffd00d5de687414a5dbfb2f546ed5831123f913dfeb8dff64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063cd57c20c11610097578063d22f673111610071578063d22f6731146105a2578063ef928f34146105b5578063f2fde38b146105c8578063f7e80f68146105db57600080fd5b8063cd57c20c14610491578063ce4c7ed2146104d9578063d0af26d11461059457600080fd5b80638da5cb5b146103f05780639e8b952514610415578063a84a8a6214610428578063abed801a1461043b578063b20d37851461044e578063bada10201461048357600080fd5b8063397969551161014b57806347cea2651161012557806347cea2651461035d57806358cd3d9e146103ac578063715018a6146103ba5780638590c677146103c257600080fd5b8063397969551461032957806344f72a841461033c578063467682191461034a57600080fd5b806310affbc41461019357806314ed3b9d14610234578063184e385a1461027d5780632fddfb90146102925780632fe7e41f146102a557806334aad29614610302575b600080fd5b6101a66101a1366004611def565b6105ee565b60405161022b9190600061016082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525092915050565b60405180910390f35b610262610242366004611def565b600260208190526000918252604090912080546001820154919092015483565b6040805193845260208401929092529082015260600161022b565b61029061028b366004611e66565b6106d9565b005b6102906102a0366004611ec4565b61075f565b6102e06102b3366004611def565b6003602081905260009182526040909120805460018201546002830154929093015460ff90911692919084565b604080519415158552602085019390935291830152606082015260800161022b565b6103106302468acf60e31b81565b6040516001600160e01b0319909116815260200161022b565b610290610337366004611ee6565b6107d8565b6103106304488cd160e21b81565b610290610358366004611f91565b610a23565b61039c61036b3660046120e4565b6006602090815260009283526040909220815180830184018051928152908401929093019190912091525460ff1681565b604051901515815260200161022b565b610310638765432160e01b81565b610290610a7c565b61039c6103d0366004612141565b600460209081526000928352604080842090915290825290205460ff1681565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161022b565b610290610423366004611ee6565b610a90565b610290610436366004612171565b610baf565b6102906104493660046121a6565b610c3b565b61046161045c366004611def565b610d81565b604080518251815260208084015190820152918101519082015260600161022b565b610310634433221160e01b81565b6104a461049f366004611def565b610dde565b60405161022b919081511515815260208083015190820152604080830151908201526060918201519181019190915260800190565b6105416104e7366004611def565b600160205280600052604060002060009150905080600001549080600101549080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a015490508b565b604080519b8c5260208c019a909a52988a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600161022b565b610310630aaccef160e31b81565b6103fd6105b0366004611ec4565b610e52565b6102906105c33660046121f2565b610e8a565b6102906105d6366004612247565b610ef5565b6102906105e9366004611def565b610f38565b61064b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506000908152600160208181526040928390208351610160810185528154815292810154918301919091526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a9091015461014082015290565b806006600086815260200190815260200160002084846040516106fd929190612262565b908152604051908190036020018120805492151560ff199093169290921790915584907fa30a7463331a72d3832405162e66b2bddf4b0c6fa24562179fe3208ef5abe4519061075190869086908690612272565b60405180910390a250505050565b60408051606081018252828152426020808301918252600083850181815287825260029283905290859020935184559151600184015590519101555182907ffc680d3bfccc4bb5a66a20edf89c686c6acf514db13551e6233ece91e52cd1df906107cc9084815260200190565b60405180910390a25050565b6000806107e7898b018b6122aa565b60408051808201909152600f81526e19d85b595058dd1a5bdb931a5b5a5d608a1b60209182015282519083012091935091507fe218ca3e9a0c0b614626aa3578ec3df0a2cacc9338b29aa7439ead43d4cc07f60161084e5761084981846111f2565b610a17565b6040805180820190915260098152681c985d19531a5b5a5d60ba1b6020918201528251908301207fb78e66362e2a296e3816264f81042ffad2302063eb3c6ac84dc1cc430fc9defb016108a457610849836115db565b60408051808201909152600981526867616d65537461746560b81b6020918201528251908301207f2196edf5cb86111b6c08b6d5b8b627a8d1b04e423af399e3a6a7971ccb2d4b58016108fa5761084983611673565b60408051808201909152601081526f616c6c6f77656446756e6374696f6e7360801b6020918201528251908301207f0a72081275919f77e32bab63069198b4fb9b37b7e727682184851ecf8666d9b00161095a576108498184878761175b565b60408051808201909152600e81526d616c6c6f7765645461726765747360901b6020918201528251908301207f14d1cc92269128a7f462c427b6c4761966d55eb0441ee724daf313672e8ab53c016109b757610849838686611863565b604080518082019091526012815271616c6c6f77656447616d65416374696f6e7360701b6020918201528251908301207f816905e51df69094c69f5d1a7247c74e8d91652f9062327a1dea6223a98d363c01610a1757610a1781846119b2565b50505050505050505050565b6000838152600560205260409020610a3c908383611d77565b50827f99da1e2b1717b646ead98c2708c7aa14c7b30af8f90e9d150a9cb31454e5d8788383604051610a6f929190612318565b60405180910390a2505050565b610a84611a4f565b610a8e6000611a7c565b565b600080610a9f898b018b6122aa565b60408051808201909152600f81526e19d85b595058dd1a5bdb931a5b5a5d608a1b60209182015282519083012091935091507fe218ca3e9a0c0b614626aa3578ec3df0a2cacc9338b29aa7439ead43d4cc07f601610b035761084981848787611acc565b6040805180820190915260098152681c985d19531a5b5a5d60ba1b6020918201528251908301207fb78e66362e2a296e3816264f81042ffad2302063eb3c6ac84dc1cc430fc9defb01610b595761084983611cd1565b60408051808201909152600981526867616d65537461746560b81b6020918201528251908301207f2196edf5cb86111b6c08b6d5b8b627a8d1b04e423af399e3a6a7971ccb2d4b5801610a1757610a1783611d24565b6040805160808101825283151580825260006020808401828152848601838152606086018881528a85526003808552948890209651875460ff191690151517875591516001870155516002860155519390910192909255825190815290810183905284917fddf24137f413eaa090979b3bb70eb4958e4cd7669ac239f07afbfb2a36fcedf19101610a6f565b60405180610160016040528087815260200186815260200185815260200184815260200183815260200160008152602001600081526020016000815260200160008152602001600081526020018281525060016000898152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a0155905050867f784539da0cda3290eeabf2c1b2e3a1846b83344073d22591e572d99ba8069d9d878787878787604051610d7096959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405180910390a250505050505050565b610da560405180606001604052806000815260200160008152602001600081525090565b50600090815260026020818152604092839020835160608101855281548152600182015492810192909252909101549181019190915290565b610e0b60405180608001604052806000151581526020016000815260200160008152602001600081525090565b506000908152600360208181526040928390208351608081018552815460ff1615158152600182015492810192909252600281015493820193909352910154606082015290565b60056020528160005260406000208181548110610e6e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60008381526004602090815260408083206001600160e01b0319861680855290835292819020805460ff191685151590811790915581519384529183019190915284917f128bcebe7518b1d789ad54a20dab7ed2cb8020eba51527199d1fbd0ae706b17c9101610a6f565b610efd611a4f565b6001600160a01b038116610f2c57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610f3581611a7c565b50565b604051806101600160405280606481526020016064815260200160648152602001606481526020016064815260200160008152602001600081526020016000815260200160008152602001600081526020014262015180610f99919061237a565b90526000828152600160208181526040808420855181558583015181850155858201516002808301919091556060808801516003808501919091556080808a015160048087019190915560a08b0151600587015560c08b015160068088019190915560e08c015160078801556101008c015160088801556101208c01516009880155610140909b0151600a96870155865180850188526032815242818a019081528189018c81528e8d52878b52898d20925183559051828c01555190860155865191820187528882528188018a81528288018b81529483019687528c8b52838952878b209251835490151560ff199182161784559051838b01559351948201949094559351938101939093558185528387206302468acf60e31b885285528387208054821687179055638765432160e01b875283872080548216871790556304488cd160e21b87528387208054821687179055634433221160e01b87528387208054821687179055630aaccef160e31b875283872080548216871790558887528785528387208451631c9bdb1b60e21b815280840182905285519081900360249081018220805485168a1790558b8a528a88526262757960e81b8252948101829052855190819003602301812080548416891790558a8952898752631c985a5b60e21b81528084018290528551908190038501812080548416891790558a89528987526519985d58d95d60d21b8152808a0182905285519081900360260181208054841689179055999097529690935263636f6f6b60e01b87529186019390935291519384900390910190922080549091169091179055565b60008280602001905181019061120891906123b7565b6000838152600160208181526040928390208351610160810185528154815292810154918301919091526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a9091015461014082018190529192509042106112e65760405162461bcd60e51b815260206004820152601960248201527f47616d6520616374696f6e206c696d69742065787069726564000000000000006044820152606401610f23565b6040805180820190915260048152631c9bdb1b60e21b6020918201528251908301207f63a609dbe3bf962d6f2560a5440ed2e49f20b55670dfa49dee3f16f9e6b4b07a0161137d57805160a0820151106113785760405162461bcd60e51b8152602060048201526013602482015272149bdb1b081b1a5b5a5d08195e18d959591959606a1b6044820152606401610f23565b6115d5565b60408051808201909152600381526262757960e81b6020918201528251908301207f91277179750f5e67c1c7792a0c16a5d0504293cbaf43dd61d8cbdd7c23bd6334016114105780602001518160c00151106113785760405162461bcd60e51b8152602060048201526012602482015271109d5e481b1a5b5a5d08195e18d95959195960721b6044820152606401610f23565b6040805180820190915260048152631c985a5b60e21b6020918201528251908301207f7a199b0663cbff4e5f7fe8dc8ac5694b40184dcf816db4d09cf9906d24545fa4016114a55780604001518160e00151106113785760405162461bcd60e51b815260206004820152601360248201527214985a5b081b1a5b5a5d08195e18d959591959606a1b6044820152606401610f23565b60408051808201909152600681526519985d58d95d60d21b6020918201528251908301207fc76911c57419ebc41c05e6c7524517d8038db4a009b6afe180273f3acad345060161153f578060600151816101000151106113785760405162461bcd60e51b815260206004820152601560248201527411985d58d95d081b1a5b5a5d08195e18d959591959605a1b6044820152606401610f23565b604080518082019091526004815263636f6f6b60e01b6020918201528251908301207fa1a66ae666c0e616524600522f772239d3aa8a418447bb49c427cdf52f169167016115d5578060800151816101200151106115d55760405162461bcd60e51b815260206004820152601360248201527210dbdbdac81b1a5b5a5d08195e18d959591959606a1b6044820152606401610f23565b50505050565b6000818152600260208181526040928390208351606081018552815481526001820154928101839052920154928201929092529061161b90610e1061237a565b4210611625575050565b805160408201511061166f5760405162461bcd60e51b815260206004820152601360248201527214985d19481b1a5b5a5d08195e18d959591959606a1b6044820152606401610f23565b5050565b6000818152600360208181526040928390208351608081018552815460ff1615158082526001830154938201939093526002820154948101949094529091015460608301526117045760405162461bcd60e51b815260206004820152601760248201527f47616d652073657373696f6e206e6f74206163746976650000000000000000006044820152606401610f23565b806060015181604001511061166f5760405162461bcd60e51b815260206004820181905260248201527f4d617820636f6e736563757469766520616374696f6e732065786365656465646044820152606401610f23565b600084806020019051810190611771919061242e565b905060048210156117be5760405162461bcd60e51b8152602060048201526017602482015276092dcecc2d8d2c840c6c2d8d8c8c2e8c240d8cadccee8d604b1b6044820152606401610f23565b823560e01c6000805b835181101561181557826001600160e01b0319168482815181106117ed576117ed6124e0565b60200260200101516001600160e01b0319160361180d5760019150611815565b6001016117c7565b508061185a5760405162461bcd60e51b8152602060048201526014602482015273119d5b98dd1a5bdb881b9bdd08185b1b1bddd95960621b6044820152606401610f23565b50505050505050565b60148110156118ae5760405162461bcd60e51b8152602060048201526017602482015276092dcecc2d8d2c840c6c2d8d8c8c2e8c240d8cadccee8d604b1b6044820152606401610f23565b60008381526005602090815260408083208054825181850281018501909352808352863560601c949383018282801561191057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118f2575b505050505090506000805b825181101561196757836001600160a01b0316838281518110611940576119406124e0565b60200260200101516001600160a01b03160361195f5760019150611967565b60010161191b565b50806119aa5760405162461bcd60e51b815260206004820152601260248201527115185c99d95d081b9bdd08185b1b1bddd95960721b6044820152606401610f23565b505050505050565b6000828060200190518101906119c891906123b7565b905060066000838152602001908152602001600020816040516119eb91906124f6565b9081526040519081900360200190205460ff16611a4a5760405162461bcd60e51b815260206004820152601760248201527f47616d6520616374696f6e206e6f7420616c6c6f7765640000000000000000006044820152606401610f23565b505050565b6000546001600160a01b03163314610a8e5760405163118cdaa760e01b8152336004820152602401610f23565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600084806020019051810190611ae291906123b7565b600085815260016020908152604091829020825180840190935260048352631c9bdb1b60e21b92820192909252825190830120919250907f63a609dbe3bf962d6f2560a5440ed2e49f20b55670dfa49dee3f16f9e6b4b07a01611b5b57600581018054906000611b5183612512565b91905055506119aa565b60408051808201909152600381526262757960e81b6020918201528251908301207f91277179750f5e67c1c7792a0c16a5d0504293cbaf43dd61d8cbdd7c23bd633401611bb457600681018054906000611b5183612512565b6040805180820190915260048152631c985a5b60e21b6020918201528251908301207f7a199b0663cbff4e5f7fe8dc8ac5694b40184dcf816db4d09cf9906d24545fa401611c0e57600781018054906000611b5183612512565b60408051808201909152600681526519985d58d95d60d21b6020918201528251908301207fc76911c57419ebc41c05e6c7524517d8038db4a009b6afe180273f3acad3450601611c6a57600881018054906000611b5183612512565b604080518082019091526004815263636f6f6b60e01b6020918201528251908301207fa1a66ae666c0e616524600522f772239d3aa8a418447bb49c427cdf52f169167016119aa57600981018054906000611cc483612512565b9190505550505050505050565b60008181526002602052604090206001810154611cf090610e1061237a565b4210611d09574260018083019190915560028201555050565b600281018054906000611d1b83612512565b91905055505050565b60008181526003602052604090206001810154611d439061012c61237a565b4210611d555760016002820155611d6d565b600281018054906000611d6783612512565b91905055505b4260019091015550565b828054828255906000526020600020908101928215611dca579160200282015b82811115611dca5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611d97565b50611dd6929150611dda565b5090565b5b80821115611dd65760008155600101611ddb565b600060208284031215611e0157600080fd5b5035919050565b60008083601f840112611e1a57600080fd5b50813567ffffffffffffffff811115611e3257600080fd5b602083019150836020828501011115611e4a57600080fd5b9250929050565b80358015158114611e6157600080fd5b919050565b60008060008060608587031215611e7c57600080fd5b84359350602085013567ffffffffffffffff811115611e9a57600080fd5b611ea687828801611e08565b9094509250611eb9905060408601611e51565b905092959194509250565b60008060408385031215611ed757600080fd5b50508035926020909101359150565b60008060008060008060008060a0898b031215611f0257600080fd5b883567ffffffffffffffff80821115611f1a57600080fd5b611f268c838d01611e08565b909a50985060208b0135915080821115611f3f57600080fd5b611f4b8c838d01611e08565b909850965060408b0135955060608b0135915080821115611f6b57600080fd5b50611f788b828c01611e08565b999c989b50969995989497949560800135949350505050565b600080600060408486031215611fa657600080fd5b83359250602084013567ffffffffffffffff80821115611fc557600080fd5b818601915086601f830112611fd957600080fd5b813581811115611fe857600080fd5b8760208260051b8501011115611ffd57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561204f5761204f612010565b604052919050565b600067ffffffffffffffff82111561207157612071612010565b50601f01601f191660200190565b600061209261208d84612057565b612026565b90508281528383830111156120a657600080fd5b828260208301376000602084830101529392505050565b600082601f8301126120ce57600080fd5b6120dd8383356020850161207f565b9392505050565b600080604083850312156120f757600080fd5b82359150602083013567ffffffffffffffff81111561211557600080fd5b612121858286016120bd565b9150509250929050565b6001600160e01b031981168114610f3557600080fd5b6000806040838503121561215457600080fd5b8235915060208301356121668161212b565b809150509250929050565b60008060006060848603121561218657600080fd5b8335925061219660208501611e51565b9150604084013590509250925092565b600080600080600080600060e0888a0312156121c157600080fd5b505085359760208701359750604087013596606081013596506080810135955060a0810135945060c0013592509050565b60008060006060848603121561220757600080fd5b8335925060208401356122198161212b565b915061222760408501611e51565b90509250925092565b80356001600160a01b0381168114611e6157600080fd5b60006020828403121561225957600080fd5b6120dd82612230565b8183823760009101908152919050565b6040815282604082015282846060830137600060608483018101919091529115156020820152601f909201601f191690910101919050565b600080604083850312156122bd57600080fd5b823567ffffffffffffffff808211156122d557600080fd5b6122e1868387016120bd565b935060208501359150808211156122f757600080fd5b508301601f8101851361230957600080fd5b6121218582356020840161207f565b60208082528181018390526000908460408401835b86811015612359576001600160a01b0361234684612230565b168252918301919083019060010161232d565b509695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561238d5761238d612364565b92915050565b60005b838110156123ae578181015183820152602001612396565b50506000910152565b6000602082840312156123c957600080fd5b815167ffffffffffffffff8111156123e057600080fd5b8201601f810184136123f157600080fd5b80516123ff61208d82612057565b81815285602083850101111561241457600080fd5b612425826020830160208601612393565b95945050505050565b6000602080838503121561244157600080fd5b825167ffffffffffffffff8082111561245957600080fd5b818501915085601f83011261246d57600080fd5b81518181111561247f5761247f612010565b8060051b9150612490848301612026565b81815291830184019184810190888411156124aa57600080fd5b938501935b838510156124d457845192506124c48361212b565b82825293850193908501906124af565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251612508818460208701612393565b9190910192915050565b60006001820161252457612524612364565b506001019056fea2646970667358221220f47aa7c66511ec637ffd00d5de687414a5dbfb2f546ed5831123f913dfeb8dff64736f6c63430008170033",
  "devdoc": {
    "details": "Caveat enforcer specifically for game actions (roll, rail, buy, faucet, cook) Implements ICaveatEnforcer interface for MetaMask delegation toolkit compatibility",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "afterHook(bytes,bytes,uint256,bytes,bytes32)": {
        "details": "ICaveatEnforcer afterHook implementation"
      },
      "beforeHook(bytes,bytes,uint256,bytes,bytes32)": {
        "details": "ICaveatEnforcer beforeHook implementation"
      },
      "getGameActionLimits(bytes32)": {
        "details": "Get game action limits for a delegation"
      },
      "getGameState(bytes32)": {
        "details": "Get game state for a delegation"
      },
      "getRateLimit(bytes32)": {
        "details": "Get rate limit for a delegation"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAllowedFunction(bytes32,bytes4,bool)": {
        "details": "Set allowed function selectors for a delegation Anyone can set function selectors for their own delegations"
      },
      "setAllowedGameAction(bytes32,string,bool)": {
        "details": "Set allowed game actions for a delegation Anyone can set game actions for their own delegations"
      },
      "setAllowedTargetAddresses(bytes32,address[])": {
        "details": "Set allowed target addresses for a delegation Anyone can set target addresses for their own delegations"
      },
      "setDefaultGameConfig(bytes32)": {
        "details": "Set default game configuration for a delegation Anyone can set default config for their own delegations"
      },
      "setGameActionLimit(bytes32,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Set game action limits for a delegation Anyone can set limits for their own delegations"
      },
      "setGameState(bytes32,bool,uint256)": {
        "details": "Set game state for a delegation Anyone can set game state for their own delegations"
      },
      "setRateLimit(bytes32,uint256)": {
        "details": "Set rate limit for a delegation Anyone can set rate limits for their own delegations"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "GameCaveatEnforcer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20552,
        "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
        "label": "gameActionLimits",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(GameActionLimit)20531_storage)"
      },
      {
        "astId": 20557,
        "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
        "label": "rateLimits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RateLimit)20538_storage)"
      },
      {
        "astId": 20562,
        "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
        "label": "gameStates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(GameState)20547_storage)"
      },
      {
        "astId": 20568,
        "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
        "label": "allowedFunctions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes4,t_bool))"
      },
      {
        "astId": 20573,
        "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
        "label": "allowedTargetAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 20579,
        "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
        "label": "allowedGameActions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes4,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes4 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes4,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(GameActionLimit)20531_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GameCaveatEnforcer.GameActionLimit)",
        "numberOfBytes": "32",
        "value": "t_struct(GameActionLimit)20531_storage"
      },
      "t_mapping(t_bytes32,t_struct(GameState)20547_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GameCaveatEnforcer.GameState)",
        "numberOfBytes": "32",
        "value": "t_struct(GameState)20547_storage"
      },
      "t_mapping(t_bytes32,t_struct(RateLimit)20538_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GameCaveatEnforcer.RateLimit)",
        "numberOfBytes": "32",
        "value": "t_struct(RateLimit)20538_storage"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GameActionLimit)20531_storage": {
        "encoding": "inplace",
        "label": "struct GameCaveatEnforcer.GameActionLimit",
        "members": [
          {
            "astId": 20510,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "maxRolls",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20512,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "maxBuys",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20514,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "maxRails",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20516,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "maxFaucets",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20518,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "maxCooks",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 20520,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "usedRolls",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20522,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "usedBuys",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 20524,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "usedRails",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 20526,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "usedFaucets",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 20528,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "usedCooks",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 20530,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "validUntil",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(GameState)20547_storage": {
        "encoding": "inplace",
        "label": "struct GameCaveatEnforcer.GameState",
        "members": [
          {
            "astId": 20540,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "isActive",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20542,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "lastActionTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20544,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "consecutiveActions",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20546,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "maxConsecutiveActions",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RateLimit)20538_storage": {
        "encoding": "inplace",
        "label": "struct GameCaveatEnforcer.RateLimit",
        "members": [
          {
            "astId": 20533,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "maxCallsPerHour",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 20535,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "lastResetTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20537,
            "contract": "contracts/delegation/GameCaveatEnforcer.sol:GameCaveatEnforcer",
            "label": "callsThisHour",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}