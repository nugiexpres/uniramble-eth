{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4906.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"./IERC1155.sol\";\nimport {IERC1155Receiver} from \"./IERC1155Receiver.sol\";\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {Arrays} from \"../../utils/Arrays.sol\";\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\n\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = _balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    _balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                _balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\n            } else {\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n *\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\n * that can be minted.\n *\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 id => uint256) private _totalSupply;\n    uint256 private _totalSupplyAll;\n\n    /**\n     * @dev Total value of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Total value of tokens.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupplyAll;\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_update}.\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override {\n        super._update(from, to, ids, values);\n\n        if (from == address(0)) {\n            uint256 totalMintValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\n                _totalSupply[ids[i]] += value;\n                totalMintValue += value;\n            }\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\n            _totalSupplyAll += totalMintValue;\n        }\n\n        if (to == address(0)) {\n            uint256 totalBurnValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n\n                unchecked {\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\n                    _totalSupply[ids[i]] -= value;\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                    totalBurnValue += value;\n                }\n            }\n            unchecked {\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                _totalSupplyAll -= totalBurnValue;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165, ERC165} from \"../../../utils/introspection/ERC165.sol\";\nimport {IERC1155Receiver} from \"../IERC1155Receiver.sol\";\n\n/**\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n */\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Not enough balance for performing a CREATE2 deploy.\n     */\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error Create2FailedDeployment();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Create2InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        if (addr == address(0)) {\n            revert Create2FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.20;\n\nimport {ECDSA} from \"./ECDSA.sol\";\nimport {IERC1271} from \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Safe Wallet (previously Gnosis Safe).\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/BreadToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BreadToken is ERC20, Ownable {\n    address public gameContract;\n\n    constructor() ERC20(\"Bread\", \"BT\") Ownable(msg.sender) {}\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    /// @notice Mint token Bread\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        // mint token ke user\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/BurgerBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { ERC1155 } from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport { ERC1155Supply } from \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/utils/Pausable.sol\";\n\n/// @title BurgerBox (ERC1155)\n/// @notice Game ticket system untuk berbagai mini-games dan rewards\ncontract BurgerBox is ERC1155, ERC1155Supply, AccessControl, Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n    bytes32 public constant URI_SETTER_ROLE = keccak256(\"URI_SETTER_ROLE\");\n\n    // Predefined Token IDs dengan constants untuk clarity\n    uint256 public constant BURGER_GAME_1 = 1;\n    uint256 public constant BURGER_GAME_2 = 2;\n    uint256 public constant PIZZA_GAME = 3;\n    uint256 public constant SPECIAL_REWARD = 10;\n    uint256 public constant RARE_TICKET = 20;\n\n    // Whitelist ID yang aktif untuk dipakai sebagai tiket\n    mapping(uint256 => bool) public activeTicketId;\n\n    // Optional: Track ticket names untuk UI\n    mapping(uint256 => string) public ticketNames;\n\n    // Events\n    event TicketIdActivated(uint256 indexed id, bool active);\n    event TicketNameSet(uint256 indexed id, string name);\n    event BatchMinted(address indexed to, uint256[] ids, uint256[] amounts);\n\n    constructor(string memory baseURI, address admin) ERC1155(baseURI) {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        _grantRole(MINTER_ROLE, admin);\n        _grantRole(BURNER_ROLE, admin);\n        _grantRole(URI_SETTER_ROLE, admin);\n\n        // Auto-activate common ticket IDs\n        _activateDefaultTickets();\n        _setDefaultTicketNames();\n    }\n\n    // === ADMIN FUNCTIONS ===\n\n    /**\n     * @notice Update base URI (dengan {id} placeholder support)\n     * @param newuri Base URI seperti \"http://localhost:3000/metadata/{id}.json\"\n     */\n    function setURI(string calldata newuri) external onlyRole(URI_SETTER_ROLE) {\n        _setURI(newuri);\n    }\n\n    /**\n     * @notice Activate/deactivate ticket ID untuk minting\n     */\n    function setActiveTicketId(uint256 id, bool active) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        activeTicketId[id] = active;\n        emit TicketIdActivated(id, active);\n    }\n\n    /**\n     * @notice Batch activate multiple ticket IDs\n     */\n    function batchSetActiveTicketIds(uint256[] calldata ids, bool active) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        for (uint256 i = 0; i < ids.length; i++) {\n            activeTicketId[ids[i]] = active;\n            emit TicketIdActivated(ids[i], active);\n        }\n    }\n\n    /**\n     * @notice Set ticket name untuk UI display\n     */\n    function setTicketName(uint256 id, string calldata name) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        ticketNames[id] = name;\n        emit TicketNameSet(id, name);\n    }\n\n    /**\n     * @notice Batch set ticket names\n     */\n    function batchSetTicketNames(\n        uint256[] calldata ids,\n        string[] calldata names\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(ids.length == names.length, \"Arrays length mismatch\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            ticketNames[ids[i]] = names[i];\n            emit TicketNameSet(ids[i], names[i]);\n        }\n    }\n\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    // === MINTING FUNCTIONS ===\n\n    /**\n     * @notice Mint single ticket type\n     */\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) external onlyRole(MINTER_ROLE) {\n        require(activeTicketId[id], \"Ticket ID not active\");\n        _mint(to, id, amount, data);\n    }\n\n    /**\n     * @notice Mint multiple ticket types at once\n     */\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external onlyRole(MINTER_ROLE) {\n        // Validate all IDs are active\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(activeTicketId[ids[i]], \"Ticket ID not active\");\n        }\n\n        _mintBatch(to, ids, amounts, data);\n        emit BatchMinted(to, ids, amounts);\n    }\n\n    /**\n     * @notice Convenient function untuk mint reward tickets\n     */\n    function mintReward(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\n        require(activeTicketId[SPECIAL_REWARD], \"Special reward not active\");\n        _mint(to, SPECIAL_REWARD, amount, \"\");\n    }\n\n    // === BURNING FUNCTIONS ===\n\n    /**\n     * @notice Burn single ticket (game consumption)\n     */\n    function burn(address from, uint256 id, uint256 amount) external onlyRole(BURNER_ROLE) {\n        _burn(from, id, amount);\n    }\n\n    /**\n     * @notice Burn multiple tickets at once\n     */\n    function burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) external onlyRole(BURNER_ROLE) {\n        _burnBatch(from, ids, amounts);\n    }\n\n    /**\n     * @notice Convenient burn untuk game entry\n     */\n    function burnForGameEntry(address from, uint256 gameId, uint256 amount) external onlyRole(BURNER_ROLE) {\n        require(totalSupply(gameId) >= amount, \"Insufficient supply\");\n        _burn(from, gameId, amount);\n    }\n\n    // === VIEW FUNCTIONS ===\n\n    /**\n     * @notice Check if ticket ID is active\n     */\n    function isActiveTicket(uint256 id) external view returns (bool) {\n        return activeTicketId[id];\n    }\n\n    /**\n     * @notice Get ticket name\n     */\n    function getTicketName(uint256 id) external view returns (string memory) {\n        return ticketNames[id];\n    }\n\n    /**\n     * @notice Get user's balance untuk specific ticket\n     */\n    function getTicketBalance(address account, uint256 id) external view returns (uint256) {\n        return balanceOf(account, id);\n    }\n\n    /**\n     * @notice Get user's balances untuk multiple tickets\n     */\n    function getTicketBalances(address account, uint256[] calldata ids) external view returns (uint256[] memory) {\n        return balanceOfBatch(_asSingletonArray(account, ids.length), ids);\n    }\n\n    /**\n     * @notice Get all active ticket IDs (untuk UI)\n     */\n    function getActiveTicketIds() external view returns (uint256[] memory) {\n        uint256[] memory tempIds = new uint256[](100); // Temporary array\n        uint256 count = 0;\n\n        // Check common IDs\n        uint256[] memory commonIds = new uint256[](5);\n        commonIds[0] = BURGER_GAME_1;\n        commonIds[1] = BURGER_GAME_2;\n        commonIds[2] = PIZZA_GAME;\n        commonIds[3] = SPECIAL_REWARD;\n        commonIds[4] = RARE_TICKET;\n\n        for (uint256 i = 0; i < commonIds.length; i++) {\n            if (activeTicketId[commonIds[i]]) {\n                tempIds[count] = commonIds[i];\n                count++;\n            }\n        }\n\n        // Create exact size array\n        uint256[] memory result = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            result[i] = tempIds[i];\n        }\n\n        return result;\n    }\n\n    /**\n     * @notice Check total supply untuk ticket ID\n     */\n    function getTicketSupply(uint256 id) external view returns (uint256) {\n        return totalSupply(id);\n    }\n\n    // === INTERNAL FUNCTIONS ===\n\n    /**\n     * @notice Auto-activate default tickets saat deploy\n     */\n    function _activateDefaultTickets() private {\n        activeTicketId[BURGER_GAME_1] = true;\n        activeTicketId[BURGER_GAME_2] = true;\n        activeTicketId[PIZZA_GAME] = true;\n        activeTicketId[SPECIAL_REWARD] = true;\n    }\n\n    /**\n     * @notice Set default ticket names\n     */\n    function _setDefaultTicketNames() private {\n        ticketNames[BURGER_GAME_1] = \"Burger Cooking Ticket\";\n        ticketNames[BURGER_GAME_2] = \"Advanced Burger Ticket\";\n        ticketNames[PIZZA_GAME] = \"Pizza Making Ticket\";\n        ticketNames[SPECIAL_REWARD] = \"Special Reward Ticket\";\n        ticketNames[RARE_TICKET] = \"Rare Game Access\";\n    }\n\n    /**\n     * @notice Helper untuk batch operations\n     */\n    function _asSingletonArray(address account, uint256 length) private pure returns (address[] memory) {\n        address[] memory array = new address[](length);\n        for (uint256 i = 0; i < length; i++) {\n            array[i] = account;\n        }\n        return array;\n    }\n\n    // === HOOKS & OVERRIDES ===\n\n    /**\n     * @notice Update hook dengan pause protection\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal override(ERC1155, ERC1155Supply) whenNotPaused {\n        super._update(from, to, ids, values);\n    }\n\n    /**\n     * @notice Support interface untuk AccessControl + ERC1155\n     */\n    function supportsInterface(bytes4 interfaceId) public view override(ERC1155, AccessControl) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    // === EMERGENCY & UTILITY ===\n\n    /**\n     * @notice Emergency mint untuk testing/recovery\n     */\n    function emergencyMint(address to, uint256 id, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _mint(to, id, amount, \"\");\n    }\n}\n"
    },
    "contracts/BurgerBoxStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/*\n  BurgerBoxStake - ERC1155 staking contract\n  - Role-based access (ADMIN / MANAGER / PAUSER)\n  - Supports staking & unstaking single/batch\n  - Emergency withdraw & recovery\n  - Safe ERC1155 receiving with events\n*/\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract BurgerBoxStake is AccessControl, ERC1155Holder, ReentrancyGuard {\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    IERC1155 public immutable burgerBoxContract;\n\n    bool public paused;\n\n    // stake balances: staker => tokenId => amount\n    mapping(address => mapping(uint256 => uint256)) private _balances;\n\n    // events\n    event Staked(address indexed user, uint256 indexed id, uint256 amount);\n    event Unstaked(address indexed user, uint256 indexed id, uint256 amount);\n    event StakedBatch(address indexed user, uint256[] ids, uint256[] amounts);\n    event UnstakedBatch(address indexed user, uint256[] ids, uint256[] amounts);\n    event Paused(address indexed account);\n    event Unpaused(address indexed account);\n    event EmergencyWithdraw(address indexed operator, address indexed to, uint256 indexed id, uint256 amount);\n    event RecoveredERC20(address token, uint256 amount, address to);\n    event RecoveredERC1155(address token, uint256 id, uint256 amount, address to);\n\n    // new events for receiving ERC1155 directly\n    event ERC1155Received(address operator, address from, uint256 id, uint256 value, bytes data);\n    event ERC1155BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data);\n\n    modifier whenNotPaused() {\n        require(!paused, \"BurgerBoxStake: paused\");\n        _;\n    }\n\n    modifier onlyManager() {\n        require(\n            hasRole(MANAGER_ROLE, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"BurgerBoxStake: not manager\"\n        );\n        _;\n    }\n\n    constructor(address _burgerBoxContract, address admin) {\n        require(_burgerBoxContract != address(0), \"BurgerBoxStake: zero address\");\n        burgerBoxContract = IERC1155(_burgerBoxContract);\n\n        // grant roles\n        _grantRole(DEFAULT_ADMIN_ROLE, admin == address(0) ? msg.sender : admin);\n        _grantRole(MANAGER_ROLE, admin == address(0) ? msg.sender : admin);\n        _grantRole(PAUSER_ROLE, admin == address(0) ? msg.sender : admin);\n    }\n\n    // --- Staking functions ---\n\n    function stake(uint256 id, uint256 amount) external nonReentrant whenNotPaused {\n        require(amount > 0, \"BurgerBoxStake: amount zero\");\n\n        burgerBoxContract.safeTransferFrom(msg.sender, address(this), id, amount, \"\");\n        _balances[msg.sender][id] += amount;\n\n        emit Staked(msg.sender, id, amount);\n    }\n\n    function stakeBatch(uint256[] calldata ids, uint256[] calldata amounts) external nonReentrant whenNotPaused {\n        require(ids.length == amounts.length, \"BurgerBoxStake: ids/amounts mismatch\");\n        require(ids.length > 0, \"BurgerBoxStake: empty arrays\");\n\n        burgerBoxContract.safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            require(amounts[i] > 0, \"BurgerBoxStake: amount zero in batch\");\n            _balances[msg.sender][ids[i]] += amounts[i];\n        }\n\n        emit StakedBatch(msg.sender, ids, amounts);\n    }\n\n    function unstake(uint256 id, uint256 amount) external nonReentrant {\n        require(amount > 0, \"BurgerBoxStake: amount zero\");\n        uint256 userBal = _balances[msg.sender][id];\n        require(userBal >= amount, \"BurgerBoxStake: insufficient staked balance\");\n\n        _balances[msg.sender][id] = userBal - amount;\n        burgerBoxContract.safeTransferFrom(address(this), msg.sender, id, amount, \"\");\n\n        emit Unstaked(msg.sender, id, amount);\n    }\n\n    function unstakeBatch(uint256[] calldata ids, uint256[] calldata amounts) external nonReentrant {\n        require(ids.length == amounts.length, \"BurgerBoxStake: ids/amounts mismatch\");\n        require(ids.length > 0, \"BurgerBoxStake: empty arrays\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 userBal = _balances[msg.sender][ids[i]];\n            require(userBal >= amounts[i], \"BurgerBoxStake: insufficient staked balance in batch\");\n            _balances[msg.sender][ids[i]] = userBal - amounts[i];\n        }\n\n        burgerBoxContract.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \"\");\n\n        emit UnstakedBatch(msg.sender, ids, amounts);\n    }\n\n    // --- View helpers ---\n\n    function stakedBalanceOf(address account, uint256 id) external view returns (uint256) {\n        return _balances[account][id];\n    }\n\n    function stakedBalancesOf(address account, uint256[] calldata ids) external view returns (uint256[] memory) {\n        uint256[] memory out = new uint256[](ids.length);\n        for (uint256 i = 0; i < ids.length; i++) {\n            out[i] = _balances[account][ids[i]];\n        }\n        return out;\n    }\n\n    // --- Admin controls ---\n\n    function pause() external {\n        require(\n            hasRole(PAUSER_ROLE, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"BurgerBoxStake: not pauser\"\n        );\n        paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() external {\n        require(\n            hasRole(PAUSER_ROLE, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"BurgerBoxStake: not pauser\"\n        );\n        paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    function emergencyWithdrawERC1155(\n        address token,\n        address to,\n        uint256 id,\n        uint256 amount\n    ) external onlyManager nonReentrant {\n        require(to != address(0), \"BurgerBoxStake: zero address\");\n        IERC1155(token).safeTransferFrom(address(this), to, id, amount, \"\");\n        emit EmergencyWithdraw(msg.sender, to, id, amount);\n    }\n\n    function recoverERC20(address token, address to) external onlyManager nonReentrant {\n        require(to != address(0), \"BurgerBoxStake: zero address\");\n        uint256 bal = IERC20(token).balanceOf(address(this));\n        require(bal > 0, \"BurgerBoxStake: no erc20 balance\");\n        IERC20(token).transfer(to, bal);\n        emit RecoveredERC20(token, bal, to);\n    }\n\n    function recoverERC1155(address token, uint256 id, address to) external onlyManager nonReentrant {\n        require(to != address(0), \"BurgerBoxStake: zero address\");\n        uint256 bal = IERC1155(token).balanceOf(address(this), id);\n        require(bal > 0, \"BurgerBoxStake: no erc1155 balance\");\n        IERC1155(token).safeTransferFrom(address(this), to, id, bal, \"\");\n        emit RecoveredERC1155(token, id, bal, to);\n    }\n\n    // --- ERC1155Holder overrides with emit event ---\n    function supportsInterface(bytes4 interfaceId) public view override(AccessControl, ERC1155Holder) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) public virtual override(ERC1155Holder) returns (bytes4) {\n        emit ERC1155Received(operator, from, id, value, data);\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual override(ERC1155Holder) returns (bytes4) {\n        emit ERC1155BatchReceived(operator, from, ids, values, data);\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    // --- Fallbacks ---\n\n    receive() external payable {}\n    fallback() external payable {}\n}\n"
    },
    "contracts/BurgerToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\n/// @title BurgerToken - Experience Points Token\n/// @notice ERC20 token untuk reward system dalam BurgerBox ecosystem\n/// @dev Supports minting/burning dengan role-based access control\ncontract BurgerToken is ERC20, AccessControl, Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /// @notice Maximum supply untuk prevent infinite inflation\n    uint256 public constant MAX_SUPPLY = 1_000_000_000 * 10 ** 18; // 1B XP tokens\n\n    /// @notice Total XP yang sudah di-burn (untuk tracking purposes)\n    uint256 public totalBurned;\n\n    /// @notice Mapping untuk track XP earned per address\n    mapping(address => uint256) public totalEarned;\n\n    /// @notice Mapping untuk track XP burned per address\n    mapping(address => uint256) public totalBurnedByUser;\n\n    event XPMinted(address indexed to, uint256 amount, string reason);\n    event XPBurned(address indexed from, uint256 amount, string reason);\n    event MaxSupplyUpdated(uint256 oldSupply, uint256 newSupply);\n\n    constructor(string memory name, string memory symbol, address admin) ERC20(name, symbol) {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        _grantRole(MINTER_ROLE, admin);\n        _grantRole(BURNER_ROLE, admin);\n        _grantRole(PAUSER_ROLE, admin);\n    }\n\n    /// @notice Mint XP tokens to specified address\n    /// @param to Address to mint tokens to\n    /// @param amount Amount to mint\n    /// @param reason Reason for minting (for tracking)\n    function mint(address to, uint256 amount, string calldata reason) external onlyRole(MINTER_ROLE) whenNotPaused {\n        require(to != address(0), \"Cannot mint to zero address\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(totalSupply() + amount <= MAX_SUPPLY, \"Would exceed max supply\");\n\n        totalEarned[to] += amount;\n        _mint(to, amount);\n\n        emit XPMinted(to, amount, reason);\n    }\n\n    /// @notice Burn XP tokens from specified address\n    /// @param from Address to burn tokens from\n    /// @param amount Amount to burn\n    /// @param reason Reason for burning (for tracking)\n    function burn(address from, uint256 amount, string calldata reason) external onlyRole(BURNER_ROLE) whenNotPaused {\n        require(from != address(0), \"Cannot burn from zero address\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(from) >= amount, \"Insufficient balance\");\n\n        totalBurned += amount;\n        totalBurnedByUser[from] += amount;\n        _burn(from, amount);\n\n        emit XPBurned(from, amount, reason);\n    }\n\n    /// @notice Burn own tokens (user-initiated)\n    /// @param amount Amount to burn\n    function burnSelf(uint256 amount) external whenNotPaused {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(msg.sender) >= amount, \"Insufficient balance\");\n\n        totalBurned += amount;\n        totalBurnedByUser[msg.sender] += amount;\n        _burn(msg.sender, amount);\n\n        emit XPBurned(msg.sender, amount, \"Self burn\");\n    }\n\n    /// @notice Get circulating supply (total supply - burned)\n    function circulatingSupply() external view returns (uint256) {\n        return totalSupply();\n    }\n\n    /// @notice Get net XP for an address (earned - burned)\n    function getNetXP(address user) external view returns (uint256) {\n        uint256 earned = totalEarned[user];\n        uint256 burned = totalBurnedByUser[user];\n        return earned > burned ? earned - burned : 0;\n    }\n\n    /// @notice Get user XP statistics\n    function getUserStats(\n        address user\n    )\n        external\n        view\n        returns (uint256 currentBalance, uint256 totalEarnedAmount, uint256 totalBurnedAmount, uint256 netXP)\n    {\n        currentBalance = balanceOf(user);\n        totalEarnedAmount = totalEarned[user];\n        totalBurnedAmount = totalBurnedByUser[user];\n        netXP = totalEarnedAmount > totalBurnedAmount ? totalEarnedAmount - totalBurnedAmount : 0;\n    }\n\n    // --- Admin Functions ---\n\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Emergency function untuk admin burn (jika diperlukan)\n    function emergencyBurn(address from, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) whenPaused {\n        require(balanceOf(from) >= amount, \"Insufficient balance\");\n\n        totalBurned += amount;\n        totalBurnedByUser[from] += amount;\n        _burn(from, amount);\n\n        emit XPBurned(from, amount, \"Emergency burn\");\n    }\n\n    // --- Overrides ---\n\n    function _update(address from, address to, uint256 value) internal override whenNotPaused {\n        super._update(from, to, value);\n    }\n\n    /// @notice Override transfer untuk add additional validations jika diperlukan\n    function transfer(address to, uint256 amount) public override returns (bool) {\n        return super.transfer(to, amount);\n    }\n\n    /// @notice Override transferFrom untuk add additional validations jika diperlukan\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n        return super.transferFrom(from, to, amount);\n    }\n}\n"
    },
    "contracts/CaveatEnforcer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title BasicCaveatEnforcer\n * @dev Basic implementation of ICaveatEnforcer for delegation restrictions\n * This is a simplified version - in production you'd use the official MetaMask caveat enforcers\n */\ncontract BasicCaveatEnforcer is Ownable {\n    struct SpendingLimit {\n        address token;\n        uint256 maxAmount;\n        uint256 spentAmount;\n        uint256 validUntil;\n    }\n\n    mapping(bytes32 => SpendingLimit) public spendingLimits;\n    mapping(bytes32 => bool) public allowedTargets;\n    mapping(bytes32 => uint256) public validUntil;\n\n    event SpendingLimitSet(bytes32 indexed delegationHash, address token, uint256 maxAmount, uint256 validUntil);\n    event TargetAllowed(bytes32 indexed delegationHash, address target);\n    event TimeLimitSet(bytes32 indexed delegationHash, uint256 validUntil);\n\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    /**\n     * @dev Enforces conditions before execution\n     */\n    function beforeHook(\n        bytes calldata terms,\n        bytes calldata /* args */,\n        uint256 /* mode */,\n        bytes calldata executionCalldata,\n        bytes32 delegationHash\n    ) external view {\n        // Decode terms based on caveat type\n        (string memory caveatType, bytes memory caveatData) = abi.decode(terms, (string, bytes));\n\n        if (keccak256(bytes(caveatType)) == keccak256(bytes(\"spendingLimit\"))) {\n            _enforceSpendingLimit(caveatData, delegationHash);\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\"allowedTargets\"))) {\n            _enforceAllowedTargets(caveatData, delegationHash, executionCalldata);\n        } else if (keccak256(bytes(caveatType)) == keccak256(bytes(\"timeLimit\"))) {\n            _enforceTimeLimit(caveatData, delegationHash);\n        }\n    }\n\n    /**\n     * @dev Enforces conditions after execution\n     */\n    function afterHook(\n        bytes calldata terms,\n        bytes calldata /* args */,\n        uint256 /* mode */,\n        bytes calldata executionCalldata,\n        bytes32 delegationHash\n    ) external {\n        // Update spent amounts for spending limit caveats\n        (string memory caveatType, bytes memory caveatData) = abi.decode(terms, (string, bytes));\n\n        if (keccak256(bytes(caveatType)) == keccak256(bytes(\"spendingLimit\"))) {\n            _updateSpendingAmount(caveatData, delegationHash, executionCalldata);\n        }\n    }\n\n    /**\n     * @dev Sets spending limit for a delegation\n     */\n    function setSpendingLimit(\n        bytes32 delegationHash,\n        address token,\n        uint256 maxAmount,\n        uint256 validUntilTime\n    ) external onlyOwner {\n        spendingLimits[delegationHash] = SpendingLimit({\n            token: token,\n            maxAmount: maxAmount,\n            spentAmount: 0,\n            validUntil: validUntilTime\n        });\n\n        emit SpendingLimitSet(delegationHash, token, maxAmount, validUntilTime);\n    }\n\n    /**\n     * @dev Sets allowed target for a delegation\n     */\n    function setAllowedTarget(bytes32 delegationHash, address target) external onlyOwner {\n        allowedTargets[keccak256(abi.encodePacked(delegationHash, target))] = true;\n        emit TargetAllowed(delegationHash, target);\n    }\n\n    /**\n     * @dev Sets time limit for a delegation\n     */\n    function setTimeLimit(bytes32 delegationHash, uint256 validUntilTime) external onlyOwner {\n        validUntil[delegationHash] = validUntilTime;\n        emit TimeLimitSet(delegationHash, validUntilTime);\n    }\n\n    /**\n     * @dev Enforces spending limit\n     */\n    function _enforceSpendingLimit(bytes memory caveatData, bytes32 delegationHash) internal view {\n        (address token, uint256 amount) = abi.decode(caveatData, (address, uint256));\n\n        SpendingLimit memory limit = spendingLimits[delegationHash];\n        require(limit.token == token, \"Token mismatch\");\n        require(limit.validUntil > block.timestamp, \"Spending limit expired\");\n        require(limit.spentAmount + amount <= limit.maxAmount, \"Spending limit exceeded\");\n    }\n\n    /**\n     * @dev Enforces allowed targets\n     */\n    function _enforceAllowedTargets(\n        bytes memory caveatData,\n        bytes32 /* delegationHash */,\n        bytes calldata executionCalldata\n    ) internal pure {\n        address[] memory targets = abi.decode(caveatData, (address[]));\n\n        // Extract target from execution calldata (first 20 bytes)\n        require(executionCalldata.length >= 20, \"Invalid calldata length\");\n        address target;\n        assembly {\n            target := shr(96, calldataload(executionCalldata.offset))\n        }\n\n        bool isAllowed = false;\n        for (uint256 i = 0; i < targets.length; i++) {\n            if (targets[i] == target) {\n                isAllowed = true;\n                break;\n            }\n        }\n        require(isAllowed, \"Target not allowed\");\n    }\n\n    /**\n     * @dev Enforces time limit\n     */\n    function _enforceTimeLimit(bytes memory caveatData, bytes32 /* delegationHash */) internal view {\n        uint256 validUntilTime = abi.decode(caveatData, (uint256));\n        require(block.timestamp <= validUntilTime, \"Delegation expired\");\n    }\n\n    /**\n     * @dev Updates spent amount after execution\n     */\n    function _updateSpendingAmount(\n        bytes memory caveatData,\n        bytes32 delegationHash,\n        bytes calldata /* executionCalldata */\n    ) internal {\n        (, uint256 amount) = abi.decode(caveatData, (address, uint256));\n\n        SpendingLimit storage limit = spendingLimits[delegationHash];\n        limit.spentAmount += amount;\n    }\n}\n\n// Interface that should match ICaveatEnforcer from MetaMask Delegation Toolkit\ninterface ICaveatEnforcer {\n    function beforeHook(\n        bytes calldata terms,\n        bytes calldata args,\n        uint256 mode,\n        bytes calldata executionCalldata,\n        bytes32 delegationHash\n    ) external view;\n\n    function afterHook(\n        bytes calldata terms,\n        bytes calldata args,\n        uint256 mode,\n        bytes calldata executionCalldata,\n        bytes32 delegationHash\n    ) external;\n}\n"
    },
    "contracts/ChogNFTPass.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract ChogNFTPass is ERC721, Ownable {\n    using Strings for uint256;\n\n    string public baseURI;\n    uint256 private nextPassId = 1;\n    bool public isPublicMintEnabled = false;\n\n    // Token URI mapping (replacement for ERC721URIStorage)\n    mapping(uint256 => string) private _tokenURIs;\n\n    mapping(address => bool) public whitelist;\n\n    uint256 public wlMintPrice = 1 ether;\n    uint256 public publicMintPrice = 2 ether;\n    address public paymentGateway;\n\n    constructor(\n        string memory _baseURIParam,\n        address _paymentGateway\n    ) ERC721(\"ChogNFTPass\", \"CHOG\") Ownable(msg.sender) {\n        setBaseURI(_baseURIParam);\n        paymentGateway = _paymentGateway;\n    }\n\n    // Token URI functions (replacement for ERC721URIStorage)\n    function _setTokenURI(uint256 tokenId, string memory _uri) internal virtual {\n        _requireOwned(tokenId);\n        _tokenURIs[tokenId] = _uri;\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        if (bytes(_tokenURI).length > 0) {\n            return _tokenURI;\n        }\n\n        // Fallback to baseURI + tokenId\n        string memory baseURIParam = _baseURI();\n        return\n            bytes(baseURIParam).length > 0 ? string(abi.encodePacked(baseURIParam, tokenId.toString(), \".json\")) : \"\";\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n\n    function mintPass(address to) external payable {\n        if (whitelist[msg.sender]) {\n            require(msg.value == wlMintPrice, \"Incorrect whitelist mint price\");\n        } else if (isPublicMintEnabled) {\n            require(msg.value == publicMintPrice, \"Incorrect public mint price\");\n        } else {\n            revert(\"Minting is not enabled for you\");\n        }\n\n        // Call the PaymentGateway to process the payment\n        (bool success, ) = address(paymentGateway).call{ value: msg.value }(\n            abi.encodeWithSignature(\"processPayment()\")\n        );\n        require(success, \"Payment to PaymentGateway failed\");\n\n        uint256 passId = nextPassId;\n        ++nextPassId;\n        _mint(to, passId);\n        _setTokenURI(passId, string(abi.encodePacked(baseURI, passId.toString(), \".json\")));\n    }\n\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n    }\n\n    function enablePublicMint() external onlyOwner {\n        isPublicMintEnabled = true;\n    }\n\n    function disablePublicMint() external onlyOwner {\n        isPublicMintEnabled = false;\n    }\n\n    function whitelistAddress(address _address) external onlyOwner {\n        whitelist[_address] = true;\n    }\n\n    function removeAddressFromWhitelist(address _address) external onlyOwner {\n        whitelist[_address] = false;\n    }\n\n    function setWlMintPrice(uint256 _newPrice) external onlyOwner {\n        wlMintPrice = _newPrice;\n    }\n\n    function setPublicMintPrice(uint256 _newPrice) external onlyOwner {\n        publicMintPrice = _newPrice;\n    }\n}\n"
    },
    "contracts/ERC6551Account.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./lib/ERC6551BytecodeLib.sol\";\nimport \"./interfaces/IERC6551Account.sol\";\n\n/// @title ERC-6551 Smart Account (TBA) for NFT-based ownership & Alchemy AA compatible\ncontract ERC6551Account is IERC165, IERC1271, IERC6551Account, IERC721Receiver, ReentrancyGuard {\n    uint256 private _nonce;\n\n    event Withdraw(address indexed owner, uint256 amount);\n    event NFTReceived(address indexed operator, address indexed from, uint256 indexed tokenId, bytes data);\n\n    /// @notice Executes a call on behalf of the account\n    /// @param to Target contract address\n    /// @param value ETH to send\n    /// @param data Call data\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external payable returns (bytes memory result) {\n        require(msg.sender == owner(), \"Not token owner\");\n\n        bool success;\n        (success, result) = to.call{ value: value }(data);\n\n        if (!success) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n\n        _nonce++;\n    }\n\n    /// @notice Returns the token that owns this account\n    function token() public view returns (uint256 chainId, address tokenContract, uint256 tokenId) {\n        uint256 size = address(this).code.length;\n        return abi.decode(Bytecode.codeAt(address(this), size - 0x60, size), (uint256, address, uint256));\n    }\n\n    /// @notice Returns the owner (current holder of NFT)\n    function owner() public view returns (address) {\n        (uint256 chainId, address tokenContract, uint256 tokenId) = token();\n        if (chainId != block.chainid) return address(0);\n\n        return IERC721(tokenContract).ownerOf(tokenId);\n    }\n\n    /// @notice View nonce for replay protection\n    function nonce() external view returns (uint256) {\n        return _nonce;\n    }\n\n    /// @notice EIP-1271 signature validator for contract wallets\n    function isValidSignature(\n        bytes32 hash,\n        bytes memory signature\n    ) external view override(IERC1271, IERC6551Account) returns (bytes4 magicValue) {\n        bool valid = SignatureChecker.isValidSignatureNow(owner(), hash, signature);\n        return valid ? IERC1271.isValidSignature.selector : bytes4(0);\n    }\n\n    /// @notice Handle the receipt of an NFT\n    /// @param operator The address which called `safeTransferFrom`\n    /// @param from The address which previously owned the token\n    /// @param tokenId The NFT identifier which is being transferred\n    /// @param data Additional data with no specified format\n    /// @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        emit NFTReceived(operator, from, tokenId, data);\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /// @notice Support introspection for interfaces\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n        return\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IERC1271).interfaceId ||\n            interfaceId == type(IERC6551Account).interfaceId ||\n            interfaceId == type(IERC721Receiver).interfaceId;\n    }\n\n    /// @notice Withdraw native tokens (e.g. MON/ETH) from this TBA to NFT holder EOA\n    /// @dev Only NFT owner can call\n    function withdraw(uint256 amount) external nonReentrant {\n        address _owner = owner();\n        require(msg.sender == _owner, \"Not token owner\");\n        require(address(this).balance >= amount, \"Insufficient balance\");\n\n        (bool sent, ) = _owner.call{ value: amount }(\"\");\n        require(sent, \"Withdraw failed\");\n\n        emit Withdraw(_owner, amount);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/ERC6551AccountProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract ERC6551AccountProxy {\n    // Gunakan slot standar EIP-1967 untuk implementasi proxy\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    constructor(address implementation, bytes memory initData) payable {\n        require(implementation != address(0), \"Zero implementation\");\n\n        // Simpan alamat implementasi di storage slot\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            sstore(slot, implementation)\n        }\n\n        // delegatecall ke implementasi\n        if (initData.length > 0) {\n            (bool success, ) = implementation.delegatecall(initData);\n            require(success, \"Initialization failed\");\n        }\n    }\n\n    fallback() external payable {\n        bytes32 slot = IMPLEMENTATION_SLOT;\n        assembly {\n            let impl := sload(slot)\n            calldatacopy(0, 0, calldatasize())\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            switch result\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    receive() external payable {}\n}\n\n\n"
    },
    "contracts/ERC6551Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"./ERC6551AccountProxy.sol\";\n\ncontract ERC6551Registry {\n    error InitializationFailed();\n\n    event AccountCreated(address indexed account, address indexed implementation, uint256 chainId, address tokenContract, uint256 tokenId, uint256 salt);\n\n    // Track created accounts to avoid duplicates\n    mapping(address => bool) public createdAccounts;\n    mapping(bytes32 => bool) public usedCombinations;\n\n    function createAccount(\n        address implementation,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        uint256 salt,\n        bytes calldata initData\n    ) external returns (address) {\n        bytes memory proxyCode = abi.encodePacked(\n            type(ERC6551AccountProxy).creationCode,\n            abi.encode(implementation, initData)\n        );\n\n        bytes32 combinationHash = keccak256(abi.encode(implementation, chainId, tokenContract, tokenId, salt));\n        require(!usedCombinations[combinationHash], \"Combination already used\");\n\n        address computed = Create2.computeAddress(bytes32(salt), keccak256(proxyCode));\n        require(!createdAccounts[computed], \"Account already exists\");\n\n        address deployed = Create2.deploy(0, bytes32(salt), proxyCode);\n\n        usedCombinations[combinationHash] = true;\n        createdAccounts[deployed] = true;\n\n        emit AccountCreated(deployed, implementation, chainId, tokenContract, tokenId, salt);\n\n        return deployed;\n    }\n\n    function account(\n        address implementation,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        uint256 salt\n    ) external view returns (address) {\n        bytes memory initData = abi.encode(chainId, tokenContract, tokenId);\n        bytes memory proxyCode = abi.encodePacked(\n            type(ERC6551AccountProxy).creationCode,\n            abi.encode(implementation, initData)\n        );\n\n        return Create2.computeAddress(bytes32(salt), keccak256(proxyCode));\n    }\n}\n"
    },
    "contracts/FaucetMon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract FaucetMon {\n    address public owner;\n    address public allowedCaller;\n\n    event BalanceFunded(address indexed funder, uint256 amount);\n    event BalanceWithdrawn(address indexed owner, uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the contract owner\");\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function setAllowedCaller(address _caller) external onlyOwner {\n        allowedCaller = _caller;\n    }\n\n    function faucet(address to, uint256 amount) external {\n        require(msg.sender == allowedCaller, \"Caller not set\");\n        require(address(this).balance >= amount, \"Not enough balance\");\n        payable(to).transfer(amount);\n    }\n\n    // Function to fund the faucet balance\n    function fundFaucet() external payable {\n        require(msg.value > 0, \"Must send native token to fund the faucet\");\n        emit BalanceFunded(msg.sender, msg.value);\n    }\n\n    // Function to withdraw the faucet balance (only owner)\n    function withdrawBalance(uint256 amount) external onlyOwner {\n        require(address(this).balance >= amount, \"Insufficient balance in the faucet\");\n        payable(owner).transfer(amount);\n        emit BalanceWithdrawn(owner, amount);\n    }\n\n    // Allow the contract to receive Ether\n    receive() external payable {}\n}\n"
    },
    "contracts/FoodNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FoodNFT is ERC721URIStorage, Ownable {\n    uint256 private _tokenIds;\n\n    mapping(address => uint256[]) public mynfts;\n    mapping(address => uint256[]) public myFoods;\n    mapping(address => bool) public minted;\n\n    address public paymentGateway;\n    address public gameContract;\n    uint256 public mintPrice = 1 ether;\n\n    event MintPriceUpdated(uint256 oldPrice, uint256 newPrice);\n    event FoodBurned(uint256 indexed tokenId, address indexed owner, address indexed burner, uint256 timestamp);\n\n    constructor(address _paymentGateway) ERC721(\"Food Scramble NFT\", \"FSN\") Ownable(msg.sender) {\n        paymentGateway = _paymentGateway;\n    }\n\n    function mintChef(address _to, string memory _tokenURI_) public payable returns (uint256) {\n        require(msg.value == mintPrice, \"Mint price not met\");\n\n        // process the payment\n        (bool success, ) = address(paymentGateway).call{ value: msg.value }(\n            abi.encodeWithSignature(\"processPayment()\")\n        );\n        require(success, \"Payment to PaymentGateway failed\");\n\n        uint256 newItemId = _tokenIds;\n        _mint(_to, newItemId);\n        _setTokenURI(newItemId, _tokenURI_);\n\n        _tokenIds++;\n        mynfts[_to].push(newItemId);\n        minted[_to] = true;\n        return newItemId;\n    }\n\n    function chefMinted(address user) external view returns (bool) {\n        return minted[user];\n    }\n\n    function mintFood(address _to, string memory _tokenURI_) public returns (uint256) {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        uint256 newItemId = _tokenIds;\n        _mint(_to, newItemId);\n        _setTokenURI(newItemId, _tokenURI_);\n\n        _tokenIds++;\n        myFoods[_to].push(newItemId);\n        return newItemId;\n    }\n\n    function burnFood(uint256 tokenId) external {\n        require(\n            ownerOf(tokenId) == msg.sender ||\n                getApproved(tokenId) == msg.sender ||\n                isApprovedForAll(ownerOf(tokenId), msg.sender),\n            \"Not owner nor approved\"\n        );\n\n        address owner = ownerOf(tokenId);\n\n        emit FoodBurned(tokenId, owner, msg.sender, block.timestamp);\n\n        _burn(tokenId);\n\n        uint256[] storage foods = myFoods[owner];\n        for (uint256 i = 0; i < foods.length; i++) {\n            if (foods[i] == tokenId) {\n                foods[i] = foods[foods.length - 1];\n                foods.pop();\n                break;\n            }\n        }\n    }\n\n    function burnFoodBatch(address _owner, uint256[] calldata tokenIds) external {\n        require(tokenIds.length > 0, \"No tokenIds provided\");\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n\n            require(\n                ownerOf(tokenId) == msg.sender ||\n                    getApproved(tokenId) == msg.sender ||\n                    isApprovedForAll(ownerOf(tokenId), msg.sender),\n                \"Not owner nor approved\"\n            );\n\n            require(ownerOf(tokenId) == _owner, \"Not token owner\");\n\n            emit FoodBurned(tokenId, _owner, msg.sender, block.timestamp);\n\n            _burn(tokenId);\n\n            uint256[] storage foods = myFoods[_owner];\n            for (uint256 j = 0; j < foods.length; j++) {\n                if (foods[j] == tokenId) {\n                    foods[j] = foods[foods.length - 1];\n                    foods.pop();\n                    break;\n                }\n            }\n        }\n    }\n\n    function getMyNFTs(address _owner) public view returns (uint256[] memory) {\n        return mynfts[_owner];\n    }\n\n    function getMyFoods(address _owner) public view returns (uint256[] memory) {\n        return myFoods[_owner];\n    }\n\n    function setMintPrice(uint256 _newPrice) external onlyOwner {\n        uint256 oldPrice = mintPrice;\n        mintPrice = _newPrice;\n        emit MintPriceUpdated(oldPrice, _newPrice);\n    }\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n}\n"
    },
    "contracts/FoodScramble.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\nimport \"./ERC6551Registry.sol\";\nimport \"./BreadToken.sol\";\nimport \"./MeatToken.sol\";\nimport \"./LettuceToken.sol\";\nimport \"./TomatoToken.sol\";\nimport \"./FoodNFT.sol\";\nimport \"./FaucetMon.sol\";\nimport \"./interfaces/IPaymentGateway.sol\";\n\ncontract FoodScramble {\n    ERC6551Registry public registry;\n    BreadToken public bread;\n    MeatToken public meat;\n    LettuceToken public lettuce;\n    TomatoToken public tomato;\n    FoodNFT public hamburger;\n    FaucetMon public faucetMon;\n    IPaymentGateway public paymentGateway;\n\n    address public immutable owner;\n\n    Box[] public grid;\n    mapping(address => address) public tbaList;\n    mapping(address => uint256) public player;\n    mapping(address => bool) public canBuy;\n    mapping(address => uint256) public rollCount;\n    mapping(address => uint256) public faucetUsageCount;\n    mapping(address => uint256) public lastFaucetUsage;\n    mapping(address => uint256) public lastMintedSpecialBox;\n    mapping(address => PlayerStats) public stats;\n    mapping(address => mapping(IngredientType => uint256)) public inventory;\n    mapping(address => string) public usernames;\n    mapping(string => address) public nameToAddress;\n    mapping(address => uint256[]) public travelHistory;\n    mapping(address => bool) public isPlayerCreated;\n\n    struct Box {\n        uint256 id;\n        string typeGrid;\n        uint256 ingredientType;\n        uint256 numberOfPlayers;\n    }\n\n    struct PlayerStats {\n        uint256 totalRolls;\n        uint256 ingredientsCollected;\n        uint256 foodsMinted;\n        uint256 lastActive;\n        bool hasSpecialAccess;\n    }\n\n    enum IngredientType {\n        Bread,\n        Meat,\n        Lettuce,\n        Tomato\n    }\n\n    event PlayerMoved(address indexed player, uint256 newPosition);\n    event PlayerCreated(address indexed tba, uint256 gridIndex);\n    event TokenBoundAccountCreated(address indexed eoa, address indexed tba, uint256 startPosition);\n    event IngredientPurchased(address indexed player, uint256 ingredientType, uint256 fee);\n    event IngredientFeeUpdated(uint256 oldFee, uint256 newFee);\n    event FaucetAmountUpdated(uint256 oldAmount, uint256 newAmount);\n    event FaucetCooldownUpdated(uint256 oldCooldown, uint256 newCooldown);\n\n    uint256 public faucetAmount;\n    uint256 public faucetCooldown;\n    uint256 public ingredientFee;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    constructor(\n        address _owner,\n        address _registryAddress,\n        address _breadAddress,\n        address _meatAddress,\n        address _lettuceAddress,\n        address _tomatoAddress,\n        address _hamburgerAddress,\n        address payable _faucetMonAddress,\n        address payable _paymentGatewayAddress\n    ) {\n        owner = _owner;\n        registry = ERC6551Registry(_registryAddress);\n        bread = BreadToken(_breadAddress);\n        meat = MeatToken(_meatAddress);\n        lettuce = LettuceToken(_lettuceAddress);\n        tomato = TomatoToken(_tomatoAddress);\n        hamburger = FoodNFT(_hamburgerAddress);\n        faucetMon = FaucetMon(payable(_faucetMonAddress));\n        paymentGateway = IPaymentGateway(payable(_paymentGatewayAddress));\n\n        string[] memory gridTypes = new string[](20);\n        uint256[] memory ingredientTypes = new uint256[](20);\n\n        gridTypes[0] = \"Stove\";\n        ingredientTypes[0] = 99;\n\n        for (uint256 id = 1; id < 5; id++) {\n            gridTypes[id] = \"Bread\";\n            ingredientTypes[id] = 0;\n        }\n\n        gridTypes[5] = \"Rail\";\n        ingredientTypes[5] = 98;\n\n        for (uint256 id = 6; id < 10; id++) {\n            gridTypes[id] = \"Meat\";\n            ingredientTypes[id] = 1;\n        }\n\n        gridTypes[10] = \"Stove\";\n        ingredientTypes[10] = 99;\n\n        for (uint256 id = 11; id < 15; id++) {\n            gridTypes[id] = \"Lettuce\";\n            ingredientTypes[id] = 2;\n        }\n\n        gridTypes[15] = \"Rail\";\n        ingredientTypes[15] = 98;\n\n        for (uint256 id = 16; id < 20; id++) {\n            gridTypes[id] = \"Tomato\";\n            ingredientTypes[id] = 3;\n        }\n\n        for (uint256 i = 0; i < 20; i++) {\n            grid.push(Box(i, gridTypes[i], ingredientTypes[i], 0));\n        }\n    }\n\n    function getGrid() public view returns (Box[] memory) {\n        return grid;\n    }\n\n    function getMyFoods(address _owner) public view returns (uint256[] memory) {\n        address tba = tbaList[_owner];\n        return hamburger.getMyFoods(tba);\n    }\n\n    function createPlayer(address tba) internal {\n        require(!isPlayerCreated[tba], \"Already registered\");\n\n        for (uint256 i = 0; i < grid.length; i++) {\n            if (keccak256(abi.encodePacked(grid[i].typeGrid)) == keccak256(abi.encodePacked(\"Stove\"))) {\n                player[tba] = i;\n                grid[i].numberOfPlayers += 1;\n                isPlayerCreated[tba] = true;\n\n                emit PlayerCreated(tba, i);\n                return;\n            }\n        }\n\n        revert(\"No Stove grid found\");\n    }\n\n    function createTokenBoundAccount(\n        address _implementation,\n        uint256 _chainId,\n        address _tokenContract,\n        uint256 _tokenId,\n        uint256 _salt,\n        bytes calldata _initData\n    ) external {\n        address newTBA = registry.createAccount(_implementation, _chainId, _tokenContract, _tokenId, _salt, _initData);\n        tbaList[msg.sender] = newTBA;\n\n        createPlayer(newTBA);\n        emit TokenBoundAccountCreated(msg.sender, newTBA, player[newTBA]);\n    }\n\n    function movePlayer() external {\n        address tba = tbaList[msg.sender];\n        require(tba != address(0), \"TBA not found\");\n\n        uint256 nonce = rollCount[tba];\n        uint8 roll = getRandomRoll(tba, nonce);\n        rollCount[tba] = nonce + 1;\n\n        uint256 currentPos = player[tba];\n        require(grid[currentPos].numberOfPlayers > 0, \"Invalid player count\");\n        grid[currentPos].numberOfPlayers -= 1;\n\n        uint256 nextPos = currentPos + roll;\n        if (nextPos >= 20) {\n            nextPos = 0;\n            grid[0].numberOfPlayers += 1;\n        } else {\n            grid[nextPos].numberOfPlayers += 1;\n        }\n\n        player[tba] = nextPos;\n\n        if (grid[nextPos].ingredientType <= 3) {\n            canBuy[tba] = true;\n        }\n\n        emit PlayerMoved(tba, nextPos);\n    }\n\n    // Internal RNG function\n    function getRandomRoll(address playerAddr, uint256 nonce) internal view returns (uint8) {\n        bytes32 hash = keccak256(abi.encodePacked(blockhash(block.number - 1), playerAddr, nonce));\n        return uint8(uint256(hash) % 6) + 1; // 1-6\n    }\n\n    // Public function to get random roll for UI\n    function getRandomRollForUI(address playerAddr, uint256 nonce) external view returns (uint8) {\n        return getRandomRoll(playerAddr, nonce);\n    }\n\n    /// @notice Owner bisa set biaya payment amount manual\n    function setFaucetAmount(uint256 _newAmount) external onlyOwner {\n        uint256 oldAmount = faucetAmount;\n        faucetAmount = _newAmount;\n        emit FaucetAmountUpdated(oldAmount, faucetAmount);\n    }\n\n    function setIngredientFee(uint256 _newFee) external onlyOwner {\n        uint256 oldFee = ingredientFee;\n        ingredientFee = _newFee;\n        emit IngredientFeeUpdated(oldFee, ingredientFee);\n    }\n\n    function setFaucetCooldown(uint256 _newCooldown) external onlyOwner {\n        uint256 oldCooldown = faucetCooldown;\n        faucetCooldown = _newCooldown;\n        emit FaucetCooldownUpdated(oldCooldown, faucetCooldown);\n    }\n\n    function getIngredientFee() external view returns (uint256) {\n        return ingredientFee;\n    }\n\n    function getFaucetAmount() external view returns (uint256) {\n        return faucetAmount;\n    }\n\n    function getFaucetCooldown() external view returns (uint256) {\n        return faucetCooldown;\n    }\n\n    /// @notice Baca saldo native token (ETH/MON) milik TBA user\n    function getTbaBalance(address user) external view returns (uint256) {\n        address tba = tbaList[user];\n        require(tba != address(0), \"User has no TBA\");\n        return tba.balance;\n    }\n\n    /// @notice Baca saldo ERC20 milik TBA user\n    function getTbaTokenBalance(address user, address token) external view returns (uint256) {\n        address tba = tbaList[user];\n        require(tba != address(0), \"User has no TBA\");\n        return IERC20(token).balanceOf(tba);\n    }\n\n    function buyIngredient() public payable {\n        address tba = tbaList[msg.sender];\n        require(tba != address(0), \"TBA not found\");\n        require(canBuy[tba], \"already brought ingredient\");\n\n        uint256 currentPosition = player[tba];\n        Box memory currentSpot = grid[currentPosition];\n        require(currentSpot.ingredientType <= 3, \"Not an ingredient grid\");\n\n        if (ingredientFee > 0) {\n            require(msg.value >= ingredientFee, \"Insufficient payment\");\n\n            try paymentGateway.processPayment{ value: ingredientFee }() {\n                // Payment processed successfully\n            } catch {\n                revert(\"Payment processing failed\");\n            }\n        }\n\n        if (currentSpot.ingredientType == 0) bread.mint(tba, 1 * 10 ** 18);\n        else if (currentSpot.ingredientType == 1) meat.mint(tba, 1 * 10 ** 18);\n        else if (currentSpot.ingredientType == 2) lettuce.mint(tba, 1 * 10 ** 18);\n        else if (currentSpot.ingredientType == 3) tomato.mint(tba, 1 * 10 ** 18);\n\n        canBuy[tba] = false;\n\n        // Update stats\n        stats[tba].ingredientsCollected += 1;\n        stats[tba].lastActive = block.timestamp;\n\n        emit IngredientPurchased(tba, currentSpot.ingredientType, ingredientFee);\n    }\n\n    function travelRail() public {\n        address tba = tbaList[msg.sender];\n        Box memory currentSpot = grid[player[tba]];\n        require(currentSpot.ingredientType == 98, \"Go to Rail Grid\");\n\n        grid[player[tba]].numberOfPlayers -= 1;\n\n        if (player[tba] == 5) {\n            player[tba] = 15;\n            grid[15].numberOfPlayers += 1;\n        } else {\n            player[tba] = 5;\n            grid[5].numberOfPlayers += 1;\n        }\n    }\n\n    // Add helper function to check if position allows buying\n    function canBuyAtPosition(uint256 position) public view returns (bool) {\n        if (position >= grid.length) return false;\n        return grid[position].ingredientType <= 3;\n    }\n\n    // Add function to get ingredient type at position\n    function getIngredientTypeAtPosition(uint256 position) public view returns (uint256) {\n        require(position < grid.length, \"Invalid position\");\n        return grid[position].ingredientType;\n    }\n\n    function mintFoodNFT() public {\n        address tba = tbaList[msg.sender];\n        // require(bread.balanceOf[tba] > 0, \"You need more bread\");\n        // require(meat.balanceOf[tba] > 0, \"You need more meat\");\n        // require(lettuce.balanceOf[tba] > 0, \"You need more lettuce\");\n        // require(tomato.balanceOf[tba] > 0, \"You need more tomato\");\n\n        bread.burn(tba, 1 * 10 ** 18);\n        meat.burn(tba, 1 * 10 ** 18);\n        lettuce.burn(tba, 1 * 10 ** 18);\n        tomato.burn(tba, 1 * 10 ** 18);\n\n        hamburger.mintFood(tba, \"hamburger\");\n    }\n\n    function useFaucetMon() public {\n        address tba = tbaList[msg.sender];\n        uint256 playerPosition = player[tba];\n        require(\n            keccak256(abi.encodePacked(grid[playerPosition].typeGrid)) == keccak256(abi.encodePacked(\"Stove\")),\n            \"must on stove to use faucet.\"\n        );\n\n        uint256 currentTime = block.timestamp;\n        require(currentTime >= lastFaucetUsage[msg.sender] + faucetCooldown, \"Faucet already used. Please wait.\");\n\n        lastFaucetUsage[msg.sender] = currentTime;\n\n        // Panggil kontrak FaucetMon untuk kirim ETH\n        faucetMon.faucet(msg.sender, faucetAmount);\n    }\n\n    // menyimpan TBA user\n    function setTBA(address user, address tba) external {\n        // validasi\n        tbaList[user] = tba;\n    }\n\n    function accountReady(address user) public view returns (bool) {\n        return tbaList[user] != address(0);\n    }\n\n    function logTravel(uint256 index) internal {\n        travelHistory[msg.sender].push(index);\n        stats[msg.sender].lastActive = block.timestamp;\n    }\n\n    function setUsername(string calldata name) public {\n        require(bytes(usernames[msg.sender]).length == 0, \"Username already set\");\n        usernames[msg.sender] = name;\n        nameToAddress[name] = msg.sender;\n    }\n\n    function burnOldIngredients() public {\n        address tba = tbaList[msg.sender];\n        bread.burn(tba, 1 ether);\n        meat.burn(tba, 1 ether);\n        lettuce.burn(tba, 1 ether);\n        tomato.burn(tba, 1 ether);\n    }\n\n    function resetPlayerProgress(address playerAddr) public {\n        require(msg.sender == owner, \"Only owner can reset\");\n        delete stats[playerAddr];\n        delete travelHistory[playerAddr];\n\n        // Determine the number of IngredientType values\n        uint256 ingredientCount = uint256(IngredientType.Tomato) + 1;\n\n        for (uint256 i = 0; i < ingredientCount; i++) {\n            inventory[playerAddr][IngredientType(i)] = 0;\n        }\n    }\n\n    // ================== onlyOwner ==================\n    function faucets() public onlyOwner {\n        address tba = tbaList[msg.sender];\n\n        // for testing\n        bread.mint(tba, 1 * 10 ** 18);\n        meat.mint(tba, 1 * 10 ** 18);\n        lettuce.mint(tba, 1 * 10 ** 18);\n        tomato.mint(tba, 1 * 10 ** 18);\n    }\n}\n"
    },
    "contracts/interfaces/IBurgerBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title IBurgerBox Interface\n * @notice Interface untuk BurgerBox contract yang digunakan oleh FasterTx\n * @dev ERC1155-based ticket system untuk mini-games\n */\ninterface IBurgerBox {\n\t/**\n\t * @notice Mint BurgerBox tokens to specified address\n\t * @param to Address to mint tokens to\n\t * @param id Token ID to mint\n\t * @param amount Amount of tokens to mint\n\t * @param data Additional data for minting\n\t */\n\tfunction mint(\n\t\taddress to,\n\t\tuint256 id,\n\t\tuint256 amount,\n\t\tbytes memory data\n\t) external;\n\n\t/**\n\t * @notice Batch mint BurgerBox tokens to specified address\n\t * @param to Address to mint tokens to\n\t * @param ids Array of token IDs to mint\n\t * @param amounts Array of amounts to mint for each token ID\n\t * @param data Additional data for minting\n\t */\n\tfunction mintBatch(\n\t\taddress to,\n\t\tuint256[] memory ids,\n\t\tuint256[] memory amounts,\n\t\tbytes memory data\n\t) external;\n\n\t/**\n\t * @notice Burn BurgerBox tokens from specified address\n\t * @param from Address to burn tokens from\n\t * @param id Token ID to burn\n\t * @param amount Amount of tokens to burn\n\t */\n\tfunction burn(address from, uint256 id, uint256 amount) external;\n\n\t/**\n\t * @notice Batch burn BurgerBox tokens from specified address\n\t * @param from Address to burn tokens from\n\t * @param ids Array of token IDs to burn\n\t * @param amounts Array of amounts to burn for each token ID\n\t */\n\tfunction burnBatch(\n\t\taddress from,\n\t\tuint256[] memory ids,\n\t\tuint256[] memory amounts\n\t) external;\n\n\t/**\n\t * @notice Get balance of specific token ID for an address\n\t * @param account Address to check balance for\n\t * @param id Token ID to check\n\t * @return Balance of the token ID for the address\n\t */\n\tfunction balanceOf(\n\t\taddress account,\n\t\tuint256 id\n\t) external view returns (uint256);\n\n\t/**\n\t * @notice Get balances of multiple token IDs for multiple addresses\n\t * @param accounts Array of addresses to check\n\t * @param ids Array of token IDs to check\n\t * @return Array of balances corresponding to each account-id pair\n\t */\n\tfunction balanceOfBatch(\n\t\taddress[] calldata accounts,\n\t\tuint256[] calldata ids\n\t) external view returns (uint256[] memory);\n\n\t/**\n\t * @notice Check if a ticket ID is active\n\t * @param id Token ID to check\n\t * @return True if ticket ID is active, false otherwise\n\t */\n\tfunction activeTicketId(uint256 id) external view returns (bool);\n\n\t/**\n\t * @notice Set approval for all tokens\n\t * @param operator Address to set approval for\n\t * @param approved True to approve, false to revoke\n\t */\n\tfunction setApprovalForAll(address operator, bool approved) external;\n\n\t/**\n\t * @notice Check if operator is approved for all tokens of owner\n\t * @param account Owner address\n\t * @param operator Operator address\n\t * @return True if operator is approved, false otherwise\n\t */\n\tfunction isApprovedForAll(\n\t\taddress account,\n\t\taddress operator\n\t) external view returns (bool);\n\n\t/**\n\t * @notice Safe transfer from one address to another\n\t * @param from From address\n\t * @param to To address\n\t * @param id Token ID\n\t * @param amount Amount to transfer\n\t * @param data Additional data\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 id,\n\t\tuint256 amount,\n\t\tbytes calldata data\n\t) external;\n\n\t/**\n\t * @notice Safe batch transfer from one address to another\n\t * @param from From address\n\t * @param to To address\n\t * @param ids Array of token IDs\n\t * @param amounts Array of amounts to transfer\n\t * @param data Additional data\n\t */\n\tfunction safeBatchTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256[] calldata ids,\n\t\tuint256[] calldata amounts,\n\t\tbytes calldata data\n\t) external;\n}\n"
    },
    "contracts/interfaces/IERC6551Account.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/// @dev the ERC-165 identifier for this interface is `0x400a0398`\ninterface IERC6551Account {\n    /// @dev Token bound accounts MUST implement a `receive` function.\n    ///\n    /// Token bound accounts MAY perform arbitrary logic to restrict conditions\n    /// under which Ether can be received.\n    receive() external payable;\n\n    /// @dev Executes `call` on address `to`, with value `value` and calldata\n    /// `data`.\n    ///\n    /// MUST revert and bubble up errors if call fails.\n    ///\n    /// By default, token bound accounts MUST allow the owner of the ERC-721 token\n    /// which owns the account to execute arbitrary calls using `executeCall`.\n    ///\n    /// Token bound accounts MAY implement additional authorization mechanisms\n    /// which limit the ability of the ERC-721 token holder to execute calls.\n    ///\n    /// Token bound accounts MAY implement additional execution functions which\n    /// grant execution permissions to other non-owner accounts.\n    ///\n    /// @return The result of the call\n    function executeCall(\n        address to,\n        uint256 value,\n        bytes calldata data\n    ) external payable returns (bytes memory);\n\n    /// @dev Returns identifier of the ERC-721 token which owns the\n    /// account\n    ///\n    /// The return value of this function MUST be constant - it MUST NOT change\n    /// over time.\n    ///\n    /// @return chainId The EIP-155 ID of the chain the ERC-721 token exists on\n    /// @return tokenContract The contract address of the ERC-721 token\n    /// @return tokenId The ID of the ERC-721 token\n    function token()\n        external\n        view\n        returns (uint256 chainId, address tokenContract, uint256 tokenId);\n\n    /// @dev Returns the owner of the ERC-721 token which controls the account\n    /// if the token exists.\n    ///\n    /// This is value is obtained by calling `ownerOf` on the ERC-721 contract.\n    ///\n    /// @return Address of the owner of the ERC-721 token which owns the account\n    function owner() external view returns (address);\n\n    /// @dev Returns a nonce value that is updated on every successful transaction\n    ///\n    /// @return The current account nonce\n    function nonce() external view returns (uint256);\n\n    /// @dev EIP-1271 signature validation method for contract wallets.\n    /// @param hash Hash of the signed data.\n    /// @param signature Signature byte array associated with hash.\n    /// @return magicValue A bytes4 magic value if signature is valid, otherwise 0x0.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    ) external view returns (bytes4 magicValue);\n}"
    },
    "contracts/interfaces/IERC6551Registry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ninterface IERC6551Registry {\n    event AccountCreated(\n        address account,\n        address implementation,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        uint256 salt\n    );\n\n    function createAccount(\n        address implementation,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        uint256 seed,\n        bytes calldata initData\n    ) external returns (address);\n\n    function account(\n        address implementation,\n        uint256 chainId,\n        address tokenContract,\n        uint256 tokenId,\n        uint256 salt\n    ) external view returns (address);\n}"
    },
    "contracts/interfaces/IFasterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title IFasterRegister\n * @dev Interface for FasterRegister contract\n */\ninterface IFasterRegister {\n    // Player management functions\n    function isPlayerFullyRegistered(address tba) external view returns (bool);\n    function getTBAFromEOA(address eoa) external view returns (address);\n    function getEOAFromTBA(address tba) external view returns (address);\n    function getMyTBA() external view returns (address);\n    \n    // Player stats management\n    function updatePlayerStats(\n        address tba,\n        uint256 newBestTime,\n        uint256 totalTx,\n        uint256 weeklyRank,\n        uint256 lastWeek\n    ) external;\n    \n    function incrementTransactionCount(address tba) external;\n    function updateBestTime(address tba, uint256 newTime) external;\n    function updateWeeklyRank(address tba, uint256 rank) external;\n    function setLastPlayedWeek(address tba, uint256 week) external;\n    \n    // View functions\n    function getPlayerInfo(address tba) external view returns (\n        address eoaAddress,\n        address tbaAddress,\n        uint256 bestTime,\n        uint256 totalTransactions,\n        uint256 weeklyRank,\n        bool isActive,\n        bool hasPaidRegistration\n    );\n    \n    function getRegistrationStatus(address tba) external view returns (\n        bool isRegistered,\n        bool paymentDone,\n        bool playerActive,\n        bool feePaid,\n        uint256 paymentAmount,\n        uint256 registrationTime\n    );\n    \n    // Utility functions\n    function getRegistrationFee() external view returns (uint256);\n    function isAccountReady(address eoa) external view returns (bool);\n    function getTBABalance(address tba) external view returns (uint256);\n}\n\n/**\n * @title IFasterReward\n * @dev Interface for FasterReward contract\n */\ninterface IFasterReward {\n    // Daily reward functions\n    function processDailyReward(address tba) external returns (string memory);\n    function claimDailyReward() external;\n    \n    // Weekly reward functions\n    function processWeeklyReward(address tba, uint256 week, uint256 playerRank) external;\n    function claimWeeklyReward(uint256 week, uint256 playerRank) external;\n    \n    // View functions\n    function canBurnToday(address tba) external view returns (bool);\n    function getBurnCooldownRemaining(address tba) external view returns (uint256);\n    function getMyBurnCooldownRemaining() external view returns (uint256);\n    function canIBurnToday() external view returns (bool);\n    \n    function getRewardProbabilities() external view returns (uint256 bomb, uint256 burger, uint256 mon);\n    function getRewardConfig() external view returns (\n        uint256 burgerBoxId,\n        uint256 burgerBoxAmount,\n        uint256 monTokenAmount,\n        uint256 bombChance,\n        uint256 burgerChance,\n        uint256 monChance\n    );\n    \n    function isWeeklyRewardClaimed(address tba, uint256 week) external view returns (bool);\n    function getWeeklyRewardConfig(uint256 week) external view returns (\n        uint256 amount,\n        uint256 maxRank,\n        bool active\n    );\n    \n    function getContractBalance() external view returns (uint256);\n}\n\n/**\n * @title IFasterTx\n * @dev Interface for FasterTx contract\n */\ninterface IFasterTx {\n    // Game functions\n    function startSpeedTest() external returns (uint256 gameId, uint256 transactionTime, string memory rewardType);\n    function claimWeeklyReward(uint256 week) external;\n    \n    // View functions\n    function canPlay() external view returns (bool canPlayGame, string memory reason);\n    function canTBAPlay(address tba) external view returns (bool canPlayGame, string memory reason);\n    \n    function getCurrentWeek() external view returns (uint256);\n    function getTBAWeeklyBestTime(address tba, uint256 week) external view returns (uint256);\n    function getMyWeeklyBestTime(uint256 week) external view returns (uint256);\n    function hasTBAPlayedThisWeek(address tba, uint256 week) external view returns (bool);\n    function haveIPlayedThisWeek(uint256 week) external view returns (bool);\n    \n    // Leaderboard functions\n    function getWeeklyLeaderboard(uint256 week) external view returns (\n        address[] memory eoaAddresses,\n        address[] memory tbaAddresses,\n        uint256[] memory times,\n        uint256[] memory ranks\n    );\n    \n    function getMonthlyLeaderboard(uint256 month) external view returns (\n        address[] memory eoaAddresses,\n        address[] memory tbaAddresses,\n        uint256[] memory times,\n        uint256[] memory ranks\n    );\n    \n    function getPlayerWeeklyRank(address tba, uint256 week) external view returns (uint256);\n    function getMyWeeklyRank(uint256 week) external view returns (uint256);\n    \n    // Game session functions\n    function getGameSession(uint256 gameId) external view returns (\n        uint256 id,\n        address signerEoa,\n        address playerTba,\n        uint256 startTime,\n        uint256 endTime,\n        bool isCompleted,\n        uint256 transactionTime,\n        string memory rewardReceived\n    );\n    \n    function getTotalGamesPlayed() external view returns (uint256);\n}"
    },
    "contracts/interfaces/IFoodNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title IFoodNFT\n * @dev interface untuk kontrak Food NFT.\n * Fungsi ini memungkinkan untuk mengambil semua token ID makanan yang dimiliki oleh suatu alamat.\n */\ninterface IFoodNFT {\n    /**\n     * @notice Mengambil daftar ID token makanan yang dimiliki oleh suatu alamat.\n     * @param owner Alamat yang ingin diperiksa kepemilikannya.\n     * @return uint256[] Sebuah array yang berisi ID token makanan yang dimiliki oleh `owner`.\n     */\n    function getMyFoods(address owner) external view returns (uint256[] memory);\n}\n"
    },
    "contracts/interfaces/IFoodScramble.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/**\n * @title IFoodScramble Interface\n * @notice Interface untuk FoodScramble contract yang digunakan oleh FasterTx\n * @dev Main game contract yang mengelola TBA (Token Bound Account) dan player data\n */\ninterface IFoodScramble {\n\t/**\n\t * @notice Struct untuk menyimpan statistik player\n\t */\n\tstruct PlayerStats {\n\t\tuint256 totalRolls;\n\t\tuint256 ingredientsCollected;\n\t\tuint256 foodsMinted;\n\t\tuint256 lastActive;\n\t\tbool hasSpecialAccess;\n\t}\n\n\t/**\n\t * @notice Struct untuk menyimpan informasi box/grid\n\t */\n\tstruct Box {\n\t\tuint256 id;\n\t\tstring typeGrid;\n\t\tuint256 ingredientType;\n\t\tuint256 numberOfPlayers;\n\t}\n\n\t/**\n\t * @notice Get Token Bound Account (TBA) address untuk specific EOA\n\t * @param user Externally Owned Account address\n\t * @return TBA address associated with the EOA\n\t */\n\tfunction tbaList(address user) external view returns (address);\n\n\t/**\n\t * @notice Get current player position in grid\n\t * @param tba Token Bound Account address\n\t * @return Current position of player in the grid\n\t */\n\tfunction player(address tba) external view returns (uint256);\n\n\t/**\n\t * @notice Check if player can buy ingredient at current position\n\t * @param tba Token Bound Account address\n\t * @return True if player can buy ingredient, false otherwise\n\t */\n\tfunction canBuy(address tba) external view returns (bool);\n\n\t/**\n\t * @notice Get player roll count\n\t * @param tba Token Bound Account address\n\t * @return Number of rolls made by player\n\t */\n\tfunction rollCount(address tba) external view returns (uint256);\n\n\t/**\n\t * @notice Get player statistics\n\t * @param tba Token Bound Account address\n\t * @return PlayerStats struct containing player statistics\n\t */\n\tfunction stats(address tba) external view returns (PlayerStats memory);\n\n\t/**\n\t * @notice Get username for a player\n\t * @param eoa Player EOA address\n\t * @return Username string\n\t */\n\tfunction usernames(address eoa) external view returns (string memory);\n\n\t/**\n\t * @notice Get EOA address from username\n\t * @param username Username string\n\t * @return EOA address associated with the username\n\t */\n\tfunction nameToAddress(\n\t\tstring memory username\n\t) external view returns (address);\n\n\t/**\n\t * @notice Set TBA address for user (manual mapping)\n\t * @param user EOA address\n\t * @param tba TBA address to associate with the user\n\t */\n\tfunction setTBA(address user, address tba) external;\n\n\t/**\n\t * @notice Check if player account is ready (TBA initialized)\n\t * @param user EOA address to check\n\t * @return True if account is ready, false otherwise\n\t */\n\tfunction accountReady(address user) external view returns (bool);\n\n\t/**\n\t * @notice Check if player has been created\n\t * @param tba Token Bound Account address\n\t * @return True if player is created, false otherwise\n\t */\n\tfunction isPlayerCreated(address tba) external view returns (bool);\n\n\t/**\n\t * @notice Get complete grid information\n\t * @return Array of Box structs representing the game grid\n\t */\n\tfunction getGrid() external view returns (Box[] memory);\n\n\t/**\n\t * @notice Get food NFTs owned by a player\n\t * @param owner EOA address of the owner\n\t * @return Array of token IDs owned by the player\n\t */\n\tfunction getMyFoods(address owner) external view returns (uint256[] memory);\n\n\t/**\n\t * @notice Check if position allows buying ingredient\n\t * @param position Grid position to check\n\t * @return True if position allows buying, false otherwise\n\t */\n\tfunction canBuyAtPosition(uint256 position) external view returns (bool);\n\n\t/**\n\t * @notice Get ingredient type at specific position\n\t * @param position Grid position\n\t * @return Ingredient type at the position\n\t */\n\tfunction getIngredientTypeAtPosition(\n\t\tuint256 position\n\t) external view returns (uint256);\n\n\t/**\n\t * @notice Get current ingredient fee\n\t * @return Current fee for buying ingredients\n\t */\n\tfunction getIngredientFee() external view returns (uint256);\n\n\t/**\n\t * @notice Get faucet amount\n\t * @return Amount distributed by faucet\n\t */\n\tfunction getFaucetAmount() external view returns (uint256);\n\n\t/**\n\t * @notice Get faucet cooldown period\n\t * @return Cooldown period in seconds\n\t */\n\tfunction getFaucetCooldown() external view returns (uint256);\n\n\t/**\n\t * @notice Get faucet usage count for player\n\t * @param eoa Player EOA address\n\t * @return Number of times player has used faucet\n\t */\n\tfunction faucetUsageCount(address eoa) external view returns (uint256);\n\n\t/**\n\t * @notice Get last faucet usage timestamp for player\n\t * @param eoa Player EOA address\n\t * @return Timestamp of last faucet usage\n\t */\n\tfunction lastFaucetUsage(address eoa) external view returns (uint256);\n\n\t/**\n\t * @notice Get last minted special box timestamp for player\n\t * @param eoa Player EOA address\n\t * @return Timestamp of last special box mint\n\t */\n\tfunction lastMintedSpecialBox(address eoa) external view returns (uint256);\n\n\t/**\n\t * @notice Get travel history for player\n\t * @param eoa Player EOA address\n\t * @return Array of positions visited by player\n\t */\n\tfunction travelHistory(\n\t\taddress eoa\n\t) external view returns (uint256[] memory);\n\n\t/**\n\t * @notice Move player on the grid\n\t */\n\tfunction movePlayer() external;\n\n\t/**\n\t * @notice Buy ingredient at current position\n\t */\n\tfunction buyIngredient() external payable;\n\n\t/**\n\t * @notice Travel using rail system\n\t */\n\tfunction travelRail() external;\n\n\t/**\n\t * @notice Mint food NFT using collected ingredients\n\t */\n\tfunction mintFoodNFT() external;\n\n\t/**\n\t * @notice Use faucet to get ETH\n\t */\n\tfunction useFaucetMon() external;\n\n\t/**\n\t * @notice Set username for player\n\t * @param name Username to set\n\t */\n\tfunction setUsername(string calldata name) external;\n\n\t/**\n\t * @notice Create Token Bound Account\n\t * @param implementation Implementation address\n\t * @param chainId Chain ID\n\t * @param tokenContract Token contract address\n\t * @param tokenId Token ID\n\t * @param salt Salt for account creation\n\t * @param initData Initialization data\n\t */\n\tfunction createTokenBoundAccount(\n\t\taddress implementation,\n\t\tuint256 chainId,\n\t\taddress tokenContract,\n\t\tuint256 tokenId,\n\t\tuint256 salt,\n\t\tbytes calldata initData\n\t) external;\n\n\t/**\n\t * @notice Events\n\t */\n\tevent PlayerMoved(address indexed player, uint256 newPosition);\n\tevent SpecialBoxMinted(address indexed user, uint256 hamburgerCount);\n\tevent PlayerCreated(address indexed tba, uint256 gridIndex);\n\tevent TokenBoundAccountCreated(\n\t\taddress indexed eoa,\n\t\taddress indexed tba,\n\t\tuint256 startPosition\n\t);\n\tevent IngredientPurchased(\n\t\taddress indexed player,\n\t\tuint256 ingredientType,\n\t\tuint256 fee\n\t);\n\tevent IngredientFeeUpdated(uint256 oldFee, uint256 newFee);\n\tevent FaucetAmountUpdated(uint256 oldAmount, uint256 newAmount);\n\tevent FaucetCooldownUpdated(uint256 oldCooldown, uint256 newCooldown);\n}\n"
    },
    "contracts/interfaces/ILeaderboard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/// @title Interface for Leaderboard\n/// @notice Used by other contracts (e.g., SpecialBoxManager) to add XP or read leaderboard\ninterface ILeaderboard {\n    /// @notice Add XP/points to a user\n    /// @param user The user address (EOA or TBA)\n    /// @param xp Points to add\n    /// @param source Source of XP/points\nfunction addXP(address user, uint256 xp, string calldata source) external;\n\n/// @notice Add batch XP/points to all user\n/// @param users The user address (EOA or TBA)\n/// @param amounts Points to add\nfunction batchAddXP(address[] calldata users, uint256[] calldata amounts) external;\n\n    /// @notice Get total points of a user\n    /// @param tba The user address (EOA or TBA)\n    /// @return totalPoints Total accumulated points\n    /// function getPoints(address tba) external view returns (uint256 totalPoints);\n\n    /// @notice Get leaderboard rank of a user\n    /// @param user The user address (EOA or TBA)\n    /// @return rank Rank of the user (1 = top)\n    function getUserRank(address user) external view returns (uint256 rank);\n\n    /// @notice Get top N users in leaderboard\n    /// @param topN Number of top users to return\n    /// @return users Array of user addresses\n    /// @return points Array of corresponding points\n    function getTopUsers(uint256 topN) external view returns (address[] memory users, uint256[] memory points);\n\n    /// @notice Event emitted when points are added\n    event PointsAdded(address indexed tba, uint256 amount, uint256 newTotal, address indexed source);\n\n    /// @notice Event emitted when a user's stats are updated\n    event UserStatsUpdated(address indexed user, address indexed eoa, address indexed tba);\n}\n"
    },
    "contracts/interfaces/IPaymentGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IPaymentGateway {\n    /**\n     * @notice Terima pembayaran dari kontrak lain\n     * @dev Harus dipanggil dengan msg.value > 0\n     */\n    function processPayment() external payable;\n}\n"
    },
    "contracts/interfaces/ISpecialBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ISpecialBox {\n    // === EVENTS ===\n    event MintBox(address indexed user, address indexed tba, uint256 tokenId);\n    event Burn(address indexed user, address indexed tba, uint256 tokenId);\n    event BoxPriceUpdated(uint256 newPrice);\n    event PaymentGatewayUpdated(address newGateway);\n\n    // === MINT FUNCTIONS ===\n\n    /**\n     * @notice Mint satu box dengan memburn 10 hamburger\n     * @dev Cek 10 hamburger di TBA, burn, lalu mint box\n     * @return tokenId yang di-mint\n     */\n    function mintBox() external payable returns (uint256);\n\n    // === BURN FUNCTIONS ===\n\n    /**\n     * @notice Burn single box by token ID (only authorized burners)\n     * @param tokenId ID of box to burn\n     */\n    function burnBox(uint256 tokenId) external;\n\n    // === VIEW FUNCTIONS - TBA BALANCE ===\n\n    /**\n     * @notice Get TBA's box balance\n     * @param tba TBA address\n     * @return Array of box token IDs owned by TBA\n     */\n    function boxBalance(address tba) external view returns (uint256[] memory);\n\n    // === VIEW FUNCTIONS - GENERAL ===\n\n    /**\n     * @notice Get user's TBA address\n     * @param user User address\n     * @return TBA address for the user\n     */\n    function getTBA(address user) external view returns (address);\n\n    /**\n     * @notice Check berapa box yang bisa di-mint dari TBA\n     * @param tba TBA address\n     * @return Jumlah box yang bisa di-mint\n     */\n    function canMint(address tba) external view returns (uint256);\n\n    /**\n     * @notice Get total supply of boxes\n     * @return Total number of boxes minted\n     */\n    function total() external view returns (uint256);\n\n    /**\n     * @notice Get total cost untuk mint\n     * @return ethCost ETH cost per box\n     */\n    function getMintCost() external view returns (uint256 ethCost);\n\n    /**\n     * @notice Get current box price\n     */\n    function getBoxPrice() external view returns (uint256);\n\n    // === HAMBURGER FUNCTIONS ===\n\n    /**\n     * @notice Cek apakah TBA punya minimal 10 hamburger\n     * @param tba Address TBA yang dicek\n     * @return true jika punya >= 10 hamburger\n     */\n    function hasEnoughHamburgers(address tba) external view returns (bool);\n\n    // === ADMIN VIEW FUNCTIONS ===\n\n    /**\n     * @notice Check if address is authorized burner\n     * @param burner Address to check\n     * @return True if authorized, false otherwise\n     */\n    function burners(address burner) external view returns (bool);\n\n    // === ERC721 STANDARD FUNCTIONS ===\n\n    /**\n     * @notice Get owner of token\n     * @param tokenId Token ID\n     * @return Address of token owner\n     */\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    /**\n     * @notice Get balance of address (ERC721 standard)\n     * @param owner Address to check\n     * @return Number of tokens owned\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @notice Get approved address for token\n     * @param tokenId Token ID\n     * @return Approved address\n     */\n    function getApproved(uint256 tokenId) external view returns (address);\n\n    /**\n     * @notice Check if operator is approved for all tokens of owner\n     * @param owner Token owner\n     * @param operator Operator address\n     * @return True if approved for all\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @notice Get token name\n     * @return Token name\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @notice Get token symbol\n     * @return Token symbol\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @notice Get token URI\n     * @param tokenId Token ID\n     * @return Token URI\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // === TRANSFER FUNCTIONS ===\n\n    /**\n     * @notice Transfer token from one address to another\n     * @param from Source address\n     * @param to Destination address\n     * @param tokenId Token ID to transfer\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Safely transfer token from one address to another\n     * @param from Source address\n     * @param to Destination address\n     * @param tokenId Token ID to transfer\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Safely transfer token from one address to another with data\n     * @param from Source address\n     * @param to Destination address\n     * @param tokenId Token ID to transfer\n     * @param data Additional data\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) external;\n\n    // === APPROVAL FUNCTIONS ===\n\n    /**\n     * @notice Approve address to transfer specific token\n     * @param to Address to approve\n     * @param tokenId Token ID to approve\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @notice Set approval for all tokens\n     * @param operator Operator address\n     * @param approved Approval status\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    // === CONSTANTS ===\n\n    /**\n     * @notice Cost in hamburgers to mint one box\n     * @return Number of hamburgers required\n     */\n    function HAMBURGER_COST() external view returns (uint256);\n}\n\n// === SEPARATE INTERFACE FOR STAKING ===\n\ninterface ISpecialBoxStake {\n    // === EVENTS ===\n    event Stake(address indexed user, address indexed tba, uint256 tokenId);\n    event StakeBatch(address indexed user, address indexed tba, uint256[] tokenIds);\n    event Unstake(address indexed user, address indexed tba, uint256 tokenId);\n    event UnstakeBatch(address indexed user, address indexed tba, uint256[] tokenIds);\n    event StakeAll(address indexed user, address indexed tba, uint256[] tokenIds, uint256 totalStaked);\n\n    // === SINGLE STAKE FUNCTIONS ===\n\n    /**\n     * @notice Stake satu box\n     * @param tokenId ID box yang akan di-stake\n     */\n    function stake(uint256 tokenId) external;\n\n    /**\n     * @notice Unstake satu box\n     * @param tokenId ID box yang akan di-unstake\n     */\n    function unstake(uint256 tokenId) external;\n\n    // === BATCH STAKE FUNCTIONS ===\n\n    /**\n     * @notice Stake multiple boxes\n     * @param tokenIds Array ID box yang akan di-stake\n     */\n    function stakeBatch(uint256[] memory tokenIds) external;\n\n    /**\n     * @notice Unstake multiple boxes\n     * @param tokenIds Array ID box yang akan di-unstake\n     */\n    function unstakeBatch(uint256[] memory tokenIds) external;\n\n    // === STAKE ALL FUNCTIONS ===\n\n    /**\n     * @notice Stake semua box yang dimiliki di TBA\n     * @return tokenIds Array ID box yang di-stake\n     */\n    function stakeAll() external returns (uint256[] memory);\n\n    /**\n     * @notice Unstake semua box yang di-stake di TBA\n     * @return tokenIds Array ID box yang di-unstake\n     */\n    function unstakeAll() external returns (uint256[] memory);\n\n    // === VIEW FUNCTIONS - TBA STAKE BALANCE ===\n\n    /**\n     * @notice Get TBA's staked boxes\n     * @param tba TBA address\n     * @return Array of staked token IDs\n     */\n    function stakedBoxBalance(address tba) external view returns (uint256[] memory);\n\n    /**\n     * @notice Get total staked boxes count for TBA\n     * @param tba TBA address\n     * @return Total staked count\n     */\n    function totalStakedBoxes(address tba) external view returns (uint256);\n\n    // === VIEW FUNCTIONS - STAKE STATUS ===\n\n    /**\n     * @notice Check if box is staked\n     * @param tokenId Box token ID\n     * @return true if staked\n     */\n    function checkStaked(uint256 tokenId) external view returns (bool);\n\n    /**\n     * @notice Get who staked the box\n     * @param tokenId Box token ID\n     * @return TBA address that staked the box\n     */\n    function getStaker(uint256 tokenId) external view returns (address);\n\n    /**\n     * @notice Get user's TBA address\n     * @param user User address\n     * @return TBA address\n     */\n    function getTBA(address user) external view returns (address);\n\n    /**\n     * @notice Get stakeable boxes count (boxes that can be staked)\n     * @param tba TBA address\n     * @return Number of boxes that can be staked\n     */\n    function getStakeableCount(address tba) external view returns (uint256);\n\n    // === MAPPINGS ACCESS ===\n\n    /**\n     * @notice Check if token is staked\n     * @param tokenId Token ID\n     * @return Staked status\n     */\n    function isStaked(uint256 tokenId) external view returns (bool);\n\n    /**\n     * @notice Get who staked the token\n     * @param tokenId Token ID\n     * @return TBA address\n     */\n    function stakedBy(uint256 tokenId) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IUniPass.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IUniPass {\n    /// @notice Mint NFT UniPass untuk user (hanya minter yang bisa memanggil)\n    /// @param to Address yang akan menerima NFT\n    /// @return tokenId ID token yang baru dibuat\n    function mintUniPass(address to) external returns (uint256);\n    \n    /// @notice Set SpecialBoxManager sebagai minter resmi (hanya owner)\n    /// @param _minter Address yang akan dijadikan minter\n    function setMinter(address _minter) external;\n    \n    /// @notice Update base URI untuk metadata (hanya owner)\n    /// @param _baseURI Base URI baru untuk IPFS metadata\n    function setBaseURI(string calldata _baseURI) external;\n    \n    /// @notice Cek owner dari token tertentu\n    /// @param tokenId ID token yang akan dicek\n    /// @return owner Address pemilik token\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    \n    /// @notice Cek balance NFT user\n    /// @param owner Address yang akan dicek\n    /// @return balance Jumlah NFT yang dimiliki\n    function balanceOf(address owner) external view returns (uint256 balance);\n    \n    /// @notice Transfer NFT\n    /// @param from Address pengirim\n    /// @param to Address penerima\n    /// @param tokenId ID token yang akan ditransfer\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    \n    /// @notice Safe transfer NFT\n    /// @param from Address pengirim\n    /// @param to Address penerima\n    /// @param tokenId ID token yang akan ditransfer\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    \n    /// @notice Safe transfer NFT dengan data\n    /// @param from Address pengirim\n    /// @param to Address penerima\n    /// @param tokenId ID token yang akan ditransfer\n    /// @param data Data tambahan untuk transfer\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n    \n    /// @notice Approve address untuk transfer token tertentu\n    /// @param to Address yang akan di-approve\n    /// @param tokenId ID token yang akan di-approve\n    function approve(address to, uint256 tokenId) external;\n    \n    /// @notice Get approved address untuk token tertentu\n    /// @param tokenId ID token\n    /// @return operator Address yang di-approve\n    function getApproved(uint256 tokenId) external view returns (address operator);\n    \n    /// @notice Set approval untuk semua token\n    /// @param operator Address operator\n    /// @param approved Status approval\n    function setApprovalForAll(address operator, bool approved) external;\n    \n    /// @notice Cek approval status untuk semua token\n    /// @param owner Address pemilik\n    /// @param operator Address operator\n    /// @return approved Status approval\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\n    \n    /// @notice Get current minter address\n    /// @return minter Address yang saat ini menjadi minter\n    function minter() external view returns (address minter);\n    \n    /// @notice Get contract name\n    /// @return name Nama contract\n    function name() external view returns (string memory name);\n    \n    /// @notice Get contract symbol  \n    /// @return symbol Symbol contract\n    function symbol() external view returns (string memory symbol);\n    \n    /// @notice Get token URI untuk metadata\n    /// @param tokenId ID token\n    /// @return uri URI metadata token\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\n    \n    /// @notice Check apakah interface didukung\n    /// @param interfaceId Interface ID yang akan dicek\n    /// @return supported Boolean apakah interface didukung\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n    \n    // Events yang sesuai dengan contract UniPass.sol\n    event MinterUpdated(address indexed newMinter);\n    event BaseURIUpdated(string newBaseURI);\n    \n    // Standard ERC721 Events\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n}"
    },
    "contracts/Leaderboard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\ninterface IERC6551Account {\n    function owner() external view returns (address);\n}\n\n/**\n * Leaderboard Contract\n * - Menerima points dari StakeSpecialBox.sol dan SpecialBox.sol\n * - Mengelola ranking berdasarkan total points\n * - Supports EOA dan TBA address mapping\n * - Gas-efficient dengan pagination untuk frontend\n */\n\ncontract Leaderboard is Ownable, ReentrancyGuard, Pausable {\n    // ===== Storage =====\n    struct UserStats {\n        uint256 totalPoints; // Total points (18 decimals)\n        uint256 lastUpdate; // Last update timestamp\n        address eoa; // EOA address (resolved from TBA)\n        address tba; // TBA address\n        bool isActive; // Whether user is active\n    }\n\n    // Points mapping: address -> points (supports both EOA and TBA)\n    mapping(address => UserStats) public userStats;\n\n    // Authorized contracts that can add points\n    mapping(address => bool) public authorizedContracts;\n\n    // Leaderboard data for efficient querying\n    address[] public leaderboardUsers; // All users with points > 0\n    mapping(address => uint256) public userIndexInLeaderboard; // address -> index in leaderboardUsers (1-based, 0 = not in list)\n\n    // ===== Events =====\n    event PointsAdded(address indexed tba, uint256 amount, uint256 newTotal, address indexed source);\n    event ContractAuthorized(address indexed contractAddr, bool authorized);\n    event UserStatsUpdated(address indexed user, address indexed eoa, address indexed tba);\n    event LeaderboardUpdated(address indexed tba, uint256 oldRank, uint256 newRank);\n\n    constructor() Ownable(msg.sender) {}\n\n    // ===== Modifiers =====\n    modifier onlyAuthorized() {\n        require(authorizedContracts[msg.sender], \"not authorized\");\n        _;\n    }\n\n    // ===== Core Functions =====\n\n    /// @notice Add points to user (called by authorized contracts)\n    /// @param user The user address (can be EOA or TBA)\n    /// @param amount Points to add (18 decimals)\n    function addXP(address user, uint256 amount) external onlyAuthorized whenNotPaused {\n        require(user != address(0), \"user=0\");\n        require(amount > 0, \"amount=0\");\n\n        UserStats storage stats = userStats[user];\n\n        // Resolve EOA and TBA addresses\n        (address eoa, address tba) = _resolveAddresses(user);\n\n        // Update user stats\n        stats.totalPoints += amount;\n        stats.lastUpdate = block.timestamp;\n        stats.eoa = eoa;\n        stats.tba = tba;\n        stats.isActive = true;\n\n        // Update leaderboard position\n        _updateLeaderboardPosition(user);\n\n        emit PointsAdded(user, amount, stats.totalPoints, msg.sender);\n        emit UserStatsUpdated(user, eoa, tba);\n    }\n\n    /// @notice Batch add points to multiple users\n    function batchAddXP(address[] calldata users, uint256[] calldata amounts) external onlyAuthorized whenNotPaused {\n        require(users.length == amounts.length, \"length mismatch\");\n        require(users.length > 0, \"empty arrays\");\n\n        for (uint256 i = 0; i < users.length; i++) {\n            if (users[i] != address(0) && amounts[i] > 0) {\n                UserStats storage stats = userStats[users[i]];\n\n                (address eoa, address tba) = _resolveAddresses(users[i]);\n\n                stats.totalPoints += amounts[i];\n                stats.lastUpdate = block.timestamp;\n                stats.eoa = eoa;\n                stats.tba = tba;\n                stats.isActive = true;\n\n                _updateLeaderboardPosition(users[i]);\n\n                emit PointsAdded(users[i], amounts[i], stats.totalPoints, msg.sender);\n                emit UserStatsUpdated(users[i], eoa, tba);\n            }\n        }\n    }\n\n    /// @dev Update user position in leaderboard array\n    function _updateLeaderboardPosition(address user) internal {\n        uint256 currentIndex = userIndexInLeaderboard[user];\n\n        if (currentIndex == 0) {\n            // New user, add to leaderboard\n            leaderboardUsers.push(user);\n            userIndexInLeaderboard[user] = leaderboardUsers.length;\n        }\n\n        // Note: We don't maintain sorted order in storage for gas efficiency\n        // Sorting will be done in view functions or frontend\n    }\n\n    // ===== View Functions =====\n\n    /// @notice Get user rank (1-based). Returns 0 if user not found.\n    function getUserRank(address user) external view returns (uint256 rank) {\n        if (userStats[user].totalPoints == 0) return 0;\n\n        uint256 userPoints = userStats[user].totalPoints;\n        uint256 higherCount = 0;\n\n        for (uint256 i = 0; i < leaderboardUsers.length; i++) {\n            address otherUser = leaderboardUsers[i];\n            if (userStats[otherUser].totalPoints > userPoints) {\n                higherCount++;\n            }\n        }\n\n        return higherCount + 1;\n    }\n\n    /// @notice Get top N users (sorted by points descending)\n    function getTopUsers(\n        uint256 limit\n    )\n        external\n        view\n        returns (address[] memory users, uint256[] memory points, address[] memory eoas, address[] memory tbas)\n    {\n        uint256 totalUsers = leaderboardUsers.length;\n        uint256 returnCount = limit > totalUsers ? totalUsers : limit;\n\n        // Create arrays for sorting\n        address[] memory tempUsers = new address[](totalUsers);\n        uint256[] memory tempPoints = new uint256[](totalUsers);\n\n        // Copy data\n        for (uint256 i = 0; i < totalUsers; i++) {\n            tempUsers[i] = leaderboardUsers[i];\n            tempPoints[i] = userStats[leaderboardUsers[i]].totalPoints;\n        }\n\n        // Sort by points (bubble sort for simplicity, consider more efficient sorting for large datasets)\n        for (uint256 i = 0; i < totalUsers; i++) {\n            for (uint256 j = i + 1; j < totalUsers; j++) {\n                if (tempPoints[i] < tempPoints[j]) {\n                    // Swap\n                    (tempPoints[i], tempPoints[j]) = (tempPoints[j], tempPoints[i]);\n                    (tempUsers[i], tempUsers[j]) = (tempUsers[j], tempUsers[i]);\n                }\n            }\n        }\n\n        // Return top N\n        users = new address[](returnCount);\n        points = new uint256[](returnCount);\n        eoas = new address[](returnCount);\n        tbas = new address[](returnCount);\n\n        for (uint256 i = 0; i < returnCount; i++) {\n            users[i] = tempUsers[i];\n            points[i] = tempPoints[i];\n            eoas[i] = userStats[tempUsers[i]].eoa;\n            tbas[i] = userStats[tempUsers[i]].tba;\n        }\n    }\n\n    /// @notice Get leaderboard with pagination\n    function getLeaderboardPage(\n        uint256 offset,\n        uint256 limit\n    )\n        external\n        view\n        returns (\n            address[] memory users,\n            uint256[] memory points,\n            address[] memory eoas,\n            address[] memory tbas,\n            uint256[] memory ranks,\n            uint256 totalUsers\n        )\n    {\n        totalUsers = leaderboardUsers.length;\n\n        if (offset >= totalUsers) {\n            // Return empty arrays\n            return (\n                new address[](0),\n                new uint256[](0),\n                new address[](0),\n                new address[](0),\n                new uint256[](0),\n                totalUsers\n            );\n        }\n\n        uint256 returnCount = limit;\n        if (offset + limit > totalUsers) {\n            returnCount = totalUsers - offset;\n        }\n\n        // Get sorted data (reuse logic from getTopUsers)\n        address[] memory tempUsers = new address[](totalUsers);\n        uint256[] memory tempPoints = new uint256[](totalUsers);\n\n        for (uint256 i = 0; i < totalUsers; i++) {\n            tempUsers[i] = leaderboardUsers[i];\n            tempPoints[i] = userStats[leaderboardUsers[i]].totalPoints;\n        }\n\n        // Sort\n        for (uint256 i = 0; i < totalUsers; i++) {\n            for (uint256 j = i + 1; j < totalUsers; j++) {\n                if (tempPoints[i] < tempPoints[j]) {\n                    (tempPoints[i], tempPoints[j]) = (tempPoints[j], tempPoints[i]);\n                    (tempUsers[i], tempUsers[j]) = (tempUsers[j], tempUsers[i]);\n                }\n            }\n        }\n\n        // Return page\n        users = new address[](returnCount);\n        points = new uint256[](returnCount);\n        eoas = new address[](returnCount);\n        tbas = new address[](returnCount);\n        ranks = new uint256[](returnCount);\n\n        for (uint256 i = 0; i < returnCount; i++) {\n            uint256 index = offset + i;\n            users[i] = tempUsers[index];\n            points[i] = tempPoints[index];\n            eoas[i] = userStats[tempUsers[index]].eoa;\n            tbas[i] = userStats[tempUsers[index]].tba;\n            ranks[i] = index + 1; // 1-based ranking\n        }\n    }\n\n    /// @notice Get specific user's complete stats\n    function getUserStats(\n        address user\n    )\n        external\n        view\n        returns (uint256 totalPoints, uint256 rank, address eoa, address tba, uint256 lastUpdate, bool isActive)\n    {\n        UserStats memory stats = userStats[user];\n        return (stats.totalPoints, this.getUserRank(user), stats.eoa, stats.tba, stats.lastUpdate, stats.isActive);\n    }\n\n    /// @notice Get total number of active users\n    function getTotalUsers() external view returns (uint256) {\n        return leaderboardUsers.length;\n    }\n\n    // ===== Admin Functions =====\n\n    /// @notice Authorize/deauthorize contract to add points\n    function setContractAuthorization(address contractAddr, bool authorized) external onlyOwner {\n        require(contractAddr != address(0), \"contract=0\");\n        authorizedContracts[contractAddr] = authorized;\n        emit ContractAuthorized(contractAddr, authorized);\n    }\n\n    /// @notice Batch authorize multiple contracts\n    function batchSetContractAuthorization(\n        address[] calldata contracts,\n        bool[] calldata authorizations\n    ) external onlyOwner {\n        require(contracts.length == authorizations.length, \"length mismatch\");\n\n        for (uint256 i = 0; i < contracts.length; i++) {\n            if (contracts[i] != address(0)) {\n                authorizedContracts[contracts[i]] = authorizations[i];\n                emit ContractAuthorized(contracts[i], authorizations[i]);\n            }\n        }\n    }\n\n    /// @notice Emergency function to manually update user stats (admin only)\n    function adminUpdateUserStats(address user, uint256 points, address eoa, address tba) external onlyOwner {\n        require(user != address(0), \"user=0\");\n\n        UserStats storage stats = userStats[user];\n        uint256 oldPoints = stats.totalPoints;\n\n        stats.totalPoints = points;\n        stats.lastUpdate = block.timestamp;\n        stats.eoa = eoa;\n        stats.tba = tba;\n        stats.isActive = points > 0;\n\n        if (oldPoints == 0 && points > 0) {\n            // New user\n            _updateLeaderboardPosition(user);\n        } else if (oldPoints > 0 && points == 0) {\n            // Remove user\n            _removeFromLeaderboard(user);\n        }\n\n        emit PointsAdded(user, points, points, address(this));\n        emit UserStatsUpdated(user, eoa, tba);\n    }\n\n    /// @dev Remove user from leaderboard array\n    function _removeFromLeaderboard(address user) internal {\n        uint256 index = userIndexInLeaderboard[user];\n        if (index == 0) return; // Not in leaderboard\n\n        uint256 arrayIndex = index - 1; // Convert to 0-based\n        uint256 lastIndex = leaderboardUsers.length - 1;\n\n        if (arrayIndex != lastIndex) {\n            // Move last element to deleted spot\n            leaderboardUsers[arrayIndex] = leaderboardUsers[lastIndex];\n            userIndexInLeaderboard[leaderboardUsers[arrayIndex]] = index;\n        }\n\n        // Remove last element\n        leaderboardUsers.pop();\n        delete userIndexInLeaderboard[user];\n    }\n\n    /// @notice Reset all leaderboard data (emergency function)\n    function resetLeaderboard() external onlyOwner {\n        for (uint256 i = 0; i < leaderboardUsers.length; i++) {\n            delete userStats[leaderboardUsers[i]];\n            delete userIndexInLeaderboard[leaderboardUsers[i]];\n        }\n        delete leaderboardUsers;\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // ===== Utility Functions =====\n\n    /// @notice Check if address is authorized to add points\n    function isAuthorized(address contractAddr) external view returns (bool) {\n        return authorizedContracts[contractAddr];\n    }\n\n    /// @notice Get leaderboard length\n    /// @notice Resolve EOA from potential TBA address\n    function resolveEOA(address addr) external view returns (address eoa, address tba) {\n        try IERC6551Account(addr).owner() returns (address owner) {\n            if (owner != address(0)) {\n                return (owner, addr); // addr is TBA\n            } else {\n                return (addr, addr); // addr is EOA or misconfigured TBA\n            }\n        } catch {\n            return (addr, addr); // addr is EOA\n        }\n    }\n\n    /// @dev Internal resolve function to get EOA and TBA addresses\n    function _resolveAddresses(address addr) internal view returns (address eoa, address tba) {\n        try IERC6551Account(addr).owner() returns (address owner) {\n            if (owner != address(0)) {\n                return (owner, addr);\n            }\n        } catch {}\n        return (addr, addr);\n    }\n}\n"
    },
    "contracts/LettuceToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract LettuceToken is ERC20, Ownable {\n    address public gameContract;\n\n    constructor() ERC20(\"Lettuce\", \"LT\") Ownable(msg.sender) {}\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    /// @notice Mint token Lettuce\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        // mint token ke user\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/lib/ERC6551BytecodeLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Bytecode {\n    error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\n\n    /**\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\n    @param _code The returning value of the resulting `creationCode`\n    @return creationCode (constructor) for new contract\n  */\n    function creationCodeFor(\n        bytes memory _code\n    ) internal pure returns (bytes memory) {\n        /*\n        0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\n        0x01    0x80         0x80        DUP1                size size\n        0x02    0x60         0x600e      PUSH1 14            14 size size\n        0x03    0x60         0x6000      PUSH1 00            0 14 size size\n        0x04    0x39         0x39        CODECOPY            size\n        0x05    0x60         0x6000      PUSH1 00            0 size\n        0x06    0xf3         0xf3        RETURN\n        <CODE>\n        */\n\n        return\n            abi.encodePacked(\n                hex\"63\",\n                uint32(_code.length),\n                hex\"80_60_0E_60_00_39_60_00_F3\",\n                _code\n            );\n    }\n\n    /**\n    @notice Returns the size of the code on a given address\n    @param _addr Address that may or may not contain code\n    @return size of the code on the given `_addr`\n  */\n    function codeSize(address _addr) internal view returns (uint256 size) {\n        assembly {\n            size := extcodesize(_addr)\n        }\n    }\n\n    /**\n    @notice Returns the code of a given address\n    @dev It will fail if `_end < _start`\n    @param _addr Address that may or may not contain code\n    @param _start number of bytes of code to skip on read\n    @param _end index before which to end extraction\n    @return oCode read from `_addr` deployed bytecode\n\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\n  */\n    function codeAt(\n        address _addr,\n        uint256 _start,\n        uint256 _end\n    ) internal view returns (bytes memory oCode) {\n        uint256 csize = codeSize(_addr);\n        if (csize == 0) return bytes(\"\");\n\n        if (_start > csize) return bytes(\"\");\n        if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end);\n\n        unchecked {\n            uint256 reqSize = _end - _start;\n            uint256 maxSize = csize - _start;\n\n            uint256 size = maxSize < reqSize ? maxSize : reqSize;\n\n            assembly {\n                // allocate output byte array - this could also be done without assembly\n                // by using o_code = new bytes(size)\n                oCode := mload(0x40)\n                // new \"memory end\" including padding\n                mstore(\n                    0x40,\n                    add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f)))\n                )\n                // store length in memory\n                mstore(oCode, size)\n                // actually retrieve the code, this needs assembly\n                extcodecopy(_addr, add(oCode, 0x20), _start, size)\n            }\n        }\n    }\n}"
    },
    "contracts/MeatToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MeatToken is ERC20, Ownable {\n    address public gameContract;\n\n    constructor() ERC20(\"Meat\", \"MT\") Ownable(msg.sender) {}\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    /// @notice Mint token Meat\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        // mint token ke user\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/PaymentGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// PaymentGateway refactored for OpenZeppelin Contracts v5 compatibility\n// - Uses SafeERC20 for ERC20 transfers\n// - Uses Ownable + ReentrancyGuard\n// - No Counters dependency\n// - Pull-over-push pattern for owner withdrawals\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract PaymentGateway is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Events\n    event NativePaymentReceived(address indexed payer, uint256 amount, bytes metadata);\n    event ERC20PaymentReceived(address indexed payer, address indexed token, uint256 amount, bytes metadata);\n    event Withdrawn(address indexed receiver, uint256 amount);\n    event ERC20Withdrawn(address indexed token, address indexed receiver, uint256 amount);\n\n    constructor() Ownable(msg.sender) {}\n\n    // Receive native ETH/AVAX/BNB/etc payments with optional metadata (use low-level call to pass data off-chain)\n    receive() external payable {\n        emit NativePaymentReceived(msg.sender, msg.value, \"\");\n    }\n\n    // Fallback to accept plain payments\n    fallback() external payable {\n        emit NativePaymentReceived(msg.sender, msg.value, \"\");\n    }\n\n    /**\n     * @dev Pay with native token and attach optional metadata (ABI-encoded bytes)\n     */\n    function payNative(bytes calldata metadata) external payable nonReentrant {\n        require(msg.value > 0, \"PaymentGateway: zero payment\");\n        emit NativePaymentReceived(msg.sender, msg.value, metadata);\n    }\n\n    /**\n     * @dev Pay with ERC20 token. Caller must approve this contract beforehand.\n     */\n    function payERC20(address token, uint256 amount, bytes calldata metadata) external nonReentrant {\n        require(amount > 0, \"PaymentGateway: zero amount\");\n        require(token != address(0), \"PaymentGateway: invalid token\");\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        emit ERC20PaymentReceived(msg.sender, token, amount, metadata);\n    }\n\n    /**\n     * @dev Owner withdraw native balance to a receiver\n     */\n    function withdrawNative(address payable receiver, uint256 amount) external onlyOwner nonReentrant {\n        require(receiver != address(0), \"PaymentGateway: invalid receiver\");\n        require(amount <= address(this).balance, \"PaymentGateway: insufficient balance\");\n\n        (bool sent, ) = receiver.call{ value: amount }(\"\");\n        require(sent, \"PaymentGateway: native transfer failed\");\n\n        emit Withdrawn(receiver, amount);\n    }\n\n    /**\n     * @dev Owner withdraw ERC20 token balance to a receiver\n     */\n    function withdrawERC20(address token, address receiver, uint256 amount) external onlyOwner nonReentrant {\n        require(receiver != address(0), \"PaymentGateway: invalid receiver\");\n        require(token != address(0), \"PaymentGateway: invalid token\");\n\n        IERC20(token).safeTransfer(receiver, amount);\n        emit ERC20Withdrawn(token, receiver, amount);\n    }\n\n    /**\n     * @dev Emergency rescue for accidentally sent tokens (owner only)\n     */\n    function rescueERC20(address token, address to, uint256 amount) external onlyOwner nonReentrant {\n        require(to != address(0), \"PaymentGateway: invalid to\");\n        IERC20(token).safeTransfer(to, amount);\n        emit ERC20Withdrawn(token, to, amount);\n    }\n\n    /**\n     * @dev Get contract native balance\n     */\n    function nativeBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Get ERC20 balance of contract\n     */\n    function erc20Balance(address token) external view returns (uint256) {\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    // Add custom logic below (forwarding, split payments, fee calculation, on-chain receipts, etc.)\n}\n"
    },
    "contracts/RewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/// ==================== REWARD POOL CONTRACT ====================\ncontract RewardPool is Ownable, ReentrancyGuard {\n    mapping(address => bool) public authorizedDistributors;\n    uint256 public totalDistributed;\n\n    event RewardDistributed(address indexed to, uint256 amount, address indexed distributor);\n    event FundsDeposited(address indexed from, uint256 amount);\n    event DistributorUpdated(address indexed distributor, bool authorized);\n\n    modifier onlyDistributor() {\n        require(authorizedDistributors[msg.sender], \"Not authorized distributor\");\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Deposit funds to the reward pool\n     */\n    function deposit() external payable {\n        require(msg.value > 0, \"Must send ETH\");\n        emit FundsDeposited(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Distribute reward to player\n     */\n    function distributeReward(address to, uint256 amount) external onlyDistributor nonReentrant {\n        require(to != address(0), \"Invalid recipient\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(address(this).balance >= amount, \"Insufficient pool balance\");\n\n        totalDistributed += amount;\n\n        (bool success, ) = payable(to).call{ value: amount }(\"\");\n        require(success, \"Transfer failed\");\n\n        emit RewardDistributed(to, amount, msg.sender);\n    }\n\n    /**\n     * @dev Get current pool balance\n     */\n    function getPoolBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Set authorized distributor\n     */\n    function setDistributor(address distributor, bool authorized) external onlyOwner {\n        authorizedDistributors[distributor] = authorized;\n        emit DistributorUpdated(distributor, authorized);\n    }\n\n    /**\n     * @dev Emergency withdraw\n     */\n    function emergencyWithdraw() external onlyOwner {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No funds to withdraw\");\n\n        (bool success, ) = payable(owner()).call{ value: balance }(\"\");\n        require(success, \"Withdrawal failed\");\n    }\n\n    // Allow contract to receive ETH\n    receive() external payable {\n        emit FundsDeposited(msg.sender, msg.value);\n    }\n}\n"
    },
    "contracts/SpecialBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface IFoodNFT {\n    function getMyFoods(address _owner) external view returns (uint256[] memory);\n    function burnFood(uint256 tokenId) external;\n    function ownerOf(uint256 tokenId) external view returns (address);\n}\n\ninterface IFoodScramble {\n    function getTBA(address user) external view returns (address);\n    function accountReady(address user) external view returns (bool);\n}\n\ninterface IPaymentGateway {\n    function processPayment() external payable;\n}\n\ncontract SpecialBox is ERC721, Ownable, ReentrancyGuard {\n    uint256 private _tokenIds;\n\n    // Interface\n    IFoodNFT public foodNFT;\n    IFoodScramble public foodScramble;\n    IPaymentGateway public paymentGateway;\n\n    // Constants\n    uint256 public constant HAMBURGER_COST = 10;\n    uint256 public boxPrice = 0 ether;\n\n    // Authorized burners\n    mapping(address => bool) public burners;\n\n    // Storage - using TBA addresses\n    mapping(address => uint256[]) public boxes; // TBA => box IDs\n\n    // Events\n    event MintBox(address indexed user, address indexed tba, uint256 tokenId);\n    event Burn(address indexed user, address indexed tba, uint256 tokenId);\n    event BoxPriceUpdated(uint256 newPrice);\n    event PaymentGatewayUpdated(address newGateway);\n\n    constructor(\n        address _foodNFT,\n        address _foodScramble,\n        address _paymentGateway\n    ) ERC721(\"Special Box\", \"BOX\") Ownable(msg.sender) {\n        foodNFT = IFoodNFT(_foodNFT);\n        foodScramble = IFoodScramble(_foodScramble);\n        paymentGateway = IPaymentGateway(_paymentGateway);\n    }\n\n    modifier onlyBurner() {\n        require(burners[msg.sender], \"Not authorized\");\n        _;\n    }\n\n    // === MINT FUNCTION ===\n\n    /**\n     * @notice Mint satu box dengan memburn 10 hamburger\n     * @dev Cek 10 hamburger di TBA, burn, lalu mint box\n     * @return tokenId yang di-mint\n     */\n    function mintBox() external payable nonReentrant returns (uint256) {\n        address tba = _getTBA(msg.sender);\n\n        // Cek hamburger cukup (minimal 10)\n        require(hasEnoughHamburgers(tba), \"Need 10 hamburgers\");\n\n        // Cek ETH payment jika diperlukan\n        if (boxPrice > 0) {\n            require(address(paymentGateway) != address(0), \"Payment gateway not set\");\n            require(msg.value >= boxPrice, \"Insufficient payment\");\n            paymentGateway.processPayment{ value: boxPrice }();\n\n            // Refund excess\n            if (msg.value > boxPrice) {\n                payable(msg.sender).transfer(msg.value - boxPrice);\n            }\n        }\n\n        // Burn 10 hamburgers\n        burnHamburgers(tba);\n\n        // Mint box ke TBA\n        _tokenIds++;\n        uint256 tokenId = _tokenIds;\n\n        // Mint directly without triggering _beforeTokenTransfer for boxes array\n        _mint(tba, tokenId);\n\n        // Manually add to boxes array only once\n        boxes[tba].push(tokenId);\n\n        emit MintBox(msg.sender, tba, tokenId);\n\n        return tokenId;\n    }\n\n    // === HAMBURGER FUNCTIONS ===\n\n    /**\n     * @notice Cek apakah TBA punya minimal 10 hamburger\n     * @param tba Address TBA yang dicek\n     * @return true jika punya >= 10 hamburger\n     */\n    function hasEnoughHamburgers(address tba) public view returns (bool) {\n        uint256[] memory foods = foodNFT.getMyFoods(tba);\n        return foods.length >= HAMBURGER_COST;\n    }\n\n    /**\n     * @notice Burn 10 hamburger dari TBA\n     * @param tba Address TBA\n     */\n    function burnHamburgers(address tba) internal {\n        uint256[] memory foods = foodNFT.getMyFoods(tba);\n        require(foods.length >= HAMBURGER_COST, \"Not enough hamburgers\");\n\n        // Burn 10 food NFT pertama\n        for (uint256 i = 0; i < HAMBURGER_COST; i++) {\n            foodNFT.burnFood(foods[i]);\n        }\n    }\n\n    // === BURN FUNCTIONS ===\n\n    /**\n     * @notice Burn box by token ID\n     */\n    function burnBox(uint256 tokenId) external onlyBurner {\n        require(_ownerOf(tokenId) != address(0), \"Box not exist\");\n\n        address tba = ownerOf(tokenId);\n        address user = _getUser(tba);\n\n        _update(address(0), tokenId, address(0));\n        _removeFromArray(boxes[tba], tokenId);\n\n        emit Burn(user, tba, tokenId);\n    }\n\n    // === VIEW FUNCTIONS ===\n\n    /**\n     * @notice Get TBA's box balance\n     * @param tba TBA address\n     * @return Array of box token IDs\n     */\n    function boxBalance(address tba) external view returns (uint256[] memory) {\n        return boxes[tba];\n    }\n\n    /**\n     * @notice Get user's TBA address\n     */\n    function getTBA(address user) external view returns (address) {\n        return _getTBA(user);\n    }\n\n    /**\n     * @notice Check berapa box yang bisa di-mint dari TBA\n     * @param tba TBA address\n     * @return Jumlah box yang bisa di-mint\n     */\n    function canMint(address tba) external view returns (uint256) {\n        uint256[] memory foods = foodNFT.getMyFoods(tba);\n        return foods.length / HAMBURGER_COST;\n    }\n\n    /**\n     * @notice Get total cost untuk mint\n     * @return ethCost ETH cost per box\n     */\n    function getMintCost() external view returns (uint256 ethCost) {\n        return boxPrice;\n    }\n\n    /**\n     * @notice Get current box price\n     */\n    function getBoxPrice() external view returns (uint256) {\n        return boxPrice;\n    }\n\n    /**\n     * @notice Get total supply\n     */\n    function total() external view returns (uint256) {\n        return _tokenIds;\n    }\n\n    // === ADMIN FUNCTIONS ===\n\n    /**\n     * @notice Add burner\n     */\n    function addBurner(address burner) external onlyOwner {\n        burners[burner] = true;\n    }\n\n    /**\n     * @notice Remove burner\n     */\n    function removeBurner(address burner) external onlyOwner {\n        burners[burner] = false;\n    }\n\n    /**\n     * @notice Set box price\n     */\n    function setBoxPrice(uint256 _boxPrice) external onlyOwner {\n        boxPrice = _boxPrice;\n        emit BoxPriceUpdated(_boxPrice);\n    }\n\n    /**\n     * @notice Set payment gateway\n     */\n    function setPaymentGateway(address _paymentGateway) external onlyOwner {\n        paymentGateway = IPaymentGateway(_paymentGateway);\n        emit PaymentGatewayUpdated(_paymentGateway);\n    }\n\n    /**\n     * @notice Set food NFT contract\n     */\n    function setFoodNFT(address _foodNFT) external onlyOwner {\n        foodNFT = IFoodNFT(_foodNFT);\n    }\n\n    /**\n     * @notice Set food scramble contract\n     */\n    function setFoodScramble(address _foodScramble) external onlyOwner {\n        foodScramble = IFoodScramble(_foodScramble);\n    }\n\n    // === INTERNAL FUNCTIONS ===\n\n    function _getTBA(address user) internal view returns (address) {\n        if (address(foodScramble) != address(0) && foodScramble.accountReady(user)) {\n            return foodScramble.getTBA(user);\n        }\n        return user;\n    }\n\n    function _getUser(address tba) internal pure returns (address) {\n        // Simplified - dalam implementasi nyata butuh reverse mapping\n        return tba;\n    }\n\n    function _removeFromArray(uint256[] storage array, uint256 value) private {\n        for (uint256 i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                array[i] = array[array.length - 1];\n                array.pop();\n                break;\n            }\n        }\n    }\n\n    // Override _update to prevent duplicate box entries\n    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\n        address from = super._update(to, tokenId, auth);\n\n        // Only handle transfers, not mints (from != address(0))\n        // Mints are handled manually in mintBox()\n        if (from != address(0)) {\n            _removeFromArray(boxes[from], tokenId);\n        }\n\n        // Only add to boxes array for transfers, not for mints\n        // Mints are handled manually in mintBox()\n        if (to != address(0) && from != address(0)) {\n            boxes[to].push(tokenId);\n        }\n\n        return from;\n    }\n}\n"
    },
    "contracts/SpecialBoxStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface ISpecialBox {\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function boxBalance(address tba) external view returns (uint256[] memory);\n    function getTBA(address user) external view returns (address);\n    function mintBox(address tba) external;\n}\n\ninterface IFoodScramble {\n    function getTBA(address user) external view returns (address);\n    function accountReady(address user) external view returns (bool);\n}\n\ninterface IFoodNFT {\n    function getMyFoods(address owner) external view returns (uint256[] memory);\n    function burnFood(uint256 tokenId) external;\n}\n\ninterface IPaymentGateway {\n    function processPayment() external payable;\n}\n\ncontract SpecialBoxStake is Ownable, ReentrancyGuard {\n    // Constants\n    uint256 public constant HAMBURGERS_PER_SPECIAL_BOX = 10;\n\n    // Interfaces\n    ISpecialBox public specialBox;\n    IFoodScramble public foodScramble;\n    IFoodNFT public hamburger;\n    IPaymentGateway public paymentGateway;\n\n    // Storage - using TBA addresses\n    mapping(address => address) public tbaList; // user => TBA address\n    mapping(address => uint256[]) public staked; // TBA => staked box IDs\n    mapping(uint256 => bool) public isStaked; // tokenId => staked status\n    mapping(uint256 => address) public stakedBy; // tokenId => TBA address\n\n    // Fees and configuration\n    uint256 public specialBoxFee = 0.01 ether;\n\n    // Events\n    event Stake(address indexed user, address indexed tba, uint256 tokenId);\n    event StakeBatch(address indexed user, address indexed tba, uint256[] tokenIds);\n    event Unstake(address indexed user, address indexed tba, uint256 tokenId);\n    event UnstakeBatch(address indexed user, address indexed tba, uint256[] tokenIds);\n    event StakeAll(address indexed user, address indexed tba, uint256[] tokenIds, uint256 totalStaked);\n    event SpecialBoxMinted(address indexed user, address indexed tba, uint256 amount);\n\n    constructor(\n        address _specialBox,\n        address _foodScramble,\n        address _hamburger,\n        address _paymentGateway\n    ) Ownable(msg.sender) {\n        specialBox = ISpecialBox(_specialBox);\n        foodScramble = IFoodScramble(_foodScramble);\n        hamburger = IFoodNFT(_hamburger);\n        paymentGateway = IPaymentGateway(_paymentGateway);\n    }\n\n    // === TBA Management Functions === //\n\n    function setTBA(address user, address tba) external onlyOwner {\n        tbaList[user] = tba;\n    }\n\n    function getTBA(address user) external view returns (address) {\n        return tbaList[user];\n    }\n\n    // === Mint Special Box Function === //\n\n    function mintSpecialBoxNFT() external payable {\n        address tba = tbaList[msg.sender];\n        require(tba != address(0), \"TBA not found\");\n\n        // Get hamburger count dari TBA\n        uint256[] memory myHamburgers = hamburger.getMyFoods(tba);\n        uint256 hamburgerCount = myHamburgers.length;\n\n        // Cek minimal 10 hamburger\n        require(hamburgerCount >= HAMBURGERS_PER_SPECIAL_BOX, \"Need 10+ hamburgers\");\n\n        // Cek payment jika ada fee\n        if (specialBoxFee > 0) {\n            require(msg.value >= specialBoxFee, \"Insufficient fee\");\n\n            try paymentGateway.processPayment{ value: specialBoxFee }() {\n                // Payment success\n            } catch {\n                revert(\"Payment processing failed\");\n            }\n        }\n\n        // Burn 10 hamburger pertama yang dimiliki\n        uint256[] memory hamburgersToBurn = new uint256[](HAMBURGERS_PER_SPECIAL_BOX);\n        for (uint256 i = 0; i < HAMBURGERS_PER_SPECIAL_BOX; i++) {\n            hamburgersToBurn[i] = myHamburgers[i];\n        }\n\n        // Burn hamburgers satu per satu\n        for (uint256 i = 0; i < HAMBURGERS_PER_SPECIAL_BOX; i++) {\n            hamburger.burnFood(hamburgersToBurn[i]);\n        }\n\n        // Mint 1 special box ke TBA\n        specialBox.mintBox(tba);\n\n        emit SpecialBoxMinted(msg.sender, tba, 1);\n    }\n\n    // === SINGLE STAKE FUNCTIONS === //\n\n    /**\n     * @notice Stake satu box\n     * @param tokenId ID box yang akan di-stake\n     */\n    function stake(uint256 tokenId) external nonReentrant {\n        address tba = _getTBA(msg.sender);\n\n        require(specialBox.ownerOf(tokenId) == tba, \"Not owner\");\n        require(!isStaked[tokenId], \"Already staked\");\n\n        isStaked[tokenId] = true;\n        stakedBy[tokenId] = tba;\n        staked[tba].push(tokenId);\n\n        emit Stake(msg.sender, tba, tokenId);\n    }\n\n    /**\n     * @notice Unstake satu box\n     * @param tokenId ID box yang akan di-unstake\n     */\n    function unstake(uint256 tokenId) external nonReentrant {\n        address tba = _getTBA(msg.sender);\n\n        require(stakedBy[tokenId] == tba, \"Not your stake\");\n        require(isStaked[tokenId], \"Not staked\");\n\n        isStaked[tokenId] = false;\n        stakedBy[tokenId] = address(0);\n        _removeFromArray(staked[tba], tokenId);\n\n        emit Unstake(msg.sender, tba, tokenId);\n    }\n\n    // === BATCH STAKE FUNCTIONS === //\n\n    /**\n     * @notice Stake multiple boxes\n     * @param tokenIds Array ID box yang akan di-stake\n     */\n    function stakeBatch(uint256[] memory tokenIds) external nonReentrant {\n        require(tokenIds.length > 0 && tokenIds.length <= 50, \"Invalid batch size\");\n\n        address tba = _getTBA(msg.sender);\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(specialBox.ownerOf(tokenIds[i]) == tba, \"Not owner\");\n            require(!isStaked[tokenIds[i]], \"Already staked\");\n\n            isStaked[tokenIds[i]] = true;\n            stakedBy[tokenIds[i]] = tba;\n            staked[tba].push(tokenIds[i]);\n        }\n\n        emit StakeBatch(msg.sender, tba, tokenIds);\n    }\n\n    /**\n     * @notice Unstake multiple boxes\n     * @param tokenIds Array ID box yang akan di-unstake\n     */\n    function unstakeBatch(uint256[] memory tokenIds) external nonReentrant {\n        require(tokenIds.length > 0 && tokenIds.length <= 50, \"Invalid batch size\");\n\n        address tba = _getTBA(msg.sender);\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(stakedBy[tokenIds[i]] == tba, \"Not your stake\");\n            require(isStaked[tokenIds[i]], \"Not staked\");\n\n            isStaked[tokenIds[i]] = false;\n            stakedBy[tokenIds[i]] = address(0);\n            _removeFromArray(staked[tba], tokenIds[i]);\n        }\n\n        emit UnstakeBatch(msg.sender, tba, tokenIds);\n    }\n\n    // === STAKE ALL FUNCTION === //\n\n    /**\n     * @notice Stake semua box yang dimiliki di TBA\n     * @dev Auto-detect semua box dan stake sekaligus\n     * @return tokenIds Array ID box yang di-stake\n     */\n    function stakeAll() external nonReentrant returns (uint256[] memory) {\n        address tba = _getTBA(msg.sender);\n\n        // Get semua box yang dimiliki TBA\n        uint256[] memory allBoxes = specialBox.boxBalance(tba);\n        require(allBoxes.length > 0, \"No boxes to stake\");\n\n        // Filter hanya yang belum di-stake\n        uint256[] memory toStake = new uint256[](allBoxes.length);\n        uint256 count = 0;\n\n        for (uint256 i = 0; i < allBoxes.length; i++) {\n            if (!isStaked[allBoxes[i]]) {\n                toStake[count] = allBoxes[i];\n                count++;\n            }\n        }\n\n        require(count > 0, \"All boxes already staked\");\n        require(count <= 50, \"Too many boxes, use batch\");\n\n        // Resize array\n        uint256[] memory finalTokenIds = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            finalTokenIds[i] = toStake[i];\n        }\n\n        // Stake semua\n        for (uint256 i = 0; i < count; i++) {\n            isStaked[finalTokenIds[i]] = true;\n            stakedBy[finalTokenIds[i]] = tba;\n            staked[tba].push(finalTokenIds[i]);\n        }\n\n        emit StakeAll(msg.sender, tba, finalTokenIds, count);\n\n        return finalTokenIds;\n    }\n\n    /**\n     * @notice Unstake semua box yang di-stake di TBA\n     * @return tokenIds Array ID box yang di-unstake\n     */\n    function unstakeAll() external nonReentrant returns (uint256[] memory) {\n        address tba = _getTBA(msg.sender);\n\n        uint256[] memory stakedBoxes = staked[tba];\n        require(stakedBoxes.length > 0, \"No staked boxes\");\n        require(stakedBoxes.length <= 50, \"Too many staked, use batch\");\n\n        // Copy array karena kita akan modify staked[tba]\n        uint256[] memory toUnstake = new uint256[](stakedBoxes.length);\n        for (uint256 i = 0; i < stakedBoxes.length; i++) {\n            toUnstake[i] = stakedBoxes[i];\n        }\n\n        // Unstake semua\n        for (uint256 i = 0; i < toUnstake.length; i++) {\n            isStaked[toUnstake[i]] = false;\n            stakedBy[toUnstake[i]] = address(0);\n        }\n\n        // Clear staked array\n        delete staked[tba];\n\n        emit UnstakeBatch(msg.sender, tba, toUnstake);\n\n        return toUnstake;\n    }\n\n    // === VIEW FUNCTIONS === //\n\n    /**\n     * @notice Get TBA's staked boxes\n     * @param tba TBA address\n     * @return Array of staked token IDs\n     */\n    function stakedBoxBalance(address tba) external view returns (uint256[] memory) {\n        return staked[tba];\n    }\n\n    /**\n     * @notice Get total staked boxes count for TBA\n     * @param tba TBA address\n     * @return Total staked count\n     */\n    function totalStakedBoxes(address tba) external view returns (uint256) {\n        return staked[tba].length;\n    }\n\n    /**\n     * @notice Check if box is staked\n     * @param tokenId Box token ID\n     * @return true if staked\n     */\n    function checkStaked(uint256 tokenId) external view returns (bool) {\n        return isStaked[tokenId];\n    }\n\n    /**\n     * @notice Get who staked the box\n     * @param tokenId Box token ID\n     * @return TBA address that staked the box\n     */\n    function getStaker(uint256 tokenId) external view returns (address) {\n        return stakedBy[tokenId];\n    }\n\n\n    /**\n     * @notice Get stakeable boxes count (boxes that can be staked)\n     * @param tba TBA address\n     * @return Number of boxes that can be staked\n     */\n    function getStakeableCount(address tba) external view returns (uint256) {\n        uint256[] memory allBoxes = specialBox.boxBalance(tba);\n\n        uint256 count = 0;\n        for (uint256 i = 0; i < allBoxes.length; i++) {\n            if (!isStaked[allBoxes[i]]) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    // === ADMIN FUNCTIONS === //\n\n    /**\n     * @notice Set SpecialBox contract address\n     * @param _specialBox New SpecialBox contract address\n     */\n    function setSpecialBox(address _specialBox) external onlyOwner {\n        specialBox = ISpecialBox(_specialBox);\n    }\n\n    /**\n     * @notice Set FoodScramble contract address\n     * @param _foodScramble New FoodScramble contract address\n     */\n    function setFoodScramble(address _foodScramble) external onlyOwner {\n        foodScramble = IFoodScramble(_foodScramble);\n    }\n\n    // === INTERNAL FUNCTIONS === //\n\n    function _getTBA(address user) internal view returns (address) {\n        if (address(foodScramble) != address(0) && foodScramble.accountReady(user)) {\n            return foodScramble.getTBA(user);\n        }\n        return user;\n    }\n\n    function _removeFromArray(uint256[] storage array, uint256 value) private {\n        for (uint256 i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                array[i] = array[array.length - 1];\n                array.pop();\n                break;\n            }\n        }\n    }\n}\n"
    },
    "contracts/SpiceToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/// @title SpiceToken - Fixed Supply ERC20 Token (Baby Bitcoin)\ncontract SpiceToken is ERC20 {\n    // 21,000,000 * 10^18 (Baby Bitcoin 21 million supply, with 18 decimals)\n    uint256 public constant MAX_SUPPLY = 21_000_000 * 10 ** 18;\n\n    constructor() ERC20(\"SpiceToken\", \"SPICE\") {\n        _mint(msg.sender, MAX_SUPPLY);\n    }\n}\n"
    },
    "contracts/TomatoToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TomatoToken is ERC20, Ownable {\n    address public gameContract;\n\n    constructor() ERC20(\"Tomato\", \"TM\") Ownable(msg.sender) {}\n\n    function setGameContract(address _gameContract) external onlyOwner {\n        gameContract = _gameContract;\n    }\n\n    /// @notice Mint token Tomato\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == gameContract, \"Only game contract can mint\");\n\n        // mint token ke user\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/UniPass.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract UniPass is ERC721, Ownable {\n    uint256 private _tokenIds;\n\n    // Base URI for IPFS metadata\n    string private baseTokenURI;\n\n    // SpecialBoxManager sebagai minter\n    address public minter;\n\n    event MinterUpdated(address indexed newMinter);\n    event BaseURIUpdated(string newBaseURI);\n\n    modifier onlyMinter() {\n        require(msg.sender == minter, \"Not authorized minter\");\n        _;\n    }\n\n    constructor(string memory baseURI_) ERC721(\"UniPass\", \"UPASS\") Ownable(msg.sender) {\n        baseTokenURI = baseURI_;\n    }\n\n    /// @notice Set SpecialBoxManager sebagai minter resmi\n    function setMinter(address _minter) external onlyOwner {\n        require(_minter != address(0), \"Invalid minter\");\n        minter = _minter;\n        emit MinterUpdated(_minter);\n    }\n\n    /// @notice Update base URI (misalnya IPFS CID baru)\n    function setBaseURI(string calldata newBaseURI) external onlyOwner {\n        baseTokenURI = newBaseURI;\n        emit BaseURIUpdated(newBaseURI);\n    }\n\n    /// @notice Mint NFT UniPass untuk user (hanya SpecialBoxManager)\n    function mintUniPass(address to) external onlyMinter returns (uint256) {\n        uint256 newId = _tokenIds;\n        _tokenIds++;\n        _safeMint(to, newId);\n        return newId;\n    }\n\n    /// @notice BaseURI override untuk metadata IPFS\n    function _baseURI() internal view override returns (string memory) {\n        return baseTokenURI;\n    }\n}\n"
    },
    "contracts/UnirambleMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract UnirambleMarketplace is Ownable {\n    struct Listing {\n        address seller;\n        address token;\n        uint256 amount;\n        uint256 pricePerToken; // in wei\n        bool active;\n    }\n\n    Listing[] public listings;\n    address[] public trackedTokens;\n    mapping(address => bool) public isTracked;\n\n    constructor() Ownable(msg.sender) {}\n\n    // Mapping untuk menyimpan harga fix (0 = tidak ada harga fix)\n    mapping(address => uint256) public fixedPrices;\n\n    uint256 public constant FEE_PERCENT = 10;\n\n    event TokenListed(\n        uint256 indexed listingId,\n        address indexed seller,\n        address indexed token,\n        uint256 amount,\n        uint256 pricePerToken\n    );\n    event TokenPurchased(\n        uint256 indexed listingId,\n        address indexed buyer,\n        uint256 amount,\n        uint256 totalPaid,\n        uint256 fee\n    );\n    event ListingCancelled(uint256 indexed listingId);\n    event ListingUpdated(uint256 indexed listingId, uint256 newPrice);\n    event TokenTracked(address indexed token, uint256 fixedPrice);\n\n    /// --------------------------\n    /// PUBLIC FUNCTIONS\n    /// --------------------------\n\n    /**\n     * @notice Owner menambahkan token tracked sekaligus set harga fix (bisa 0 jika tidak ada harga fix)\n     */\n    function addTrackedToken(address token, uint256 fixedPrice) external onlyOwner {\n        require(!isTracked[token], \"Already tracked\");\n        isTracked[token] = true;\n        trackedTokens.push(token);\n\n        if (fixedPrice > 0) {\n            fixedPrices[token] = fixedPrice;\n        }\n\n        emit TokenTracked(token, fixedPrice);\n    }\n\n    function listToken(address token, uint256 amount, uint256 pricePerToken) external {\n        require(isTracked[token], \"Token not tracked\");\n        require(amount > 0, \"Invalid amount\");\n\n        // Jika ada fixedPrice untuk token ini, maka listing harus pakai harga fix itu\n        uint256 fixedPrice = fixedPrices[token];\n        if (fixedPrice > 0) {\n            require(pricePerToken == fixedPrice, \"Price must match fixed price\");\n        } else {\n            require(pricePerToken > 0, \"Invalid price\");\n        }\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n\n        listings.push(\n            Listing({ seller: msg.sender, token: token, amount: amount, pricePerToken: pricePerToken, active: true })\n        );\n\n        emit TokenListed(listings.length - 1, msg.sender, token, amount, pricePerToken);\n    }\n\n    function buyToken(uint256 listingId, uint256 amountToBuy) external payable {\n        Listing storage listing = listings[listingId];\n        require(listing.active, \"Inactive listing\");\n        require(amountToBuy > 0 && amountToBuy <= listing.amount, \"Invalid amount\");\n\n        uint256 totalPrice = listing.pricePerToken * amountToBuy;\n        require(msg.value >= totalPrice, \"Insufficient ETH\");\n\n        uint256 fee = (totalPrice * FEE_PERCENT) / 100;\n        uint256 sellerAmount = totalPrice - fee;\n\n        listing.amount -= amountToBuy;\n        if (listing.amount == 0) listing.active = false;\n\n        IERC20(listing.token).transfer(msg.sender, amountToBuy);\n        payable(listing.seller).transfer(sellerAmount);\n        payable(owner()).transfer(fee);\n\n        emit TokenPurchased(listingId, msg.sender, amountToBuy, totalPrice, fee);\n    }\n\n    function cancelListing(uint256 listingId) external {\n        Listing storage listing = listings[listingId];\n        require(listing.active, \"Already inactive\");\n        require(msg.sender == listing.seller, \"Not your listing\");\n\n        listing.active = false;\n        IERC20(listing.token).transfer(listing.seller, listing.amount);\n\n        emit ListingCancelled(listingId);\n    }\n\n    function updateListingPrice(uint256 listingId, uint256 newPrice) external {\n        Listing storage listing = listings[listingId];\n        require(listing.active, \"Inactive listing\");\n        require(msg.sender == listing.seller, \"Not your listing\");\n\n        // Jika token ada fixedPrice, harga tidak bisa diubah\n        uint256 fixedPrice = fixedPrices[listing.token];\n        require(fixedPrice == 0, \"Price is fixed, cannot update\");\n        require(newPrice > 0, \"Invalid price\");\n\n        listing.pricePerToken = newPrice;\n\n        emit ListingUpdated(listingId, newPrice);\n    }\n\n    /// --------------------------\n    /// VIEW FUNCTIONS\n    /// --------------------------\n\n    function getTrackedTokens() external view returns (address[] memory) {\n        return trackedTokens;\n    }\n\n    function listingCounter() external view returns (uint256) {\n        return listings.length;\n    }\n\n    function getListing(uint256 index) external view returns (Listing memory) {\n        return listings[index];\n    }\n\n    function listingsLength() public view returns (uint256) {\n        return listings.length;\n    }\n\n    function getFixedPrice(address token) external view returns (uint256) {\n        return fixedPrices[token];\n    }\n\n    /**\n     * @notice Fungsi batch untuk mendapatkan fixedPrices sekaligus untuk banyak token\n     */\n    function getFixedPrices(address[] calldata tokens) external view returns (uint256[] memory) {\n        uint256[] memory prices = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            prices[i] = fixedPrices[tokens[i]];\n        }\n        return prices;\n    }\n\n    function getListings(uint256 from, uint256 to) external view returns (Listing[] memory) {\n        require(to >= from && to <= listings.length, \"Invalid range\");\n        Listing[] memory result = new Listing[](to - from);\n        for (uint256 i = from; i < to; i++) {\n            result[i - from] = listings[i];\n        }\n        return result;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}