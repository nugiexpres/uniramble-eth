{
  "address": "0x10394aBA8b053E2813e153cd7899E70FF2D4C06C",
  "abi": [
    {
      "inputs": [],
      "name": "Create2EmptyBytecode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Create2FailedDeployment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "Create2InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "account",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "createdAccounts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedCombinations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x437f82934ea86ef4ea1ef8aa79db59b19955776575ba15986e201e7b614cc38c",
  "receipt": {
    "to": null,
    "from": "0x9bF68A0f0be9A9B6dCeb4D5675745c2f7cFb9483",
    "contractAddress": "0x10394aBA8b053E2813e153cd7899E70FF2D4C06C",
    "transactionIndex": 5,
    "gasUsed": "622723",
    "logsBloom": "0x
    "blockHash": "0x015886d47b49d04f77392c482c0121a4d6839d386d226ad5942c2a2558a2228f",
    "transactionHash": "0x437f82934ea86ef4ea1ef8aa79db59b19955776575ba15986e201e7b614cc38c",
    "logs": [],
    "blockNumber": 44185573,
    "cumulativeGasUsed": "1225445",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ff740727392c95dbe8f9b1b72db3819d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Create2EmptyBytecode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Create2FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"Create2InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"createdAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedCombinations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"Create2EmptyBytecode()\":[{\"details\":\"There's no code to deploy.\"}],\"Create2FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"Create2InsufficientBalance(uint256,uint256)\":[{\"details\":\"Not enough balance for performing a CREATE2 deploy.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC6551Registry.sol\":\"ERC6551Registry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Not enough balance for performing a CREATE2 deploy.\\n     */\\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error Create2FailedDeployment();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Create2InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        if (addr == address(0)) {\\n            revert Create2FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e\",\"license\":\"MIT\"},\"contracts/ERC6551AccountProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract ERC6551AccountProxy {\\n    // Gunakan slot standar EIP-1967 untuk implementasi proxy\\n    bytes32 private constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    constructor(address implementation, bytes memory initData) payable {\\n        require(implementation != address(0), \\\"Zero implementation\\\");\\n\\n        // Simpan alamat implementasi di storage slot\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        assembly {\\n            sstore(slot, implementation)\\n        }\\n\\n        // delegatecall ke implementasi\\n        if (initData.length > 0) {\\n            (bool success, ) = implementation.delegatecall(initData);\\n            require(success, \\\"Initialization failed\\\");\\n        }\\n    }\\n\\n    fallback() external payable {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        assembly {\\n            let impl := sload(slot)\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x42171c609eb8254dcc84016427b08aa616e6b04e3d02e0eb5a9038e633d7030c\",\"license\":\"MIT\"},\"contracts/ERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"./ERC6551AccountProxy.sol\\\";\\n\\ncontract ERC6551Registry {\\n    error InitializationFailed();\\n\\n    event AccountCreated(\\n        address indexed account,\\n        address indexed implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    );\\n\\n    // Track created accounts to avoid duplicates\\n    mapping(address => bool) public createdAccounts;\\n    mapping(bytes32 => bool) public usedCombinations;\\n\\n    function createAccount(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt,\\n        bytes calldata initData\\n    ) external returns (address) {\\n        bytes memory proxyCode = abi.encodePacked(\\n            type(ERC6551AccountProxy).creationCode,\\n            abi.encode(implementation, initData)\\n        );\\n\\n        bytes32 combinationHash = keccak256(abi.encode(implementation, chainId, tokenContract, tokenId, salt));\\n        require(!usedCombinations[combinationHash], \\\"Combination already used\\\");\\n\\n        address computed = Create2.computeAddress(bytes32(salt), keccak256(proxyCode));\\n        require(!createdAccounts[computed], \\\"Account already exists\\\");\\n\\n        address deployed = Create2.deploy(0, bytes32(salt), proxyCode);\\n\\n        usedCombinations[combinationHash] = true;\\n        createdAccounts[deployed] = true;\\n\\n        emit AccountCreated(deployed, implementation, chainId, tokenContract, tokenId, salt);\\n\\n        return deployed;\\n    }\\n\\n    function account(\\n        address implementation,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId,\\n        uint256 salt\\n    ) external view returns (address) {\\n        bytes memory initData = abi.encode(chainId, tokenContract, tokenId);\\n        bytes memory proxyCode = abi.encodePacked(\\n            type(ERC6551AccountProxy).creationCode,\\n            abi.encode(implementation, initData)\\n        );\\n\\n        return Create2.computeAddress(bytes32(salt), keccak256(proxyCode));\\n    }\\n}\\n\",\"keccak256\":\"0xba2e09b3946ee4082bb07e1175a2d3ab5e69000e3a6769b8d34eb41bf802527f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a33806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063480c8ab61461005157806349bc4aed146100895780635e9bc536146100ac578063da7323b3146100d7575b600080fd5b61007461005f3660046104de565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100746100973660046104f9565b60016020526000908152604090205460ff1681565b6100bf6100ba366004610512565b6100ea565b6040516001600160a01b039091168152602001610080565b6100bf6100e5366004610560565b6101a5565b60408051602081018690526001600160a01b03851681830152606080820185905282518083039091018152608082019283905260009290918391906101319060a0016104b5565b601f1982820381018352601f909101166040819052610156908a908590602001610635565b60408051601f19818403018152908290526101749291602001610677565b60405160208183030381529060405290506101998460001b82805190602001206103f7565b98975050505050505050565b600080604051806020016101b8906104b5565b601f1982820381018352601f9091011660408190526101df908b90879087906020016106a6565b60408051601f19818403018152908290526101fd9291602001610677565b60408051601f198184030181528282526001600160a01b03808d1660208501529183018b905290891660608301526080820188905260a08201879052915060009060c00160408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff16156102be5760405162461bcd60e51b815260206004820152601860248201527f436f6d62696e6174696f6e20616c72656164792075736564000000000000000060448201526064015b60405180910390fd5b60006102d48760001b84805190602001206103f7565b6001600160a01b03811660009081526020819052604090205490915060ff16156103395760405162461bcd60e51b81526020600482015260166024820152754163636f756e7420616c72656164792065786973747360501b60448201526064016102b5565b600061034681898661040b565b6000848152600160208181526040808420805460ff1990811685179091556001600160a01b03808716808752938690529482902080549091169093179092559051929350908e16917f07fba7bba1191da7ee1155dcfa0030701c9c9a9cc34a93b991fc6fd0c9268d8f906103e0908f908f908f908f909384526001600160a01b039290921660208401526040830152606082015260800190565b60405180910390a39b9a5050505050505050505050565b600061040483833061048b565b9392505050565b6000834710156104375760405163392efb2b60e21b8152476004820152602481018590526044016102b5565b815160000361045957604051631328927760e21b815260040160405180910390fd5b8282516020840186f590506001600160a01b03811661040457604051633a0ba96160e11b815260040160405180910390fd5b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b610317806106e783390190565b80356001600160a01b03811681146104d957600080fd5b919050565b6000602082840312156104f057600080fd5b610404826104c2565b60006020828403121561050b57600080fd5b5035919050565b600080600080600060a0868803121561052a57600080fd5b610533866104c2565b945060208601359350610548604087016104c2565b94979396509394606081013594506080013592915050565b600080600080600080600060c0888a03121561057b57600080fd5b610584886104c2565b965060208801359550610599604089016104c2565b9450606088013593506080880135925060a088013567ffffffffffffffff808211156105c457600080fd5b818a0191508a601f8301126105d857600080fd5b8135818111156105e757600080fd5b8b60208285010111156105f957600080fd5b60208301945080935050505092959891949750929550565b60005b8381101561062c578181015183820152602001610614565b50506000910152565b60018060a01b03831681526040602082015260008251806040840152610662816060850160208701610611565b601f01601f1916919091016060019392505050565b60008351610689818460208801610611565b83519083019061069d818360208801610611565b01949350505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f191601019291505056fe608060405260405161031738038061031783398101604081905261002291610197565b6001600160a01b03821661007d5760405162461bcd60e51b815260206004820152601360248201527f5a65726f20696d706c656d656e746174696f6e0000000000000000000000000060448201526064015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc828155815115610155576000836001600160a01b0316836040516100c29190610265565b600060405180830381855af49150503d80600081146100fd576040519150601f19603f3d011682016040523d82523d6000602084013e610102565b606091505b50509050806101535760405162461bcd60e51b815260206004820152601560248201527f496e697469616c697a6174696f6e206661696c656400000000000000000000006044820152606401610074565b505b505050610281565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561018e578181015183820152602001610176565b50506000910152565b600080604083850312156101aa57600080fd5b82516001600160a01b03811681146101c157600080fd5b60208401519092506001600160401b03808211156101de57600080fd5b818501915085601f8301126101f257600080fd5b8151818111156102045761020461015d565b604051601f8201601f19908116603f0116810190838211818310171561022c5761022c61015d565b8160405282815288602084870101111561024557600080fd5b610256836020830160208801610173565b80955050505050509250929050565b60008251610277818460208701610173565b9190910192915050565b60888061028f6000396000f3fe608060405236600a57005b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80543660008037600080366000845af490503d6000803e808015604d573d6000f35b3d6000fdfea264697066735822122047ab1983f96f4a3cee6cdc8b912cba97d6826a65e8ec6c97a818b045448af28264736f6c63430008170033a2646970667358221220eba5fcd6417f0e95c83a41f1e408354b2731ab3cdc23cb4e639ae091cdfd394f64736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063480c8ab61461005157806349bc4aed146100895780635e9bc536146100ac578063da7323b3146100d7575b600080fd5b61007461005f3660046104de565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100746100973660046104f9565b60016020526000908152604090205460ff1681565b6100bf6100ba366004610512565b6100ea565b6040516001600160a01b039091168152602001610080565b6100bf6100e5366004610560565b6101a5565b60408051602081018690526001600160a01b03851681830152606080820185905282518083039091018152608082019283905260009290918391906101319060a0016104b5565b601f1982820381018352601f909101166040819052610156908a908590602001610635565b60408051601f19818403018152908290526101749291602001610677565b60405160208183030381529060405290506101998460001b82805190602001206103f7565b98975050505050505050565b600080604051806020016101b8906104b5565b601f1982820381018352601f9091011660408190526101df908b90879087906020016106a6565b60408051601f19818403018152908290526101fd9291602001610677565b60408051601f198184030181528282526001600160a01b03808d1660208501529183018b905290891660608301526080820188905260a08201879052915060009060c00160408051601f1981840301815291815281516020928301206000818152600190935291205490915060ff16156102be5760405162461bcd60e51b815260206004820152601860248201527f436f6d62696e6174696f6e20616c72656164792075736564000000000000000060448201526064015b60405180910390fd5b60006102d48760001b84805190602001206103f7565b6001600160a01b03811660009081526020819052604090205490915060ff16156103395760405162461bcd60e51b81526020600482015260166024820152754163636f756e7420616c72656164792065786973747360501b60448201526064016102b5565b600061034681898661040b565b6000848152600160208181526040808420805460ff1990811685179091556001600160a01b03808716808752938690529482902080549091169093179092559051929350908e16917f07fba7bba1191da7ee1155dcfa0030701c9c9a9cc34a93b991fc6fd0c9268d8f906103e0908f908f908f908f909384526001600160a01b039290921660208401526040830152606082015260800190565b60405180910390a39b9a5050505050505050505050565b600061040483833061048b565b9392505050565b6000834710156104375760405163392efb2b60e21b8152476004820152602481018590526044016102b5565b815160000361045957604051631328927760e21b815260040160405180910390fd5b8282516020840186f590506001600160a01b03811661040457604051633a0ba96160e11b815260040160405180910390fd5b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b610317806106e783390190565b80356001600160a01b03811681146104d957600080fd5b919050565b6000602082840312156104f057600080fd5b610404826104c2565b60006020828403121561050b57600080fd5b5035919050565b600080600080600060a0868803121561052a57600080fd5b610533866104c2565b945060208601359350610548604087016104c2565b94979396509394606081013594506080013592915050565b600080600080600080600060c0888a03121561057b57600080fd5b610584886104c2565b965060208801359550610599604089016104c2565b9450606088013593506080880135925060a088013567ffffffffffffffff808211156105c457600080fd5b818a0191508a601f8301126105d857600080fd5b8135818111156105e757600080fd5b8b60208285010111156105f957600080fd5b60208301945080935050505092959891949750929550565b60005b8381101561062c578181015183820152602001610614565b50506000910152565b60018060a01b03831681526040602082015260008251806040840152610662816060850160208701610611565b601f01601f1916919091016060019392505050565b60008351610689818460208801610611565b83519083019061069d818360208801610611565b01949350505050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f191601019291505056fe608060405260405161031738038061031783398101604081905261002291610197565b6001600160a01b03821661007d5760405162461bcd60e51b815260206004820152601360248201527f5a65726f20696d706c656d656e746174696f6e0000000000000000000000000060448201526064015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc828155815115610155576000836001600160a01b0316836040516100c29190610265565b600060405180830381855af49150503d80600081146100fd576040519150601f19603f3d011682016040523d82523d6000602084013e610102565b606091505b50509050806101535760405162461bcd60e51b815260206004820152601560248201527f496e697469616c697a6174696f6e206661696c656400000000000000000000006044820152606401610074565b505b505050610281565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561018e578181015183820152602001610176565b50506000910152565b600080604083850312156101aa57600080fd5b82516001600160a01b03811681146101c157600080fd5b60208401519092506001600160401b03808211156101de57600080fd5b818501915085601f8301126101f257600080fd5b8151818111156102045761020461015d565b604051601f8201601f19908116603f0116810190838211818310171561022c5761022c61015d565b8160405282815288602084870101111561024557600080fd5b610256836020830160208801610173565b80955050505050509250929050565b60008251610277818460208701610173565b9190910192915050565b60888061028f6000396000f3fe608060405236600a57005b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80543660008037600080366000845af490503d6000803e808015604d573d6000f35b3d6000fdfea264697066735822122047ab1983f96f4a3cee6cdc8b912cba97d6826a65e8ec6c97a818b045448af28264736f6c63430008170033a2646970667358221220eba5fcd6417f0e95c83a41f1e408354b2731ab3cdc23cb4e639ae091cdfd394f64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "Create2EmptyBytecode()": [
        {
          "details": "There's no code to deploy."
        }
      ],
      "Create2FailedDeployment()": [
        {
          "details": "The deployment failed."
        }
      ],
      "Create2InsufficientBalance(uint256,uint256)": [
        {
          "details": "Not enough balance for performing a CREATE2 deploy."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10232,
        "contract": "contracts/ERC6551Registry.sol:ERC6551Registry",
        "label": "createdAccounts",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10236,
        "contract": "contracts/ERC6551Registry.sol:ERC6551Registry",
        "label": "usedCombinations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}